<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC – gRPC Blog</title>
    <link>https://grpc.io/blog/</link>
    <description>Recent content in gRPC Blog on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://grpc.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Blog: Highlights in gRPConf 2024:Customer Showcase, Developer Engagement, Birds of Feathers Discussions and more.</title>
      <link>https://grpc.io/blog/grpconf-2024-videos/</link>
      <pubDate>Mon, 25 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpconf-2024-videos/</guid>
      <description>
        
        
        &lt;p&gt;We loved hosting gRPConf 2024 this summer in Sunnyvale, California. Thank you to
hundreds of developers from Netflix, Apple, Turso, Microsoft, Cisco, Coinbase,
LinkedIn, Datadog, Mercari, Aspect Build, Signeen, Authzed, Reboot.dev,
to name a few, who joined our special event. We were overwhelmed by the
various topics and advanced use cases around the gRPC ecosystem. If you missed
the opportunity to join in person, here are the video recordings that highlight
the presentations during the day:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/HK2mxpBedcg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[gRPConf 2024 Keynote] Welcome! | Kevin Nilson, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/aTVFx0YaDFo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[gRPConf 2024 Keynote] State of gRPC | Abhishek Kumar, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/sImWl7JyK_Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[gRPConf 2024 Keynote] Overview of gRPC | Ivy Zhuang, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/p80PVtLW8eg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;[gRPConf 2024 Keynote] Industry Trends and gRPC | Muninder Sambi &amp;amp; Anoop Vetteth, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/5dMK5OW6WSw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Ten Years of gRPC | Jung-Yu (Gina) Yeh &amp;amp; Richard Belleville, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/0g5Ef3mVOKg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reducing gRPC Call Volume Through Caching and Batching | Benjamin Fedorka, Netflix&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/7maAI9Z3-II&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building a New gRPC Library in Swift | George Barnett, Apple&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/8oj1nPt6L0Y&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Rust | Doug Fawley, Google, and Lucio Franco, Turso&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/9nyUyUD4jwM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How Low Can You Go? A Dive into gRPC and ttRPC | Archana Choudhary &amp;amp; Sudipta Pandit, Microsoft&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/DrikBWJZ0uA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dynamic Policy Enforcement for Privacy Techniques in Microservice Architectures | Rami Haddad, Cisco&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/G6PRjmXuBG8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Load Balancing in gRPC | Easwar Swaminathan, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/GDJrw36wwWY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enhancing gRPC micro-services | Holly Casaletto and Yucong Sun, Coinbase&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/IZsYnCftm7w&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC and AI | Eric Anderson &amp;amp; Yuexin Li, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/LIiprzx6avM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;High Performance Service Meshes with gRPC Proxyless | Jung-Yu (Gina) Yeh &amp;amp; Arvind Bright, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/S6iudSfAEmY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Managing Protocol Buffers at Scale | Richard Belleville &amp;amp; Terry Wilson, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/SjWa636dpP8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Rethinking Data Flow in gRPC-Go: | Ricardo Fernández Alvarado &amp;amp; Easwar Swaminathan, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/_GDyu2FOiA0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dos and Don’ts: Designing an xDS Backend for the LinkedIn Scale | Paul Chesnais, LinkedIn&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/gc3kNMvgrHQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Adapting our xDS control plane for proxyless gRPC | Antoine Tollenaere, Datadog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/ihzQp3phKCU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC APIs under One Roof: Mastering gRPC Federation for Efficient BFFs | Shuhei Kitagawa, Mercari&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/m9kCnYgoac8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A Deep Dive into Advanced TLS | Andrey Ermolov &amp;amp; Gregory Cooke, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/nuG_7HflISU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Powering Cisco ThousandEyes high-performant data streams w/ gRPC &amp;amp; OpenTelem. | Vitaly Kumov, Cisco&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/p9xzHg0Rk4U&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building Monorepo gRPC Services with Bazel | Alex Eagle, Aspect Build&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/psYQFbPgIOI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Metadata Limits: The Good, the Bad, and the Ugly | Alisha Nanda, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/qFSHoxs8i2Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fortifying gRPC Microservices: Beyond JWT with mTLS and SPIFFE | Mehrdad Afshari, Signeen&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/uQh9ZVGkrak&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Performance and Testing: a Maintainer Perspective | Ashley Zhang &amp;amp; Adam Heller, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/v_e2ExQwphQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building SpiceDB: a gRPC-first database | Jimmy Zelinskie, authzed&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/zVhvJXdyXLY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Enabling Distributed Transactions Across Microservices using gRPC | Benjamin Hindman, reboot.dev&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Rf1V6M6SDr4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Subsetting in gRPC: How we implemented it at Datadog | Sergey Matyukevich, Datadog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image1.jpg&#34; alt=&#34;Conference Gate&#34; id=&#34;grpc-conf-2024-image1.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image1.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image1.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image1.jpg&#34; alt=&#34;Conference Gate&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image2.jpg&#34; alt=&#34;Kevin Opening Keynote&#34; id=&#34;grpc-conf-2024-image2.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image2.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image2.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image2.jpg&#34; alt=&#34;Kevin Opening Keynote&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image3.jpg&#34; alt=&#34;Abhishek Keynote: State of gRPC&#34; id=&#34;grpc-conf-2024-image3.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image3.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image3.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image3.jpg&#34; alt=&#34;Abhishek Keynote: State of gRPC&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image4.jpg&#34; alt=&#34;Ivy Zhuang Keynote Talk: Overview of gRPC&#34; id=&#34;grpc-conf-2024-image4.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image4.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image4.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image4.jpg&#34; alt=&#34;Ivy Zhuang Keynote Talk: Overview of gRPC&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image5.jpg&#34; alt=&#34;gRPConf 2024 Audiences ask questions&#34; id=&#34;grpc-conf-2024-image5.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image5.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image5.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image5.jpg&#34; alt=&#34;gRPConf 2024 Audiences ask questions&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2024-image6.jpg&#34; alt=&#34;gRPConf 2024 Audiences&#34; id=&#34;grpc-conf-2024-image6.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2024-image6.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2024-image6.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2024-image6.jpg&#34; alt=&#34;gRPConf 2024 Audiences&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We received a wealth of feedbacks from everyone throughout the day which has
helped us shape our future roadmap. Stay tuned to gRPC on many platforms for new
releases, announcements and events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@grpcio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC YouTube Channel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/grpcio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Meetup Group&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Website&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Group Forum&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/grpcio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Announcing Our New Mailing List grpc-io-announce</title>
      <link>https://grpc.io/blog/grpc-io-announce/</link>
      <pubDate>Wed, 06 Nov 2024 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-io-announce/</guid>
      <description>
        
        
        &lt;p&gt;Want to stay ahead of the curve on critical gRPC announcements? We&amp;rsquo;ve got you
covered!&lt;/p&gt;
&lt;p&gt;Introducing &lt;a href=&#34;https://groups.google.com/g/grpc-io-announce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-io-announce&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, a
new mailing list dedicated to delivering essential updates directly to your
inbox. This high-signal channel cuts through the noise and focuses on what
matters most, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Security vulnerabilities and reliability issues&lt;/strong&gt;: Be the first to know
about security concerns and get timely updates on fixes and mitigations.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Major platform support changes&lt;/strong&gt;: Stay informed about changes in support
for different platforms.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Project and governance news&lt;/strong&gt;: Get the latest updates on major project
milestones and governance decisions.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note: Release announcements and feature launch announcements will stay in the
existing &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-io group&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;No more scouring through grpc-io groups or worrying about missing critical
information. Subscribe to &lt;strong&gt;grpc-io-announce&lt;/strong&gt; and get peace of mind knowing
you won&amp;rsquo;t miss critical information.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Join the group today: &lt;a href=&#34;https://groups.google.com/g/grpc-io-announce&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-io-announce group&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;For more information, please see &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/P6-grpc-io-announce.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;P6 grpc-io-announce&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re committed to keeping you informed and ensuring a smooth gRPC experience.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Configuring proxyless gRPC with Kubernetes Gateway API and OpenTelemetry metrics for Cloud Service Mesh now available in preview</title>
      <link>https://grpc.io/blog/proxyless-grpc/</link>
      <pubDate>Thu, 12 Sep 2024 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/proxyless-grpc/</guid>
      <description>
        
        
        &lt;p&gt;We are excited to announce that configuring proxyless gRPC with the Kubernetes Gateway API and OpenTelemetry metrics for Cloud Service Mesh are now available as preview features. This integration allows you to leverage the powerful capabilities of the Kubernetes Gateway API to manage traffic to your gRPC services within the Cloud Service Mesh environment, along with the added benefit of gRPC OpenTelemetry metrics for enhanced observability.&lt;/p&gt;

&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/BwFBYLa5mgY&#34; allowfullscreen title=&#34;Single Cluster Gateway for Mesh and gRPC Observability in Cloud Service Mesh&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;whats-new&#34;&gt;What&amp;rsquo;s new:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Kubernetes Gateway API Integration&lt;/strong&gt;: Now you can use the Kubernetes Gateway API to define and manage traffic routing for services running in your Cloud Service Mesh. This provides a more standardized and flexible approach to managing ingress and traffic management within your Kubernetes clusters.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gRPC OpenTelemetry Metrics for Cloud Service Mesh&lt;/strong&gt;: Gain deeper insights into your gRPC services with integrated OpenTelemetry metrics, providing valuable observability data for monitoring and troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;benefits&#34;&gt;Benefits:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Simplified traffic management&lt;/strong&gt;: The Kubernetes Gateway API provides a declarative way to manage traffic routing, making it easier to configure and manage ingress for your services.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Enhanced observability&lt;/strong&gt;: gRPC OpenTelemetry metrics for Cloud Service Mesh provide valuable insights into the performance and health of your gRPC services, aiding in monitoring and troubleshooting.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;get-started&#34;&gt;Get started:&lt;/h3&gt;
&lt;p&gt;To learn more about how to configure Cloud Service Mesh with the Kubernetes Gateway API and try out this new feature, check out our &lt;a href=&#34;https://cloud.google.com/service-mesh/docs/gateway/proxyless-grpc-mesh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation and tutorials&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. More information on OpenTelemetry Metrics for Cloud Service Mesh can be found in our &lt;a href=&#34;https://cloud.google.com/service-mesh/docs/service-routing/observability-proxyless-grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We are eager to hear your feedback on these new features. Please share your thoughts and experiences through our community channels.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPConf 2024 Schedule</title>
      <link>https://grpc.io/blog/grpconf-2024-schedule/</link>
      <pubDate>Wed, 03 Jul 2024 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpconf-2024-schedule/</guid>
      <description>
        
        
        &lt;p&gt;Attention gRPC community!&lt;/p&gt;
&lt;p&gt;Mark your calendars for &lt;strong&gt;August 27th, 2024&lt;/strong&gt;, as gRPConf returns to the Google Cloud Campus in Sunnyvale, California. The &lt;a href=&#34;https://events.linuxfoundation.org/grpconf/program/schedule&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;schedule&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is now live!&lt;/p&gt;
&lt;p&gt;This is your chance to dive deep into the world of gRPC, connect with fellow developers, and stay ahead of the curve in all things gRPC.&lt;/p&gt;
&lt;h3 id=&#34;why-attend&#34;&gt;Why Attend?&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Learn: Explore the latest gRPC advancements, best practices, and real-world use cases through a series of informative talks and workshops.&lt;/li&gt;
&lt;li&gt;Connect: Network with a vibrant community of gRPC experts, users, and open-source contributors.&lt;/li&gt;
&lt;li&gt;Share: Discuss your own gRPC experiences, challenges, and successes with peers who share your passion.&lt;/li&gt;
&lt;li&gt;Innovate: Gain inspiration and discover new ways to leverage gRPC in your own projects.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/grpconf/register/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Register Now!&lt;/strong&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Early bird registration is available until July 30th for $50. Keep an eye on the official gRPC website and social media channels for updates.&lt;/p&gt;
&lt;p&gt;We can&amp;rsquo;t wait to see you at gRPConf 2024!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Celebrate gRPC Day</title>
      <link>https://grpc.io/blog/grpc-day-2023/</link>
      <pubDate>Tue, 12 Mar 2024 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-day-2023/</guid>
      <description>
        
        
        &lt;p&gt;The gRPC core engineering team is excited to share a new video playlist that accelerates your getting started with gRPC and helps you better understand recently introduced innovations such as gRPC Microservices Observability in GCP (for the full announcement, see &lt;a href=&#34;https://cloud.google.com/blog/products/networking/introducing-grpc-observability-for-microservices&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;blog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://cloud.google.com/stackdriver/docs/solutions/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;codelab&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The materials are for any audience, including individuals starting their gRPC journey as well as established gRPC coders, and place the core technologies of gRPC at your fingertips.&lt;/p&gt;
&lt;p&gt;The video series includes the following clips:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=inaVnx84E2E&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=1&amp;amp;t=37s&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Day Primer: The State of gRPC | Neil Abogado&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=njC24ts24Pg&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC in 5 minutes | Eric Anderson &amp;amp; Ivy Zhuang&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cSGBbwvW1y4&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=3&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Getting Started with gRPC | Easwar Swaminathan &amp;amp; Arvind Bright&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=S4EW5_PhRQY&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Observability for Microservices with gRPC | Vindhya Ningegowda &amp;amp; Sanjay Pujare&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=WmF0X0frWH0&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=5&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Observability Visualization for gRPC Microservices in GCP | Vindhya Ningegowda&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=B8gfu5bs2Pw&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=6&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Leveling Up your Service Mesh with gRPC | Ivy Zhuang &amp;amp; Richard Belleville&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Z3X6kD_1SFo&amp;amp;list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&amp;amp;index=7&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Supporting xDS in the gRPC Client Architecture | Mark Roth&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Individuals new to gRPC should start with sessions #1-3, while seasoned gRPC developers can jump into the advanced topics covered by videos #4-7.&lt;/p&gt;
&lt;p&gt;Checkout the YouTube playlist &lt;a href=&#34;https://www.youtube.com/playlist?list=PLcTqM9n_dieOaX2BcrP0B1imr6Acyhn-G&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Day&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to start watching!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Can gRPC replace REST and WebSockets for Web Application Communication?</title>
      <link>https://grpc.io/blog/postman-grpcweb/</link>
      <pubDate>Mon, 04 Dec 2023 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/postman-grpcweb/</guid>
      <description>
        
        
        

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;


    Welcome to this guest blog entry from our friends at
&lt;a href=&#34;https://www.postman.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;!

&lt;/div&gt;

&lt;p&gt;In the rapidly evolving landscape of web development, efficiency and
performance often stand at the forefront of adoption of new technologies.
The work being done with the &lt;a href=&#34;https://github.com/grpc/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
library marks a pivotal shift in how developers can utilize the speed and
power of &lt;a href=&#34;https://grpc.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; into client-server communication in web
applications by replacing REST and some aspects of WebSockets. Let’s look at a
comparative analysis with traditional RESTful calls and WebSocket connections,
and offer practical code samples with gRPC-Web to draw comparisons in each approach.&lt;/p&gt;
&lt;h2 id=&#34;understanding-grpc-web-and-its-place-in-modern-web-development&#34;&gt;Understanding gRPC-Web and Its Place in Modern Web Development&lt;/h2&gt;
&lt;p&gt;The genesis of gRPC-Web lies in the quest for more responsive, low-latency web
applications. It extends the capabilities of gRPC – a high-performance,
open-source universal RPC framework – to the browser, enabling direct
communication with gRPC services normally designated to server-to-server
communication. gRPC is structured around a serialization format called &lt;a href=&#34;https://protobuf.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol
Buffers (Protobuf)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, which facilitates smaller payloads
and well-defined interface descriptions that streamline the development process.&lt;/p&gt;
&lt;p&gt;Before diving into the technicalities, let’s examine the potential shift that
gRPC-Web represents. Unlike the native gRPC protocol, which requires HTTP/2,
gRPC-Web relaxes this requirement, allowing it to support any HTTP/* protocols
available in a browser environment. In a WebSocket scenario, a persistent
connection is maintained for full-duplex communication, but WebSockets can
introduce complexity in managing various connection states. gRPC-Web offers a
compelling alternative with its server streaming capabilities, leading to a
more efficient real-time data flow. At present, gRPC-Web does not support
client-side streaming due to browser constraints.&lt;/p&gt;
&lt;h2 id=&#34;the-mechanics-of-grpc-web-how-it-works&#34;&gt;The Mechanics of gRPC-Web: How It Works&lt;/h2&gt;
&lt;p&gt;To integrate gRPC-Web into your web application, a specific architecture must be
adopted. At the heart of this architecture lies the &lt;a href=&#34;https://www.envoyproxy.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy
proxy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, which serves as a bridge between the web
application and the gRPC server (this is necessary to allow abstraction of
network protocols). Envoy translates the gRPC-Web calls into gRPC calls,
handling the HTTP/1.1 to HTTP/2 conversion, allowing browsers to enjoy the
benefits of gRPC.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s break down the steps involved in this communication model:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;The browser initiates a gRPC-Web client call.&lt;/li&gt;
&lt;li&gt;The Envoy proxy receives the call, which includes the Protobuf-defined
request.&lt;/li&gt;
&lt;li&gt;Envoy then translates this into an HTTP/2 gRPC call and forwards it to the
gRPC server.&lt;/li&gt;
&lt;li&gt;The gRPC server processes the request and returns the response to Envoy.&lt;/li&gt;
&lt;li&gt;Envoy converts the gRPC response back into gRPC-Web format and sends it to
the client.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Using this proxy system, gRPC-Web facilitates a robust client-server interaction
that is performant, and offers data clarity and precision thanks to the strong
data typing of Protobuf.&lt;/p&gt;
&lt;h2 id=&#34;the-theory-of-transitioning-from-rest-to-grpc-web&#34;&gt;The Theory of Transitioning from REST to gRPC-Web&lt;/h2&gt;
&lt;p&gt;For developers accustomed to REST, the leap to gRPC-Web may seem challenging.
The transition can be smooth with a proper understanding of the involved
components and a step-by-step approach.&lt;/p&gt;
&lt;p&gt;Consider a typical RESTful fetch call:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;fetch(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;https://api.example.com/data&amp;#39;&lt;/span&gt;, {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    method&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;GET&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    headers&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Accept&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;})
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(response =&amp;gt; response.json())
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.then(data =&amp;gt; console.log(data))
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;catch&lt;/span&gt;(error =&amp;gt; console.error(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;, error));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above code retrieves JSON data from a RESTful API service. Notice the use of
the fetch API, HTTP method, and content type headers. The response is processed
as a JSON object, and error handling is baked into the promise chain. What is
not indicated in this code is the data validation that is needed to ensure the
data you received in the payload matches an expected schema, and that the data
received in the schema is properly set in the data type you require, and the
user experience of handling erroneous data.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s reimagine this with gRPC-Web:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; { ExampleRequest, ExampleResponse } &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./generated/example_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; { ExampleServiceClient } &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./generated/example_grpc_web_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ExampleServiceClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;https://api.example.com&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ExampleRequest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;client.getExampleData(request, {}, (err, response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (err) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.error(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Error:&amp;#39;&lt;/span&gt;, err);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        console.log(response.toObject());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this gRPC-Web example, we begin by importing the necessary Protobuf
definitions and client stub. A client instance is created, specifying the
service URL. We construct a request object, and the getExampleData method is
called on the client, passing the request and a callback function for handling
the response or error.&lt;/p&gt;
&lt;p&gt;Notice the stark difference in approach: gRPC-Web calls are strongly-typed, and
serialization/deserialization is handled by the library, not manually by the
developer. This type safety and automation can drastically reduce the potential
for human error and streamline the development process. If you receive an
object, it has already been fully validated.&lt;/p&gt;
&lt;h2 id=&#34;advantages-of-grpc-web-over-rest&#34;&gt;Advantages of gRPC-Web Over REST&lt;/h2&gt;
&lt;p&gt;While REST has been the cornerstone of web APIs for years, its simplicity can
sometimes be a limitation when it comes to complex web applications. While
gRPC-Web can &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;work with any HTTP/*
protocols&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
supported in the browser, gRPC-Web leverages many HTTP/2 features, bringing a
host of improvements. Here are some advantages of HTTP/2 and gRPC-Web:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;It works with existing services:&lt;/strong&gt; There’s nothing new to build other than the
Envoy proxy, so implementing gRPC-Web will allow you to access any existing
gRPC service. This can be an advantage for applications, including mobile
apps, utilizing JavaScript libraries.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Type Safety:&lt;/strong&gt; With gRPC-Web, both requests and responses are strongly typed
based on the Protobuf definitions. This contract between the client and
server is explicit, reducing the likelihood of miscommunication and bugs.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Efficient Serialization:&lt;/strong&gt; Protobuf, the serialization format used by gRPC, is
more efficient than JSON or XML, leading to quicker serialization and
smaller message sizes. This can be particularly beneficial for performance
and can lead to cost savings in terms of bandwidth. HTTP/1.1 allows data to
be sent in text mode or binary mode, but not both. HTTP/2 is binary-only and
encoding/decoding binary into text is less error-prone than
encoding/decoding a binary file into text to send a mixed payload over REST.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Clear API Contracts:&lt;/strong&gt; Using Protobuf for service definition creates a clear,
language-agnostic API contract. This can be used to generate client and
server code in multiple languages, providing a seamless experience for
developers.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;setting-up-a-grpc-web-environment&#34;&gt;Setting Up a gRPC-Web Environment&lt;/h2&gt;
&lt;p&gt;Getting started with gRPC-Web will require defining services and message
payloads using Protobuf, setting up the gRPC backend service (or &lt;a href=&#34;https://blog.postman.com/postman-mocking-magic-for-grpcs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a mock server
for the time being&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;),
and configuring an Envoy proxy to translate between gRPC-Web and gRPC.&lt;/p&gt;
&lt;p&gt;First, you define your service in a .proto file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;example&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; ExampleService {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; GetExampleData(ExampleRequest) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (ExampleResponse);&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ExampleRequest&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; query &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;ExampleResponse&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;code&gt;.proto&lt;/code&gt; file defines a simple service with a single RPC method,
&lt;code&gt;GetExampleData&lt;/code&gt;, along with the request and response message formats. Since the
operation sends a single &lt;code&gt;ExampleRequest&lt;/code&gt; message in the request, and expects to
receive a single &lt;code&gt;ExampleResponse&lt;/code&gt; message in the response, this unary RPC call
mimics a RESTful request.&lt;/p&gt;
&lt;p&gt;Next, generate the client stub code for your service using the protoc
command-line tool with the appropriate gRPC-Web plugin. (&lt;a href=&#34;https://blog.postman.com/postman-mocking-magic-for-grpcs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here is an
example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from the
gRPC-Web quickstart documentation). This process will create the JavaScript
client files you&amp;rsquo;ll need to make gRPC-Web calls from the browser.&lt;/p&gt;
&lt;p&gt;After your gRPC server is implemented in the language of your choice, you&amp;rsquo;ll
configure an Envoy proxy. &lt;a href=&#34;https://blog.postman.com/postman-mocking-magic-for-grpcs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Here is another
example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from the
gRPC-Web quickstart documentation.&lt;/p&gt;
&lt;p&gt;Here is some YAML syntax of an Envoy configuration which enables gRPC-Web as
part of the larger configuration linked above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;http_filters&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;envoy.filters.http.grpc_web&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;- &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;envoy.filters.http.router&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With these elements in place, you can start making gRPC-Web calls from your web
application.&lt;/p&gt;
&lt;h2 id=&#34;defining-service-methods-with-protobuf&#34;&gt;Defining Service Methods with Protobuf&lt;/h2&gt;
&lt;p&gt;When defining your service methods, Protobuf acts as the single source of truth
by defining the message structure for requests and responses. This strict schema
allows for automatic client and server code generation in multiple languages.
For JavaScript in particular, this code generation streamlines the call process
for the browser client.&lt;/p&gt;
&lt;p&gt;Using the example .proto file above, the generated JavaScript client code would
use these definitions to ensure that only the correct data types are sent and
received. This process handles much of the manual data validation and parsing
that can be error-prone with RESTful services.&lt;/p&gt;
&lt;h2 id=&#34;replacing-a-typical-websocket-connection-with-grpc-web&#34;&gt;Replacing a Typical WebSocket Connection with gRPC-Web&lt;/h2&gt;
&lt;p&gt;WebSockets provide a full-duplex communication channel over a single long-lived
connection. In scenarios where gRPC-Web cannot fully replace WebSockets due to
its &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/doc/streaming-roadmap.md#client-streaming-and-half-duplex-streaming&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lack of client streaming
capabilities&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
it can still be used for efficient server-to-client streaming.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a typical WebSocket implementation example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; socket &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; WebSocket(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;ws://example.com/data&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socket.onmessage &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(event) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; receivedData &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; JSON.parse(event.data);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(receivedData);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;socket.onerror &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(error) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.error(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;WebSocket Error:&amp;#39;&lt;/span&gt;, error);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The WebSocket API is straightforward, but managing the state and lifecycle of
the connection can become complex.&lt;/p&gt;
&lt;p&gt;Now, let&amp;rsquo;s explore how server-side streaming would look with gRPC-Web:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; { Empty } &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./generated/common_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; { DataServiceClient } &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./generated/data_grpc_web_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; DataServiceClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;https://api.example.com&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Empty();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; stream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; client.dataStream(request, {});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stream.on(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;, (response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(response.toObject());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stream.on(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;error&amp;#39;&lt;/span&gt;, (err) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.error(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Stream Error:&amp;#39;&lt;/span&gt;, err);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stream.on(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;, () =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  console.log(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Stream ended.&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While there is more code involved to replace WebSockets with gRPC-Web, you can
set up a server-side streaming call where the server can continuously send
messages to the client. The client uses event listeners to handle incoming
messages, errors, and the end of the stream. It&amp;rsquo;s a different paradigm than
WebSockets but one that can be more efficient and easier to manage in the
context of supported use cases.&lt;/p&gt;
&lt;p&gt;Many chat applications over WebSockets utilize single client sends and server
streamed events, which gRPC-Web can replace. Even in scenarios where a
multiplayer game was developed, an RPC call of “MoveCharacters” could take a
single message from the browser from where you move your character, and stream
back all of the movements of other players or computer-controlled characters.&lt;/p&gt;
&lt;h2 id=&#34;is-it-time-to-replace-rest-and-websockets&#34;&gt;Is It Time to Replace REST and WebSockets?&lt;/h2&gt;
&lt;p&gt;This article has begun to scratch the surface of replacing REST and WebSockets
with gRPC-Web, focusing on the reasons for doing so and how to get started with
practical code samples. More work would be needed to fully incorporate error
handling, and to show performance benchmarking, which are beyond the scope of
this document.&lt;/p&gt;
&lt;p&gt;Many technical aspects of gRPC and gRPC-Web, using Envoy, can replace REST and
WebSockets in modern web application development. While there are &lt;a href=&#34;https://grpc.io/showcase/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;few
public-facing gRPC APIs&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, it’s a matter of time
before we see more companies adopting the performant nature of HTTP/2 and HTTP/3
based APIs, and consider alternative emerging technologies for web applications.&lt;/p&gt;
&lt;h2 id=&#34;grpc-support-in-postman&#34;&gt;gRPC Support in Postman&lt;/h2&gt;
&lt;p&gt;If you work with APIs, you probably use Postman. Did you know that &lt;a href=&#34;https://blog.postman.com/postman-now-supports-grpc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman
supports gRPC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;? Our &lt;a href=&#34;https://blog.postman.com/introducing-the-postman-vs-code-extension/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VS
Code extension supports gRPC
requests&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
too, while you’re building your application. We had a great time attending gRPC
Conf this year and meeting with the community. Keep an eye on our blog for
&lt;a href=&#34;https://blog.postman.com/?s=grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;upcoming updates and articles about gRPC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. If
you’d like a little history on gRPC, Protobuf, and how they’re used within
Postman, you can also check out our &lt;a href=&#34;https://academy.postman.com/grpc-and-postman&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman Academy
course&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Technical reviews by &lt;a href=&#34;https://twitter.com/kevinswiber&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kevin Swiber&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (Postman),
&lt;a href=&#34;https://www.linkedin.com/in/eryux/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Eryu Xia&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (Google)&lt;/em&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Highlights in gRPConf 2023:Customer Showcase, Developer Engagement, Birds of Feathers Discussions and more.</title>
      <link>https://grpc.io/blog/grpconf-2023-videos/</link>
      <pubDate>Fri, 27 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpconf-2023-videos/</guid>
      <description>
        
        
        &lt;p&gt;We loved hosting gRPConf 2023 last month in Sunnyvale, California. Thank you to
hundreds of developers from Apple, Cisco, Intel, LinkedIn, Netflix, Salesforce,
to name a few, who joined our special event. We were overwhelmed by the
various topics and advanced use cases around the gRPC ecosystem. If you missed
the opportunity to join in person, here are the video recordings that highlight
the presentations during the day:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/oXv5yzFXgo0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keynote gRPC Opening Keynote Abhishek Kumar, Google Arunkumar Jayaraman, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/1PRlQ95T8LY&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keynote Looking at the Past to Understand our Future Jorge Castro, CNCF&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/E3ez34fdC0k&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keynote Overview of gRPC Ivy Zhuang, Software Engineer, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/ywrkBqq_LLA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How Netflix Makes gRPC Easy to Serve, Consume, and Operate Benjamin Fedorka, Netflix&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/U2fgFAuDbGk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deep Diving Into gRPC Security A Case Study on API Security Dana White Austin Pearigen&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/TkAn5IYrHyQ&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Meets Jakarta EE Ron Sigal, Red Hat&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/8HbvEpeu1Lo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Introducing Protobuf Editions Matt Kulukundis Mike Kruskal, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/8rTIS7PeWW4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building and Testing a gRPC API from Scratch Unleash the Potential with Postman W Ian Douglas&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/FbdP2Glh0dw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;What&amp;rsquo;s New in gRPC Security for 2023 Audit Logging and CRL Andrey Ermolov Gregory Cooke, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/Nwby61mIEHA&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Keynote What&amp;rsquo;s New in gRPC Gina Yeh, Google&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/VCq4fsHfFxc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Security Evolution of gRPC Services in the Mesh Amim Knabben, VMware&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/_hvdAqid0r0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Integrating gRPC with the Homa Transport Protocol John Ousterhout, Stanford University&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/e2K5XdIIduE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Load Testing gRPC Services in Node js Kenny Nguyen, gRPSeek&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://youtu.be/OHU81_TeiLI&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Our Journey Connecting Millions of Containers with gRPC Antoine Tollenaere Sergey Matyukevich&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image1.jpg&#34; alt=&#34;Conference Gate&#34; id=&#34;grpc-conf-2023-image1.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image1.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image1.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image1.jpg&#34; alt=&#34;Conference Gate&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image2.jpg&#34; alt=&#34;Abhishek Opening Keynote&#34; id=&#34;grpc-conf-2023-image2.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image2.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image2.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image2.jpg&#34; alt=&#34;Abhishek Opening Keynote&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image6.jpg&#34; alt=&#34;Ivy Keynote Talk: gRPC Overview&#34; id=&#34;grpc-conf-2023-image6.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image6.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image6.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image6.jpg&#34; alt=&#34;Ivy Keynote Talk: gRPC Overview&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image5.jpg&#34; alt=&#34;Gina Keynote Talk: What&amp;amp;rsquo;s new in gRPC&#34; id=&#34;grpc-conf-2023-image5.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image5.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image5.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image5.jpg&#34; alt=&#34;Gina Keynote Talk: What&amp;amp;rsquo;s new in gRPC&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image3.jpg&#34; alt=&#34;gRPConf 2023 Audiences&#34; id=&#34;grpc-conf-2023-image3.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image3.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image3.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image3.jpg&#34; alt=&#34;gRPConf 2023 Audiences&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-conf-2023-image4.jpg&#34; alt=&#34;gRPConf 2023 Stanford Professor John Ousterhout asks questions&#34; id=&#34;grpc-conf-2023-image4.jpg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-conf-2023-image4.jpg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-conf-2023-image4.jpg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-conf-2023-image4.jpg&#34; alt=&#34;gRPConf 2023 Stanford Professor John Ousterhout asks questions&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We received a wealth of feedbacks from everyone throughout the day which has
helped us shape our future roadmap. Stay tuned to gRPC on many platforms for new
releases, announcements and events:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@grpcio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC YouTube Channel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.meetup.com/grpcio/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Meetup Group&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Website&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/blog/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Blog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Group Forum&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/grpcio&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Twitter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Announcing gRPConf 2023!</title>
      <link>https://grpc.io/blog/grpconf-2023-announcement/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpconf-2023-announcement/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;gRPConf 2023 is happening!&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Register now for $50&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; | &lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/program/cfp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Submit a Talk&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Join us at the Google Cloud Campus on September 20, 2023 for a full day of talks, demos, case studies, and code labs. Experts will discuss real-world implementations of gRPC, best practices for developers, and deep dives into specific topics. This is a must-attend event for anyone using gRPC in their applications today, and those considering gRPC for their enterprise microservices.&lt;/p&gt;
&lt;p&gt;There will be ample time to meet project leads and key members of the gRPC ecosystem, network with peers, and ask questions. This will be a great opportunity for us to hear from members of the larger gRPC community and gain valuable feedback on the entire gRPC ecosystem.&lt;/p&gt;
&lt;p&gt;If you’re interested in speaking at gRPConf, please &lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/program/cfp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;submit a proposal&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. The deadline is July 9, 2023. Spots are still available and topics might include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC in-production&lt;/li&gt;
&lt;li&gt;User Stories + Case Studies&lt;/li&gt;
&lt;li&gt;Implementation&lt;/li&gt;
&lt;li&gt;Ecosystem + Tooling&lt;/li&gt;
&lt;li&gt;Codelabs&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Speakers who are chosen will be notified by August 1, 2023, and a full schedule announcement will follow shortly after.&lt;/p&gt;
&lt;p&gt;Early bird registration is now open and is only $50. To register or find more information about the event, check out the event page &lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. For any other questions please contact us at &lt;a href=&#34;mailto:grpconf@google.com&#34;&gt;grpconf@google.com&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;We hope to see you all there!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPConf 2023 Schedule</title>
      <link>https://grpc.io/blog/grpconf-2023-schedule/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpconf-2023-schedule/</guid>
      <description>
        
        
        &lt;p&gt;Hello gRPC Community!&lt;/p&gt;
&lt;p&gt;We are excited to announce that the gRPConf 2023 schedule is now live. We have a schedule with 19 total sessions (5 keynote, 14 breakout) led by a strong group of experts that are using gRPC across a variety of applications and companies. Their experiences and expertise will provide huge value for all attendees whether you are already using gRPC or are still considering it. There will be something for everyone as the talks will span topics such as tooling, implementations, production use, and user stories.&lt;/p&gt;
&lt;p&gt;In addition to our lineup of speakers, this year’s conference is designed to provide plenty of time to hear from the community as well. We’ll be providing breakfast, lunch, and an evening reception to give everyone the chance to network, meet project leads, and ask questions. The feedback gathered from the larger gRPC community is incredibly valuable, so we’ve also built in time for “Birds of a Feather” discussions where we can have more targeted discussions moderated by gRPC team leaders.&lt;/p&gt;
&lt;p&gt;You can view the entire schedule &lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/program/schedule/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Early Bird Registration is also still open for $50 until September 6th. If you’re interested in joining us please &lt;a href=&#34;https://events.linuxfoundation.org/grpc-conf/register/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;register now&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We’ll see you on September 20th!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPC performance benchmarks on GKE</title>
      <link>https://grpc.io/blog/performance-benchmarks-gke/</link>
      <pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/performance-benchmarks-gke/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://grpc.io/docs/guides/benchmarking&#34;&gt;gRPC performance benchmarks&lt;/a&gt; have now been transitioned to run on
GKE, with similar results but much increased flexibility.&lt;/p&gt;
&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;gRPC performance testing requires a test driver and workers (one or more clients
and a server), as described in &lt;a href=&#34;https://grpc.io/docs/guides/benchmarking&#34;&gt;gRPC performance benchmarks&lt;/a&gt;. Each
test may have a different configuration, or &lt;em&gt;scenario&lt;/em&gt;, that is passed to the
driver and specified as a JSON file. Previously, the driver was run by the
continuous integration process, and the workers were run on long-lived GCE VMs.
This gave rise to several limitations:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Tests ran sequentially and were difficult to parallelize, since they ran on
(the same) fixed VMs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The state of the VMs was not guaranteed to be the same at the start of each
test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Running manual experiments required configuring new VMs, which was a manual
process, or reusing existing VMs, with the risks of collision with other
users and of having VMs in an unknown state.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;benchmarking-on-kubernetes&#34;&gt;Benchmarking on Kubernetes&lt;/h2&gt;
&lt;p&gt;The core of the current framework is a &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/cmd/controller/main.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom controller&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for managing
Kubernetes resources of kind &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/config/crd/bases/e2etest.grpc.io_loadtests.yaml&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LoadTest&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. This controller must be
deployed to a Kubernetes cluster before load tests can be run on it. The
controller is implemented with &lt;a href=&#34;https://kubebuilder.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kubebuilder&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. The code for the controller is
stored in the &lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Test Infra&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository. For further documentation on
individual LoadTest fields, see the &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/api/v1/loadtest_types.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LoadTest
implementation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;LoadTest configurations specify driver, client and server pods to be created for
the test. Once the configuration is applied to the cluster (for instance, with
&lt;code&gt;kubectl apply -f&lt;/code&gt;), the controller will create the pods and the test will run.
If multiple configurations are applied to the cluster, the controller will
create pods as long as there are resources available, allowing tests to run in
parallel.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/config/samples/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Examples&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; include basic configurations that can be applied directly,
and templates that require additional steps and parameter substitution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Basic configurations rely on &lt;strong&gt;clone&lt;/strong&gt;, &lt;strong&gt;build&lt;/strong&gt; and &lt;strong&gt;runtime&lt;/strong&gt; worker
images that are bundled with each release of the controller. The clone and
build images are used to build gRPC binaries that are passed to the runtime
container. These configurations are suitable as examples and for one-off
testing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Template configurations rely on worker images that are built before starting
the tests. These &lt;strong&gt;prebuilt images&lt;/strong&gt; include the gRPC binary, eliminating the
need to clone and build before each test. Template substitution is used to
point to the location of the worker images. These configurations are suitable
for running a batch of tests on the same gRPC version, or for running the same
test repeatedly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to the controller, the &lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Test Infra&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository contains a
set of &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/tools/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tools&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, including a test runner and tools to build and delete prebuilt
worker images, as well as a &lt;a href=&#34;#dashboard&#34;&gt;dashboard&lt;/a&gt; implementation.&lt;/p&gt;
&lt;p&gt;The tools related to prebuilt workers use &lt;code&gt;gcloud&lt;/code&gt; internally and are dependent
on GKE. Other than that, all components of the framework are built on Kubernetes
itself and independent of GKE. That is, it should be possible to deploy the
controller and run tests on a custom Kubernetes cluster or on another cloud
provider&amp;rsquo;s Kubernetes offering.&lt;/p&gt;
&lt;h2 id=&#34;cluster-setup&#34;&gt;Cluster setup&lt;/h2&gt;
&lt;p&gt;The cluster running benchmark jobs must be configured with node pools
dimensioned for the number of simultaneous tests that it should support. The
controller uses &lt;code&gt;pool&lt;/code&gt; as a node selector for the various pod types. Worker pods
have mutual anti-affinity, so one node is required per pod.&lt;/p&gt;
&lt;p&gt;For example, the node pools that are used in our continuous integration setup
are configured as follows:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Pool name&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Node count&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Machine type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Kubernetes labels&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;system&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e2-standard-8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default-system-pool:true, pool:system&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;drivers-ci&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e2-standard-2&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pool:drivers-ci&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workers-c2-8core-ci&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c2-standard-8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pool:workers-c2-8core-ci&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workers-c2-30core-ci&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;c2-standard-30&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pool:workers-c2-30core-ci&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Since each scenario in our tests requires one driver and two workers, this
configuration supports four simultaneous tests on 8-core machines and four on
30-core machines. Drivers require few resources, and do not have mutual
anti-affinity. We find it convenient to schedule them on two-core machines with
a node count set to the required number of drivers, rather than on a larger
shared machine, because that allows the driver pool to be resized together with
the worker pools. The controller itself is scheduled in the &lt;code&gt;system&lt;/code&gt; pool.&lt;/p&gt;
&lt;p&gt;In addition to the pools used in continuous integration, our cluster contains
additional node pools that can be used for ad hoc testing:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Pool name&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;Node count&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Machine type&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Kubernetes labels&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;drivers&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e2-standard-8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default-driver-pool:true, pool:drivers&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workers-8core&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e2-standard-8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;default-worker-pool:true, pool:workers-8core&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;workers-32core&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;e2-standard-32&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;pool:workers-32core&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Some pools are labeled with &lt;code&gt;default-*-pool&lt;/code&gt; labels. These labels specify which
pool to use if it is not specified in the LoadTest configuration. With the
configuration above, these tests (for instance, the tests specified in the
&lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/config/samples/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;examples&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;) will use the &lt;code&gt;drivers&lt;/code&gt; and &lt;code&gt;workers-8core&lt;/code&gt; pools, and not
interfere with continuous integration jobs. The default labels are defined as
part of the controller build: if they are not set, the controller will only run
tests where the &lt;code&gt;pool&lt;/code&gt; labels are specified explicitly.&lt;/p&gt;
&lt;h2 id=&#34;controller-deployment&#34;&gt;Controller deployment&lt;/h2&gt;
&lt;p&gt;The steps for building and deploying a controller are described in the
&lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/doc/deployment.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;deployment documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;continuous-integration&#34;&gt;Continuous integration&lt;/h2&gt;
&lt;p&gt;Our continuous integration setup is described in the &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/tools/run_tests/performance/README.md#grpc-oss-benchmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC OSS benchmarks
README&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; in the &lt;a href=&#34;https://github.com/grpc/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Core&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository. The main continuous integration job
uses the script &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/tools/internal_ci/linux/grpc_e2e_performance_gke.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc_e2e_performance_gke.sh&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to generate the data presented
on the dashboard linked to the &lt;a href=&#34;https://grpc.io/docs/guides/benchmarking&#34;&gt;gRPC performance benchmarks&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Each continuous integration run has three phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Generate test configurations.&lt;/li&gt;
&lt;li&gt;Build and push worker images.&lt;/li&gt;
&lt;li&gt;Run the tests.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Each continuous integration run executes 122 tests using the 8-core worker pool,
and 98 test using the 30-core worker pool. Each test runs one test scenario.
Tests using C++, C#, Java and Python workers run on both pools. Tests using
Node.js, PHP and Ruby workers run only on the 8-core pool.
&lt;a href=&#34;#config-generation&#34;&gt;Config generation&lt;/a&gt; for all these combinations takes
negligible time (~1s).&lt;/p&gt;
&lt;p&gt;The configurations used in continuous integration require worker images that
include the gRPC binaries to be tested. These images depend only on the worker&amp;rsquo;s
language, so these &lt;a href=&#34;#prebuilt-images&#34;&gt;prebuilt images&lt;/a&gt; are built in advance and
pushed to an image repository. This process takes approximately 20 minutes.&lt;/p&gt;
&lt;p&gt;A &lt;a href=&#34;#test-runner&#34;&gt;test runner&lt;/a&gt; manages the rate at which tests are applied to the
cluster, collects test results and logs, and deletes tests once they complete
successfully. Two tests at a time are allowed to run on each pool. This phase
takes approximately 50 minutes to complete.&lt;/p&gt;
&lt;p&gt;Each test scenario is configured to take 30s to run, plus a 5s warm-up period
(15s for Java). This places a lower bound on the time needed to run each test.
The observed run time of the 122 tests in the 8-core pool (16 of them in Java),
running two tests at a time, implies that the overhead introduced by pod
creation and deletion is modest, at ~12.8s per test.&lt;/p&gt;
&lt;h3 id=&#34;config-generation&#34;&gt;Config generation&lt;/h3&gt;
&lt;p&gt;Since we are running hundreds of tests that mostly share the same components
(driver and workers for the various languages), it becomes necessary to generate
configurations that includes repetitive driver and worker configurations and
differ only in the scenario being tested. In addition, each configuration must
have a unique name, since that is a requirement for resources applied to a
Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;We handle these issues by &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/tools/run_tests/performance/README.md#generating-load-test-configurations&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;generating load test configurations&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; with a tool.
The tool is stored in the &lt;a href=&#34;https://github.com/grpc/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Core&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository, where test scenarios are also
defined.&lt;/p&gt;
&lt;h3 id=&#34;prebuilt-images&#34;&gt;Prebuilt images&lt;/h3&gt;
&lt;p&gt;The configurations generated for continuous integration use a set of prebuilt
images. These images are built and pushed to an image repository before running
tests. The images are deleted at the end of each test run.&lt;/p&gt;
&lt;p&gt;For details on the tools used to prepare and delete images, see &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/tools/README.md#using-prebuilt-images-with-grpc-oss-benchmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using prebuilt
images with gRPC OSS benchmarks&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;test-runner&#34;&gt;Test runner&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/grpc/test-infra/blob/master/tools/README.md#test-runner&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test runner&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; takes the test configurations generated previously, applies
each configuration to the cluster, polls each LoadTest resource for completion,
collects artifacts such as results and pod logs, and (optionally) deletes
resources once each test completes successfully.&lt;/p&gt;
&lt;p&gt;The test runner maintains separate &lt;em&gt;queues&lt;/em&gt; for tests that require the same
resources on the cluster (e.g. 8-core or 30-core worker nodes). Tests
configurations belonging to the same queue are not applied ot the cluster at
once, but according to a &lt;em&gt;concurrency level&lt;/em&gt; set for each queue. Our continuous
integration tests run in two queues (corresponding to 8-core and 30-core worker
nodes). The concurrency level of each queue is set to two.&lt;/p&gt;
&lt;p&gt;Once a configuration is applied to the cluster, the controller creates client,
driver and server pods to run the test, monitors test execution, and updates the
status of the LoadTest resource.&lt;/p&gt;
&lt;p&gt;The design of the test runner can be explained as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The use of the test runner allows the continuous integration job to wait for
all tests to complete, collect tests artifacts, and prepare a report with
results.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of separate queues (indicated by annotations in each test
configuration) allows tests that do not require the same cluster resources to
be managed independently of each other.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The use of limited concurrency levels reduces the number of tests applied to
the cluster at a time. This has several benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The load on the test runner is reduced, since there are fewer LoadTest
resources on the cluster at a time, and the runner polls these resources
periodically for completion. The polling interval in our continuous
integration is set to 5s.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The load on the controller is reduced, since there are fewer LoadTest
resources at a time for it to control.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Each test can have a shorter timeout period, since the time takes for the
controller to start each test is more predictable. Timeouts are necessary
to account for error cases where client or server pods hang and prevent
the test from completing. These cases are rare but can accumulate and
consume cluster resources, preventing other tests from running. Tests in
our continuous integration have a timeout of 15 minutes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The concurrency level can be set lower than the capacity of the cluster,
allowing a user to run a batch of tests without preventing other users
from running tests simultaneously.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The option of deleting each test once it completes successfully (and after
results and logs are collected) provides better control of the lifecycle of
each test.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The default behavior of the controller is to keep a LoadTest resource and
associated pods on the cluster until it reaches a set TTL, and then delete
it. Our continuous integration specifies a TTL of 24h for each test.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pods belonging to a completed LoadTest are in terminated state, and so
consume no resources on the cluster. However, terminated pods can be
garbage-collected at any time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we let pods belonging to all completed tests stay in our continuous
integration cluster, we find that they are garbage-collected within one
hour.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If we delete LoadTest resources for tests that complete successfully, the
associated pods are also deleted. In this case, the pods belonging to
&lt;em&gt;unsuccessful&lt;/em&gt; tests, which are few in number and may be useful for
debugging, stay on the cluster until the 24h TTL is reached.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h3&gt;
&lt;p&gt;Test results from continuous integration are saved to &lt;a href=&#34;https://cloud.google.com/bigquery&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BigQuery&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. The
data stored in BigQuery is then replicated to a Postgres database for
visualization on a dashboard.&lt;/p&gt;
&lt;p&gt;The code for the dashboard, as well as the configuration of the main continuous
integration dashboard, are stored in the &lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Test Infra&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository.
This brings the following benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The main dashboard is maintained by updating the stored configuration,
instead of updating it directly in the UI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Users can deploy their own dashboard, using their own configuration.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;This contrasts with the dashboard for the previous benchmarks, built using
Perfkit Explorer, which was maintained by updating it directly in the UI, and
could not be easily replicated by users.&lt;/p&gt;
&lt;p&gt;For details, see &lt;a href=&#34;https://github.com/grpc/test-infra/tree/master/dashboard/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dashboard implementation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://grafana-dot-grpc-testing.appspot.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/performance-benchmarks-gke/dashboard.png&#34; alt=&#34;Dashboard snapshot&#34; id=&#34;dashboard&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-dashboard&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-dashboard&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/performance-benchmarks-gke/dashboard.png&#34; alt=&#34;Dashboard snapshot&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;span class=&#34;hk-no-external-icon&#34;&gt;&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;The following observations can be made on the results and user experience of the
gRPC benchmarking on GKE:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Performance metrics (latency, QPS, etc.) produce the same or better results
as the old benchmarks on GCE.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The overhead of pod creation and deletion for each test in GKE is small (less
than 15s) in our benchmarking cluster.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Test images are dockerized and started again for each test, resulting in
several benefits:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Results are more consistent.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Runtime errors are rare.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;System is split into well-defined components, resulting in simpler
upgrades.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Tests can be easily parallelized, resulting in faster execution times.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Experiments are easier to perform.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Examples of best practices and insights derived from experimentation:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use &lt;code&gt;c2&lt;/code&gt; instances for clients and servers (instance types matter a lot for
the observed latency and its variance and also for the measured throughput).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GKE pod-to-pod networking only has a very small overhead over raw GCE
networking. You can get raw GCE networking performance by setting
&lt;code&gt;hostnetworking:true&lt;/code&gt; for the benchmark pods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For Java under Docker, the JVM may not be able to detect the number of
available processors automatically. This can lead to very pessimistic
results, since gRPC uses the detected number of processors for sizing thread
pools for processing events. A workaround is to set the number of processors
explicitly. This workaround is implemented
&lt;a href=&#34;https://github.com/grpc/test-infra/pull/231&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;running-your-own&#34;&gt;Running your own&lt;/h2&gt;
&lt;p&gt;The code in the &lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Test Infra&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository allows any user to create a
cluster, deploy a controller, run gRPC benchmarks, and display results on their
own dashboards. If you are interested in performance, and run your own
benchmarks, &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;let us know!&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Running gRPC and Protobuf on ARM64 (on Linux)</title>
      <link>https://grpc.io/blog/grpc-on-arm64/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-on-arm64/</guid>
      <description>
        
        
        &lt;p&gt;ARM processors have recently been gaining importance in many areas of compute, including those that were traditionally considered to be an x86_64-only domain. Thanks to the momentum around the ARM ecosystem, we can expect adoption of ARM platforms to grow significantly. The same is true for providing software that supports ARM-based platforms.&lt;/p&gt;
&lt;p&gt;Since the main purpose of gRPC and protocol buffers is to interconnect distributed systems, their role in supporting ARM compute is especially important. With the emergence of ARM Cloud computing, we expect many systems will actually be hybrid compositions of x86 and ARM servers, mixing and matching the qualities of each ecosystem as needed. gRPC and protocol buffers are the ideal building blocks that can enable users to build systems that span multiple architectures seamlessly.&lt;/p&gt;
&lt;p&gt;To meet the very high demand from gRPC users to support ARM, the gRPC team has decided to support selected ARM-based platforms officially and fully. Some time ago, we started an effort to test everything and fix any problems we encounter. &lt;strong&gt;Today, we are happy to announce that gRPC and protocol buffers implementations in C++, C#, Go, Java, Node, PHP, Python and Ruby are ready for production workloads for ARM64 Linux&lt;/strong&gt; (see more details below).&lt;/p&gt;
&lt;p&gt;The current state of things is best described by a list of general areas we completed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Bugfixes/improvements:&lt;/strong&gt; We put a number of fixes in place to make sure gRPC and protobuf work reliably on ARM64 Linux.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Package &amp;amp; Distribution:&lt;/strong&gt; For the languages that provide binary architecture-specific packages, we added ARM64 Linux packages, and we started publishing them on every release as part of our standard release process. Having ready-to-use binary packages greatly improves the developer experience. For languages that don&amp;rsquo;t ship binary packages, we tested that the build works as expected and that one can install gRPC and protobuf on ARM64 Linux without problems.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Continuous Testing:&lt;/strong&gt; We invested significant resources setting up continuous testing ensuring that gRPC and protobuf are fully tested and prevent any future regressions. Testing large projects with many tests and support for multiple languages was definitely a challenge, especially since the open source ecosystem for testing on ARM architecture is still in its infancy, but we successfully tested gRPC and protobuf with a combination of cross-compilation, emulated tests and running tests on real hardware.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;overview-of-grpc-and-protobuf-support-on-arm64-linux&#34;&gt;Overview of gRPC and Protobuf support on ARM64 Linux&lt;/h2&gt;
&lt;p&gt;In the following table you can see the detailed status broken down by language. Each entry summarizes the support level for both gRPC and Protobuf on ARM64 Linux.&lt;/p&gt;
&lt;table&gt;
&lt;tr&gt;
  &lt;td style=&#34;white-space: nowrap&#34;&gt;Language&lt;/td&gt;
  &lt;td style=&#34;white-space: nowrap&#34;&gt;continuously tested&lt;/td&gt;
  &lt;td&gt;distribution/packages&lt;/td&gt;
  &lt;td&gt;additional info&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;C++&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Build from source using cmake or bazel (same approach as on x86_64)&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;C#&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Grpc.Core nuget packages now have aarch64 Linux support (starting from &lt;code&gt;v2.38.1&lt;/code&gt;)&lt;/td&gt;
  &lt;td&gt;Grpc.Tools nuget package has now support for codegen on aarch64 Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Go&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️ &lt;sup&gt;1&lt;/sup&gt;&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Use the standard way of installing libraries in golang (same experience as on x86_64)&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Java&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Maven artifacts published with each release work well on aarch64 Linux&lt;/td&gt;
  &lt;td&gt;aarch64 protoc and grpc-java protoc plugin are published with each release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td  style=&#34;white-space: nowrap&#34;&gt;Node/Javascript&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Use existing npm packages (they are platform-independent)&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;PHP&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Existing PECL and composer packages work well on aarch64 Linux&lt;/td&gt;
  &lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Python&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;Pre-built wheels for aarch64 Linux are published with each release (starting from &lt;code&gt;v1.38.1&lt;/code&gt;)&lt;/td&gt;
  &lt;td&gt;grpcio-tools package has now support for codegen on aarch64 Linux&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Ruby&lt;/td&gt;
  &lt;td style=&#34;background: #90ee90;&#34;&gt;✔️&lt;/td&gt;
  &lt;td style=&#34;background: #ffcccb;&#34;&gt;Pre-built native gems for aarch64 Linux not available yet. In order to use grpc-ruby and protobuf-ruby, users need to build the gems from source&lt;/td&gt;
  &lt;td&gt;Continuous tests are in place and they are passing consistently, but we don&#39;t yet provide pre-built packages. gRPC and protobuf in ruby are safe to use, but the installation experience is suboptimal&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;p&gt;&lt;em&gt;&lt;sup&gt;1&lt;/sup&gt; continuous testing is in place for grpc-go and in-progress for protobuf-go. protobuf-go has been tested on aarch64 manually and has been found to work reliably.&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;arm64--aarch64--armv8-terminology&#34;&gt;ARM64 / aarch64 / ARMv8 terminology&lt;/h3&gt;
&lt;p&gt;While the terms ARM64, aarch64 and ARMv8 denote slightly different things, in practice they are often used interchangeably. For purposes of this article, they all mean essentially the same thing and they can be treated as synonyms.&lt;/p&gt;
&lt;h3 id=&#34;official-arm64-support-is-currently-linux-only&#34;&gt;Official ARM64 support is currently Linux-only&lt;/h3&gt;
&lt;p&gt;At this point we only officially support gRPC and Protobuf on ARM64 on Linux. We do realize that there&amp;rsquo;s demand for ARM64 support for other platforms as well (e.g. MacOS X with the new Apple M1 Silicon), but some of these platforms come with significant challenges (provisioning the hardware, lack of emulation, etc). Rather than delaying the ARM64 support release due to these complications, it made more sense to stay focused on delivering official ARM64 support to Linux first - so there we go.&lt;/p&gt;
&lt;h2 id=&#34;appendix-list-of-changesfixesimprovements&#34;&gt;Appendix: list of changes/fixes/improvements&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;grpc/grpc&lt;/code&gt; repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25258&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25258&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25418&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25418&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25453&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25453&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25517&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25517&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25602&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25602&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25717&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25717&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/25928&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/25928&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/26136&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/26136&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/26409&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/26409&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/26416&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/26416&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/pull/26430&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc/pull/26430&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;grpc/grpc-java&lt;/code&gt; repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/pull/8113&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc-java/pull/8113&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/pull/7812&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc-java/pull/7812&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/pull/7822&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc-java/pull/7822&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;grpc/grpc-go&lt;/code&gt; repostitory&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/pull/4344&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/grpc/grpc-go/pull/4344&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;protocolbuffers/protobuf&lt;/code&gt; repository&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8280&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8280&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8391&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8391&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8392&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8392&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8485&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8485&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8501&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8501&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8544&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8544&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/protocolbuffers/protobuf/pull/8638&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/protocolbuffers/protobuf/pull/8638&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: The future of gRPC in C# belongs to grpc-dotnet</title>
      <link>https://grpc.io/blog/grpc-csharp-future/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-csharp-future/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Update 2023-10-02: The maintenance period for &lt;code&gt;Grpc.Core&lt;/code&gt; has been extended again, until at least October 2024. See &lt;a href=&#34;https://groups.google.com/g/grpc-io/c/iEalUhV4VrU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;announcement&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for up to date info on &lt;code&gt;Grpc.Core&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Update 2022-05-03: The maintenance period for &lt;code&gt;Grpc.Core&lt;/code&gt; has been extended until May 2023. See &lt;a href=&#34;https://groups.google.com/g/grpc-io/c/OTj5mb1qzb0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;announcement&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for more info on the future of &lt;code&gt;Grpc.Core&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;TL;DR&lt;/strong&gt; grpc-dotnet (the
&lt;a href=&#34;https://www.nuget.org/packages/Grpc.Net.Client/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grpc.Net.Client&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and
&lt;a href=&#34;https://www.nuget.org/packages/Grpc.AspNetCore.Server/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grpc.AspNetCore.Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
nuget packages) is now the recommended gRPC implementation for .NET/C#. The
original gRPC C# implementation (the Grpc.Core nuget package) will enter
maintenance mode and won&amp;rsquo;t be getting any new features and will only receive
important bug fixes and security fixes going forward. The ultimate plan is to
phase out Grpc.Core completely at some point in the future. This announcement
describes the reasons why we have decided to do so and lays out the plan in more
detail.&lt;/p&gt;
&lt;p&gt;In September 2019 we &lt;a href=&#34;https://grpc.io/blog/grpc-on-dotnetcore/&#34;&gt;announced&lt;/a&gt;
general availability of a new &lt;a href=&#34;https://github.com/grpc/grpc-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC C#
implementation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; that is no longer based on
the gRPC C core native library and that&amp;rsquo;s using the HTTP/2 protocol
implementation that was added in .NET Core 3 and ASP.NET Core 3. We refer to
this implementation as &amp;ldquo;grpc-dotnet&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;When we were introducing the grpc-dotnet implementation, we announced that both
gRPC C# implementations (the new pure C# grpc-dotnet implementation and the
original gRPC C# implementation based on C core native library) would co-exist
side by side, letting the users choose which implementation works best for them.
That made a lot of sense since grpc-dotnet was brand new back then and required
a just-released .NET Core framework, while the original gRPC C# implementation
had been stable for a long time, had lots of users and worked on even very old
.NET Framework versions. Things needed some time to settle.&lt;/p&gt;
&lt;p&gt;Since then, the new grpc-dotnet implementation has come a long way: it has been
adopted by many users and became very popular, it has been used by a lot of
applications in production environments, and has also added a lot of interesting
new features. In addition, its main prerequisite, the .NET Core 3 framework, has
been around for a while now and its adoption numbers are growing.&lt;/p&gt;
&lt;p&gt;At the same time, while the &lt;a href=&#34;https://github.com/grpc/grpc/tree/master/src/csharp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;original gRPC C#
implementation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (often
referred to as &amp;ldquo;Grpc.Core&amp;rdquo;, the name of its nuget package) definitely has its
place and it is hugely popular, we are now nearing a point where some of the
design decisions that made perfect sense back in 2016 (when gRPC C# was released
as GA) no longer have the weight they used to. For example, we decided to base
the gRPC C# implementation on a native library because in 2016, there was no
usable C# HTTP/2 library that we could depend on. By depending on the C core
native library instead, we were able to deliver a stable, high performance gRPC
library much faster than if we had to implement everything in C# from scratch.
But from today&amp;rsquo;s perspective, taking a native dependency doesn&amp;rsquo;t make that much
sense anymore since HTTP/2 support is now built into the .NET Core framework.
The benefits of having a native dependency are diminishing, while the
maintenance burden of having one is staying the same.&lt;/p&gt;
&lt;p&gt;Out of the two stable C# implementations, the grpc-dotnet implementation is
definitely the one that has more future potential. It is a more modern
implementation that is well-integrated with the modern versions of .NET and it&amp;rsquo;s
likely going to be more aligned with where the C# community will be a few years
from now. It is also a pure C# implementation (no native components), which
makes it much more contribution friendly, leads to better debuggability and it
is simply also something that C# enthusiasts like to see.&lt;/p&gt;
&lt;p&gt;Because the maintenance costs of having two official implementations of gRPC for
C# are nontrivial and because grpc-dotnet seems to be the best choice for all
users in the long run, we would like to &lt;strong&gt;announce the intent to phase out the
original gRPC C# implementation (nuget package Grpc.Core) in favor of the more
modern and more forward-looking grpc-dotnet implementation&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;The details of the plan are described in the following sections, along with
further explanation why it makes sense. To help understand the consequences of
the decision to phase out Grpc.Core, we have also come up with a list of
frequently asked questions and provided answers to them.&lt;/p&gt;
&lt;h3 id=&#34;what-makes-grpc-dotnet-the-preferred-implementation&#34;&gt;What makes grpc-dotnet the preferred implementation&lt;/h3&gt;
&lt;p&gt;Simply said, grpc-dotnet seems to be a better bet for the future. Some of the
most important points were already mentioned. Here is a more detailed list of
reasons why we believe grpc-dotnet will serve the users&amp;rsquo; needs better:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s a more modern implementation, based on features of the recent version of
the .NET framework. As such, it will probably be the more viable one of the
two implementations in the future.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;It&amp;rsquo;s more aligned with where the C# / .NET community is now and in the future.
Staying aligned with where the community is heading seems to be the best bet
for the future of gRPC in C#.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The implementation is much more agile and contribution friendly - because it&amp;rsquo;s
internally based on well known primitives / APIs (ASP.NET core serving APIs
and HTTP2 client) and it&amp;rsquo;s implemented in pure C#, the code is much more
accessible to C# developers (both to users that just want to understand how
things work and to potential contributors who would author PRs). The
grpc-dotnet codebase is relatively small, it takes seconds to build, running
the tests is easy and quick. In the long run, easier development and
contribution friendliness should make up for some of the features that are
missing today and make it a superior choice for the users &amp;ndash; that is,
lowering the barrier to
contribute and fix/improve stuff translates into more stuff being fixed and
better user experience after some time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Having a library that is implemented in pure C# is something that&amp;rsquo;s generally
favored by the .NET community, compared to an implementation that depends on a
native component. While C# has good support for interoperating with native
libraries, it is a technique that most C# developers are not familiar with and
it looks like a black box to them. Native interop is tricky to get it right
and has many downsides (e.g. more complicated development and build process,
complex debugging, hard to maintain, hard to get community contributions, hard
to provide support for multiple platforms). With Grpc.Core we were able to
overcome most of these challenges (so things work these days), but it has been
a lot of effort, the solutions are sometimes complex and fragile and
maintaining it is costly and requires a lot of expertise.&lt;/p&gt;
&lt;p&gt;NOTE: the Google.Protobuf library for C# is already written purely in C# (no
native components), so having a pure C# implementation of gRPC gets rid of
native components from developers&amp;rsquo; microservice stack completely&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;why-not-keep-grpccore-forever&#34;&gt;Why not keep Grpc.Core forever?&lt;/h3&gt;
&lt;p&gt;Developing two implementations of gRPC in C# isn&amp;rsquo;t free. It costs valuable
resources and we believe that the engineering time would be better spent on
making gRPC in C# easier to use and on adding new features (and fixing bugs of
course), rather than needing to work on two different codebases that both serve
the same purpose.  Also, having two separate implementations necessarily
fragments the user base to some extent and splits the contributors&amp;rsquo; efforts into
two. Also just the simple act of users needing to choose which of the two
implementations they want to bet on comes with uncertainty and inherent risk
(none of which we want for our users).&lt;/p&gt;
&lt;p&gt;By making grpc-dotnet the recommended implementation and by making the Grpc.Core
implementation &amp;ldquo;maintenance only&amp;rdquo; (and eventually phasing it out), we are aiming
to achieve the following goals:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Free up engineering resources to work on better features and better usability.&lt;/li&gt;
&lt;li&gt;Unify the gRPC C# user base. This will lead to directing all community work
and contributions toward a single implementation. It also removes the inherent
friction caused by the user needing to choose which of the two official
implementations to use.&lt;/li&gt;
&lt;li&gt;Address some of the well known pain points of Grpc.Core that would be too
difficult to address by other means.&lt;/li&gt;
&lt;li&gt;Futureproof C#/.NET implementation of gRPC by staying aligned with the .NET
community.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-plan&#34;&gt;The plan&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Phase 1: Grpc.Core becomes &amp;ldquo;Maintenance Only&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When: Effective immediately (May 2021)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;From now on, we are no longer going to provide new features or enhancements for
Grpc.Core. Important bugs and security issues will continue to be addressed in a
normal way.&lt;/p&gt;
&lt;p&gt;We will publish Grpc.Core releases normally, with the usual 6 weekly cadence.&lt;/p&gt;
&lt;p&gt;The releases will be based on the newest grpc C core native library build, so
all new features that don&amp;rsquo;t require C# specific work will also be included.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Phase 2: Grpc.Core becomes &amp;ldquo;Deprecated&amp;rdquo;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;When: 1 year from now (May 2022)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Once this milestone is reached, Grpc.Core will no longer be officially supported
and all the users will be strongly advised to only use grpc-dotnet from this
point onwards.&lt;/p&gt;
&lt;p&gt;The Grpc.Core nuget packages will remain available in the nuget.org repository,
but no more fixes will be provided (= not even security fixes).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Future of Grpc.Tools and Grpc.Core.Api nuget packages&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Both packages will continue to be fully supported, since they are strictly
speaking not part of Grpc.Core and they are also used by grpc-dotnet.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the Grpc.Tools nuget package which provides the codegen build integration for
C# projects will continue to be supported (and will potentially get
improvements) &amp;ndash; as it&amp;rsquo;s used by both Grpc.Core and grpc-dotnet. This package
is independent of C core.&lt;/li&gt;
&lt;li&gt;Grpc.Core.Api package is a prerequisite for grpc-dotnet so it will potentially
evolve over time as well (but it&amp;rsquo;s a pure C# API only package and since it
only contains the public API surface, changes are very infrequent)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;q--a&#34;&gt;Q &amp;amp; A&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m a current Grpc.Core user, what does this mean for me?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;While we are going to continue supporting Grpc.Core for a while (see the
deprecation schedule for details), you&amp;rsquo;ll have to migrate your project to
grpc-dotnet if you wish to continue getting updates and bug fixes in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How do I migrate my existing project to grpc-dotnet?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Since Grpc.Core and grpc-dotnet are two distinct libraries, there are going to
be some code changes necessary in your project. Since both implementations share
the same API for invoking and handling RPCs (we&amp;rsquo;ve intentionally designed them
to be that way), we believe that the code changes necessary should be fairly
minimal. For many applications you&amp;rsquo;ll simply need to change the way you
configure your gRPC channels and servers; that is usually only a small portion
of your app&amp;rsquo;s implementation and tends to be separate from the business logic.&lt;/p&gt;
&lt;p&gt;For more tips on how to migrate from Grpc.Core to grpc-dotnet, see &lt;a href=&#34;https://docs.microsoft.com/en-us/aspnet/core/grpc/migration&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Migrating
gRPC services from C-core to ASP.NET
Core&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We plan to publish a more detailed migration guide in the future to facilitate
the migration from Grpc.Core to grpc-dotnet.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&amp;rsquo;d like to use gRPC in C# for a new project. Which implementation should I choose?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We strongly recommend only using grpc-dotnet for new projects. We are going to
stop supporting Grpc.Core in the future.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Does this mean I need to stop using Grpc.Core right now?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;No, Grpc.Core will continue to be supported for a while (see the deprecation
schedule). There should be enough time for you to assess the situation and plan
your migration.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I&amp;rsquo;m not using gRPC directly in my code, but I&amp;rsquo;m using the Google Cloud Client Libraries (which do use Grpc.Core under the hood). How does this impact me?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This deprecation does not currently impact existing users of Google Cloud Client
Libraries.&lt;/p&gt;
&lt;p&gt;Since Grpc.Core is an integral part of these client libraries, security and bug
fixes for Grpc.Core will continue to be provided for Google Cloud Client
Libraries.&lt;/p&gt;
&lt;p&gt;The client libraries for which the extended support will be provided:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/googleapis/google-cloud-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud Libraries for .NET&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/googleads/google-ads-dotnet/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Ads Client Library for .NET&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note that the extended support of Grpc.Core will only be provided for Grpc.Core
when used as part of these client libraries. For other use cases than the Google
Cloud Client Libraries, Grpc.Core won&amp;rsquo;t be officially supported past the
deprecation date and users must migrate existing workloads to grpc-dotnet before
the deprecation happens.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where can I find the list of supported features?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Our &lt;a href=&#34;https://github.com/grpc/grpc-dotnet/blob/master/doc/implementation_comparison.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation on
github&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
has a comparison of supported features.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;I have an important Grpc.Core use case that is not covered by this document.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;We welcome your feedback! Write to us through the &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-io&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; Google Group, or
any other of the main &lt;a href=&#34;https://grpc.io/community/&#34;&gt;gRPC community channels&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Analyzing gRPC messages using Wireshark</title>
      <link>https://grpc.io/blog/wireshark/</link>
      <pubDate>Wed, 03 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/wireshark/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://www.wireshark.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is an open source network protocol
analyzer that can be used for protocol development, network troubleshooting, and
education. Wireshark lets you analyze gRPC messages that are transferred over
the network, and learn about the binary format of these messages.&lt;/p&gt;
&lt;p&gt;In this post, you&amp;rsquo;ll learn how to configure and use the Wireshark &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/gRPC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC
dissector&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and the &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/Protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffers (Protobuf) dissector&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, which are
protocol-specific components that allow you to analyze gRPC messages with
Wireshark.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;p&gt;The main features of the gRPC and Protobuf dissectors are the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Support dissecting (decoding) gRPC messages serialized in the
&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/encoding&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protocol buffer wire format&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or as JSON&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Support dissecting gRPC messages of unary, server streaming, client streaming,
and bidirectional streaming RPC calls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enhanced dissection of serialized protocol buffers data by allowing
you to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Load relevant &lt;code&gt;.proto&lt;/code&gt; files&lt;/li&gt;
&lt;li&gt;Register your own subdissectors for protocol buffer fields of type &lt;code&gt;byte&lt;/code&gt; or
&lt;code&gt;string&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;capturing-grpc-traffic&#34;&gt;Capturing gRPC traffic&lt;/h2&gt;
&lt;p&gt;This post focuses on the analysis of captured gRPC messages. To learn how to
store network traffic in &lt;em&gt;capture files&lt;/em&gt;, see &lt;a href=&#34;https://www.wireshark.org/docs/wsug_html_chunked/ChapterCapture.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Capturing Live Network Data&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
from the &lt;a href=&#34;https://www.wireshark.org/docs/wsug_html_chunked/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark User’s Guide&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Currently, Wireshark can only parse &lt;strong&gt;plain text&lt;/strong&gt; gRPC messages. While
&lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/tls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark supports TLS dissection&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, it requires per-session secret keys. As
of the time of writing, the only &lt;a href=&#34;https://grpc.io/docs/languages/go&#34;&gt;Go gRPC&lt;/a&gt; supports the exporting such keys.
To learn how to export keys using Go gRPC &amp;ndash; and other languages as support
becomes available &amp;ndash; see &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/How-to-Export-TLS-Master-keys-of-gRPC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to Export TLS Master keys of gRPC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.

&lt;/div&gt;

&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s walk through the setup necessary to analyze previously-captured messages
that were generated by a slightly extended version of the &lt;em&gt;address book&lt;/em&gt; app
used in the &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/tutorials&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffers tutorials&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;address-book-proto-files&#34;&gt;Address book &lt;code&gt;.proto&lt;/code&gt; files&lt;/h3&gt;
&lt;p&gt;The app&amp;rsquo;s main protocol file is &lt;code&gt;addressbook.proto&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;tutorial&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;google/protobuf/timestamp.proto&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Person&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Unique ID number for this person.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; email &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;enum&lt;/span&gt; PhoneType {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    MOBILE &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    HOME &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    WORK &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PhoneNumber&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; number &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    PhoneType type &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; PhoneNumber phone &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  google.protobuf.Timestamp last_updated &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bytes&lt;/span&gt; portrait_image &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;AddressBook&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; Person people &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This file is identical to the &lt;a href=&#34;https://github.com/protocolbuffers/protobuf/blob/master/examples/addressbook.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffers tutorial version&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
except for the additional &lt;code&gt;portrait_image&lt;/code&gt; field.&lt;/p&gt;
&lt;p&gt;Note the &lt;code&gt;import&lt;/code&gt; statement at the top of the file, it is used to import
&lt;code&gt;Timestamp&lt;/code&gt;, which is one of many &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/google.protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffers Well-Known Types&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Our variant of the app also defines a &lt;em&gt;person-search&lt;/em&gt; service that can be used
to search for address book entries based on selected &lt;code&gt;Person&lt;/code&gt; attributes. The
service is defined in &lt;code&gt;person_search_service.proto&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-protobuf&#34; data-lang=&#34;protobuf&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;tutorial&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;addressbook.proto&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;PersonSearchRequest&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; phoneNumber &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; PersonSearchService {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; Search (PersonSearchRequest) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (stream Person) {}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because the service uses the &lt;code&gt;Person&lt;/code&gt; type defined in &lt;code&gt;addressbook.proto&lt;/code&gt;,
the address book &lt;code&gt;.proto&lt;/code&gt; is imported at the start of the file.&lt;/p&gt;
&lt;h3 id=&#34;setting-protobuf-search-paths&#34;&gt;Setting protobuf search paths&lt;/h3&gt;
&lt;p&gt;Wireshark gives the most meaningful decodings when it knows about the &lt;code&gt;.proto&lt;/code&gt;
files used by the apps whose messages you are analyzing.&lt;/p&gt;
&lt;p&gt;You can tell Wireshark where to find &lt;code&gt;.proto&lt;/code&gt; files by setting the &lt;strong&gt;Protobuf
Search Paths&lt;/strong&gt; in the preferences accessible from the &lt;strong&gt;Edit&lt;/strong&gt; menu under
&lt;strong&gt;Preferences &amp;gt; Protocols &amp;gt; Protobuf&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;If our example app&amp;rsquo;s &lt;code&gt;.proto&lt;/code&gt; files are in the &lt;code&gt;d:/protos/my_proto_files&lt;/code&gt; directory,
and the official Protobuf library directory is
&lt;code&gt;d:/protos/protobuf-3.4.1/include&lt;/code&gt;, then add these two paths as &lt;em&gt;source
directories&lt;/em&gt; like this:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/protobuf_search_paths.png&#34; alt=&#34;Protobuf-search-paths dialog&#34; id=&#34;protobuf_search_paths&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-protobuf_search_paths&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-protobuf_search_paths&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/protobuf_search_paths.png&#34; alt=&#34;Protobuf-search-paths dialog&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;By selecting the &lt;strong&gt;Load all files&lt;/strong&gt; option for the app&amp;rsquo;s protocol directory you
enable preloading of message definitions from the &lt;code&gt;addressbook.proto&lt;/code&gt; and
&lt;code&gt;person_search_service.proto&lt;/code&gt; files.&lt;/p&gt;
&lt;h3 id=&#34;loading-a-capture-file&#34;&gt;Loading a capture file&lt;/h3&gt;
&lt;p&gt;From the Wireshark &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/SampleCaptures&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SampleCaptures page&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, download the following sample gRPC
capture file created by running the app and issuing a search request:
&lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/uploads/f6fcdceb0248669c0b057bd15d45ab6f/grpc_person_search_protobuf_with_image.pcapng&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc_person_search_protobuf_with_image.pcapng&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Select &lt;strong&gt;Open&lt;/strong&gt; from the &lt;strong&gt;File&lt;/strong&gt; menu to load the capture file in Wireshark.
Wireshark displays, in order, all of the network traffic from the capture file
in the &lt;strong&gt;Packet-list pane&lt;/strong&gt; at the top of the window.&lt;/p&gt;
&lt;p&gt;Select an entry from the packet-list pane and Wireshark will decode it and show
its details in the lower pane like this:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/after_file_load.png&#34; alt=&#34;Packet-list and packet-detail panes&#34; id=&#34;after_file_load&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-after_file_load&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-after_file_load&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/after_file_load.png&#34; alt=&#34;Packet-list and packet-detail panes&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Select an entry from the details pane to see the byte sequence corresponding to
that entry:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/packet_bytes.png&#34; alt=&#34;Packet bytes&#34; id=&#34;packet_bytes&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-packet_bytes&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-packet_bytes&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/packet_bytes.png&#34; alt=&#34;Packet bytes&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;setting-port-traffic-type&#34;&gt;Setting port traffic type&lt;/h3&gt;
&lt;p&gt;The app&amp;rsquo;s server-side port is 50051. The client-side port, which is different
for each RPC call, is 51035 in the sample capture file.&lt;/p&gt;
&lt;p&gt;You need to tell Wireshark that these ports are carrying HTTP2 traffic. Do this
through the &lt;strong&gt;Decode As&lt;/strong&gt; dialog, which you access from the &lt;strong&gt;Analyze&lt;/strong&gt; menu (or
right-click on an entry from the packet-list pane). You only need to register
the server-side port:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/decode_as_dialog.png&#34; alt=&#34;Decode-as dialog&#34; id=&#34;decode_as_dialog&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-decode_as_dialog&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-decode_as_dialog&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/decode_as_dialog.png&#34; alt=&#34;Decode-as dialog&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Look at the packet-list pane and you&amp;rsquo;ll see that Wireshark is now decoding HTTP2
and gRPC messages:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/http2_grpc.png&#34; alt=&#34;Packets are decoded as HTTP2 and gRPC messages&#34; id=&#34;http2_grpc&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-http2_grpc&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-http2_grpc&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/http2_grpc.png&#34; alt=&#34;Packets are decoded as HTTP2 and gRPC messages&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;decoding-the-search-request-message&#34;&gt;Decoding the search request message&lt;/h3&gt;
&lt;p&gt;Select the first gRPC message sent to port 50051, it corresponds to the sample&amp;rsquo;s
service request message. This is how Wireshark dissects the gRPC request:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/grpc_protobuf_search_request.png&#34; alt=&#34;Decoded search request&#34; id=&#34;grpc_protobuf_search_request&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc_protobuf_search_request&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc_protobuf_search_request&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/grpc_protobuf_search_request.png&#34; alt=&#34;Decoded search request&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;By examining the HTTP2 message header &lt;code&gt;path&lt;/code&gt; field, you&amp;rsquo;ll see the URL to the
app&amp;rsquo;s service (&lt;code&gt;/tutorial.PersonSearchService&lt;/code&gt;), followed by the name of the
invoked RPC (&lt;code&gt;Search&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;content-type&lt;/code&gt;, which is set by the gRPC library, informs Wireshark that the
HTTP2 message content is a gRPC message. By examining the decoded Protocol
Buffers message of the sample gRPC request, you can see that the search request
is for the names &amp;ldquo;Jason&amp;rdquo; and &amp;ldquo;Lily&amp;rdquo;.&lt;/p&gt;
&lt;h3 id=&#34;decoding-the-server-streamed-response&#34;&gt;Decoding the server-streamed response&lt;/h3&gt;
&lt;p&gt;Since the &lt;code&gt;Search&lt;/code&gt; RPC response is server-streaming, &lt;code&gt;Person&lt;/code&gt; objects can be
returned to the client one after another.&lt;/p&gt;
&lt;p&gt;Select the second &lt;code&gt;Person&lt;/code&gt; message returned in the response stream
to see its details:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/blog/wireshark/grpc_protobuf_search_response.png&#34; alt=&#34;Decoded search response&#34; id=&#34;grpc_protobuf_search_response&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc_protobuf_search_response&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc_protobuf_search_response&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/blog/wireshark/grpc_protobuf_search_response.png&#34; alt=&#34;Decoded search response&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;By registering subdissectors, you can have Wireshark further decode fields of
type &lt;code&gt;byte&lt;/code&gt; or &lt;code&gt;string&lt;/code&gt;. For example, to learn how to register a PNG decoder for
the &lt;code&gt;portrait_image&lt;/code&gt; field, see &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/Protobuf#protobuf-field-subdissectors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protobuf field subdissectors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;history-of-grpc-and-protocol-buffers-support&#34;&gt;History of gRPC and Protocol Buffers support&lt;/h2&gt;
&lt;p&gt;Here is a brief annotated list of Wireshark versions as they relate to the
support of gRPC and Protocol Buffers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;v2.6.0: first release of gRPC and Protobuf dissectors, without
support for &lt;code&gt;.proto&lt;/code&gt; files or streaming RPCs.&lt;/li&gt;
&lt;li&gt;v3.2.0: improved dissection of serialized protocol buffers data based on
&lt;code&gt;.proto&lt;/code&gt; files, and support of streaming RPCs.&lt;/li&gt;
&lt;li&gt;v3.3.0: improved and enhanced &lt;code&gt;.proto&lt;/code&gt; file support, such as capture-file
search on protocol buffer field values.&lt;/li&gt;
&lt;li&gt;v3.4.0: Protocol Buffers &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Timestamp&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; time is displayed as locale date-time
string.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;learn-more&#34;&gt;Learn more&lt;/h2&gt;
&lt;p&gt;Interested in learning more? Start with the &lt;a href=&#34;https://www.wireshark.org/docs/wsug_html_chunked/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Wireshark User’s Guide&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. For more
details concerning the example used in this post, as well as other sample
capture files containing gRPC messages, see the &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/gRPC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC dissector&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://gitlab.com/wireshark/wireshark/-/wikis/Protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol
Buffers dissector&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; wiki pages.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Interceptors in gRPC-Web</title>
      <link>https://grpc.io/blog/grpc-web-interceptor/</link>
      <pubDate>Thu, 18 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-web-interceptor/</guid>
      <description>
        
        
        &lt;p&gt;We&amp;rsquo;re pleased to announce support for &lt;em&gt;interceptors&lt;/em&gt; in &lt;a href=&#34;https://github.com/grpc/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; as of
release &lt;a href=&#34;https://github.com/grpc/grpc-web/releases/tag/1.1.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.1.0&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. While the current design is based on gRPC client interceptors
available from other &lt;a href=&#34;https://grpc.io/docs/languages/&#34;&gt;gRPC languages&lt;/a&gt;, it also includes gRPC-web specific
features that should make interceptors easy to adopt and use alongside modern
web frameworks.&lt;/p&gt;
&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;
&lt;p&gt;Similar to other gRPC languages, gRPC-web supports &lt;em&gt;unary&lt;/em&gt; and
server-&lt;em&gt;streaming&lt;/em&gt; interceptors. For each kind of interceptor, we&amp;rsquo;ve &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/javascript/net/grpc/web/interceptor.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;defined an
interface&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; containing a single &lt;code&gt;intercept()&lt;/code&gt; method:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;UnaryInterceptor&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;StreamInterceptor&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This is how the &lt;code&gt;UnaryInterceptor&lt;/code&gt; interface is declared:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;* @interface
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;*/&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; UnaryInterceptor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;() {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @template REQUEST, RESPONSE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @param {!Request&amp;lt;REQUEST, RESPONSE&amp;gt;} request
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @param {function(!Request&amp;lt;REQUEST,RESPONSE&amp;gt;):!Promise&amp;lt;!UnaryResponse&amp;lt;RESPONSE&amp;gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; *     invoker
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @return {!Promise&amp;lt;!UnaryResponse&amp;lt;RESPONSE&amp;gt;&amp;gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;UnaryInterceptor.prototype.intercept &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(request, invoker) {};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;intercept()&lt;/code&gt; method takes two parameters:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A &lt;code&gt;request&lt;/code&gt; of type &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/javascript/net/grpc/web/request.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc.web.Request&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;An &lt;code&gt;invoker&lt;/code&gt;, which performs the actual RPC when invoked&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The &lt;code&gt;StreamInterceptor&lt;/code&gt; interface declaration is similar, except that the
&lt;code&gt;invoker&lt;/code&gt; return type is &lt;code&gt;ClientReadableStream&lt;/code&gt; instead of &lt;code&gt;Promise&lt;/code&gt;. For
implementation details, see &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/javascript/net/grpc/web/interceptor.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;interceptor.js&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    A &lt;code&gt;StreamInterceptor&lt;/code&gt; can be applied to any RPC with a &lt;code&gt;ClientReadableStream&lt;/code&gt;
return type, whether it&amp;rsquo;s a unary or a server-streaming RPC.

&lt;/div&gt;

&lt;h2 id=&#34;what-can-i-do-with-an-interceptor&#34;&gt;What can I do with an interceptor?&lt;/h2&gt;
&lt;p&gt;An interceptor allows you to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Update the original gRPC request before passing it along — for
example, you might inject extra information such as auth headers&lt;/li&gt;
&lt;li&gt;Manipulate the behavior of the original invoker function, such as bypassing
the call so that you can use a cached result instead&lt;/li&gt;
&lt;li&gt;Update the response before it&amp;rsquo;s returned to the client&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You&amp;rsquo;ll see some examples next.&lt;/p&gt;
&lt;h2 id=&#34;unary-interceptor-example&#34;&gt;Unary interceptor example&lt;/h2&gt;
&lt;p&gt;The code given below illustrates a unary interceptor that does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It prepends a string to the gRPC request message before the RPC.&lt;/li&gt;
&lt;li&gt;It prepends a string to the gRPC response message after it&amp;rsquo;s received.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This simple unary interceptor is defined as a class that implements the
&lt;code&gt;UnaryInterceptor&lt;/code&gt; interface:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @constructor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @implements {UnaryInterceptor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; SimpleUnaryInterceptor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;() {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/** @override */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;SimpleUnaryInterceptor.prototype.intercept &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(request, invoker) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Update the request message before the RPC.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; reqMsg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request.getRequestMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  reqMsg.setMessage(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[Intercept request]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; reqMsg.getMessage());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// After the RPC returns successfully, update the response.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; invoker(request).then((response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// You can also do something with response metadata here.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    console.log(response.getMetadata());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Update the response message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; responseMsg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; response.getResponseMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseMsg.setMessage(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[Intercept response]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; responseMsg.getMessage());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; response;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  });
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;stream-interceptor-example&#34;&gt;Stream interceptor example&lt;/h2&gt;
&lt;p&gt;More care is needed to intercept server-streamed responses from a
&lt;code&gt;ClientReadableStream&lt;/code&gt; using a &lt;code&gt;StreamInterceptor&lt;/code&gt;. These are the main steps to
follow:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Create a &lt;code&gt;ClientReadableStream&lt;/code&gt;-wrapper class, and use it to intercept
stream events such as the reception of server responses.&lt;/li&gt;
&lt;li&gt;Create a class that implements &lt;code&gt;StreamInterceptor&lt;/code&gt; and that uses the stream
wrapper.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following sample stream-wrapper class intercepts responses and prepends a
string to response messages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * A ClientReadableStream wrapper.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; *
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @template RESPONSE
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @implements {ClientReadableStream}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @constructor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @param {!ClientReadableStream&amp;lt;RESPONSE&amp;gt;} stream
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; InterceptedStream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(stream) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;.stream &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stream;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/** @override */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;InterceptedStream.prototype.on &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(eventType, callback) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (eventType &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; newCallback &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Update the response message.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; msg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; response.getMessage();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      response.setMessage(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;[Intercept response]&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; msg);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Pass along the updated response.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;      callback(response);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    };
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Register the new callback.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;.stream.on(eventType, newCallback);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// You can also override &amp;#39;status&amp;#39;, &amp;#39;end&amp;#39;, and &amp;#39;error&amp;#39; eventTypes.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;.stream.on(eventType, callback);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/** @override */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;InterceptedStream.prototype.cancel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;.stream.cancel();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The &lt;code&gt;intercept()&lt;/code&gt; method of the sample interceptor returns a wrapped stream:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/**
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @constructor
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; * @implements {StreamInterceptor}
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt; */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; TestStreamInterceptor &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;() {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/** @override */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;TestStreamInterceptor.prototype.intercept &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(request, invoker) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; InterceptedStream(invoker(request));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;binding-interceptors&#34;&gt;Binding interceptors&lt;/h2&gt;
&lt;p&gt;By passing an array of interceptor instances using an appropriate option key,
you can bind interceptors to a client when the client is instantiated:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; promiseClient &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MyServicePromiseClient(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    host, creds, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;unaryInterceptors&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; [interceptor1, interceptor2, interceptor3]});
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MyServiceClient(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    host, creds, {&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;streamInterceptors&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; [interceptor1, interceptor2, interceptor3]});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Interceptors are executed in reverse order for request processing, and in
order for response processing, as illustrated here:
&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-web-interceptors.png&#34; alt=&#34;Interceptor processing order&#34; id=&#34;grpc-web-interceptors&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-web-interceptors&#34;/&gt;
  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-web-interceptors&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-web-interceptors.png&#34; alt=&#34;Interceptor processing order&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;

&lt;/div&gt;

&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Found a problem with &lt;code&gt;grpc-web&lt;/code&gt; or need a feature? File an &lt;a href=&#34;https://github.com/grpc/grpc-web/issues/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;issue&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; over the
&lt;a href=&#34;https://github.com/grpc/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repository. If you have general questions or comments, then
consider posting to the &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC mailing list&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or sending us an email at
&lt;a href=&#34;mailto:grpc-web-team@google.com&#34;&gt;grpc-web-team@google.com&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Announcing gRPC-JS 1.0</title>
      <link>https://grpc.io/blog/grpc-js-1.0/</link>
      <pubDate>Mon, 20 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-js-1.0/</guid>
      <description>
        
        
        &lt;p&gt;We are excited to announce the release of version 1.0 of &lt;a href=&#34;https://www.npmjs.com/package/@grpc/grpc-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;gRPC-JS&lt;/strong&gt;
(@grpc/grpc-js)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, a pure-TypeScript reimplementation of the original
&lt;a href=&#34;https://www.npmjs.com/package/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node gRPC library, grpc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;p&gt;gRPC-JS supports the following features, which should cover most use cases:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clients&lt;/li&gt;
&lt;li&gt;Automatic reconnection&lt;/li&gt;
&lt;li&gt;Servers&lt;/li&gt;
&lt;li&gt;Streaming&lt;/li&gt;
&lt;li&gt;Metadata&lt;/li&gt;
&lt;li&gt;Partial compression support: clients can decompress response messages&lt;/li&gt;
&lt;li&gt;Pick first and round robin load balancing policies&lt;/li&gt;
&lt;li&gt;Client Interceptors&lt;/li&gt;
&lt;li&gt;Connection Keepalives&lt;/li&gt;
&lt;li&gt;HTTP Connect support (proxies)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;should-i-use-grpcgrpc-js-or-grpc&#34;&gt;Should I use @grpc/grpc-js or grpc?&lt;/h2&gt;
&lt;p&gt;The original Node gRPC library (&lt;a href=&#34;https://www.npmjs.com/package/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;) will no longer receive feature
updates and we plan to deprecate it in a year,
so we recommend that you use gRPC-JS, &lt;a href=&#34;https://www.npmjs.com/package/@grpc/grpc-js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@grpc/grpc-js&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;However, some advanced features haven&amp;rsquo;t been ported to gRPC-JS yet, such as full
compression support or support for other load balancing policies. If you need
one of these features, you should use the &lt;a href=&#34;https://www.npmjs.com/package/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; library, but open a &lt;a href=&#34;https://github.com/grpc/grpc-node/issues/new?template=feature_request.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;feature
request&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; over gRPC-JS to let us know which features you are missing the most.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Kotlin, meet gRPC</title>
      <link>https://grpc.io/blog/kotlin-meet-grpc/</link>
      <pubDate>Thu, 16 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/kotlin-meet-grpc/</guid>
      <description>
        
        
        &lt;p&gt;As developers work to modernize applications, they need foundational tools that
are simple and scalable. gRPC is a high-performance, open-source, universal RPC
framework originally developed at Google that developers are adopting in
tremendous numbers, helping them connect services more easily and reliably.
Paired with &lt;a href=&#34;https://kotlinlang.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, the second most popular JVM-based programming language
in the world, developers can build everything from mobile apps to cloud
microservices. To help, we&amp;rsquo;ve open-sourced &lt;a href=&#34;https://github.com/grpc/grpc-kotlin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Kotlin&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for the JVM, allowing
you to use gRPC with your Kotlin projects.&lt;/p&gt;
&lt;p&gt;For the full announcement, including how to deploy gRPC Kotlin services on
&lt;a href=&#34;https://cloud.run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, see the Google Cloud blog, &lt;a href=&#34;https://cloud.google.com/blog/products/application-development/use-grpc-with-kotlin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin, meet gRPC: a new open-source
project for modern apps&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;For more information, see the following &lt;a href=&#34;https://grpc.io/docs/languages/kotlin/&#34;&gt;Kotlin pages&lt;/a&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/languages/kotlin/quickstart/&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/languages/kotlin/basics/&#34;&gt;Basics tutorial&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/languages/kotlin/api/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;API reference&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPC comes to Cloud Run</title>
      <link>https://grpc.io/blog/grpc-cloud-run/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-cloud-run/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://cloud.google.com/run&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cloud Run&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a serverless platform offered by Google Cloud that lets you run
stateless server containers in a fully managed environment. Most Cloud Run apps
use HTTP JSON REST to serve requests, but since September 2019, apps can also
use unary gRPC services!&lt;/p&gt;
&lt;p&gt;Get all the details from &lt;a href=&#34;https://cloud.google.com/blog/products/compute/serve-cloud-run-requests-with-grpc-not-just-http&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Not just for HTTP anymore: gRPC comes to Cloud Run&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Improvements to gRPC&#39;s CMake Build System</title>
      <link>https://grpc.io/blog/cmake-improvements/</link>
      <pubDate>Mon, 16 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/cmake-improvements/</guid>
      <description>
        
        
        &lt;p&gt;For the past few months, &lt;a href=&#34;https://www.kitware.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kitware Inc.&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; has been working with the gRPC team to improve gRPC’s CMake support. The goal of the effort was to modernize gRPC’s CMake build with the most current features and techniques CMake has to offer. This has improved the user experience for gRPC developers choosing to use gRPC’s CMake as a build system. During the effort the CMake build was looked at as a whole, and CMake related issues in GitHub were explored and resolved. A number of improvements were made that will give developers and end users a better experience when building gRPC with CMake.&lt;/p&gt;
&lt;p&gt;One of the more exciting changes is the ability to seamlessly add gRPC to any CMake project and have all of its dependent libraries built using a simple CMake file. Prior to our recent changes this was a multi-step process. The user had to build and install each of gRPC’s dependencies separately, then build and install gRPC before finally building their own project. Now, this can all be done in one step. The following CMake code clones and builds the latest stable release of gRPC as documented &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/cpp/README.md#cmake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cmake&#34; data-lang=&#34;cmake&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;cmake_minimum_required&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;VERSION&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;3.15&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;project&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;my_exe&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;include&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;FetchContent&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;FetchContent_Declare&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;gRPC&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;GIT_REPOSITORY&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;https://github.com/grpc/grpc&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;GIT_TAG&lt;/span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;v1.28.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  )&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;FETCHCONTENT_QUIET&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;OFF&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;FetchContent_MakeAvailable&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;gRPC&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;add_executable&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;my_exe&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;my_exe.cc&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;target_link_libraries&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;my_exe&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;grpc++&lt;/span&gt;)&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;At configure time CMake uses git to clone the gRPC repository using the specified tag. Then gRPC will be added to the current CMake project via &lt;a href=&#34;https://cmake.org/cmake/help/latest/command/add_subdirectory.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;add_subdirectory&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and built as part of the project.&lt;/p&gt;
&lt;h2 id=&#34;what-has-changed&#34;&gt;What has changed?&lt;/h2&gt;
&lt;p&gt;We have addressed many of the CMake-related issues on GitHub, with bug fixes, documentation updates, and new features. All the fixes and features are available starting from gRPC 1.28.0 release.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;We’ve improved the documentation for &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/BUILDING.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;building gRPC from source&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/cpp/README.md#cmake&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;adding gRPC as a dependency to your CMake project&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; giving developers several options for using gRPC from CMake from simply linking to a pre-built gRPC to downloading and building gRPC as part of the project.&lt;/li&gt;
&lt;li&gt;The CMake build now generates pkgconfig (*.pc) files in the installation directory, just like the Makefile build. This allows for pkgconfig to correctly find and report a CMake built version of gRPC.&lt;/li&gt;
&lt;li&gt;If you are using CMake v3.13 or newer, you can now &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/BUILDING.md#install-after-build&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;build &amp;amp; install gRPC and its dependencies in a single step&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, rather than building and installing each component separately.&lt;/li&gt;
&lt;li&gt;The CMake build now has configuration options to enable or disable building of every protoc plugin. For example, running CMake with &lt;code&gt;-DgRPC_BUILD_GRPC_PYTHON_PLUGIN=OFF&lt;/code&gt; will disable building the Python plugin. You can view and edit these options in cmake-gui (or ccmake) as you are configuring your build of gRPC.&lt;/li&gt;
&lt;li&gt;When building and installing gRPC as shared libraries, CMake now sets the .so version so the libraries are correctly versioned. (for example, libgrpc.so.9.0.0, libgrpc++.so.1.27.0-dev, etc).&lt;/li&gt;
&lt;li&gt;We’ve added examples showing how to &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/test/distrib/cpp/run_distrib_test_cmake_fetchcontent.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;build gRPC using the CMake FetchContent module&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, and how to &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/test/distrib/cpp/run_distrib_test_raspberry_pi.sh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cross-compile gRPC for the Raspberry Pi&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;CMake can now find libc-ares even if c-ares has been built with Autotools instead of CMake. This allows gRPC to be built against the distribution-provided version of c-ares if it has been built with Autotools.&lt;/li&gt;
&lt;li&gt;If gRPC is built without testing enabled, the dependent testing frameworks will automatically be disabled, in order to avoid unnecessary compilation.&lt;/li&gt;
&lt;li&gt;Some issues with parallel builds have been addressed.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;As a bonus, there is one extra change that wasn&amp;rsquo;t technically part of this effort, but also contributes to simpler and easier cmake build:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;To build the boringssl dependency, a much more &lt;a href=&#34;https://github.com/grpc/grpc/pull/21527&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;lightweight cmake build is now used&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, which eliminates some odd build-time dependencies (e.g. &lt;code&gt;golang&lt;/code&gt;).&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: .NET Core ❤ gRPC</title>
      <link>https://grpc.io/blog/grpc-on-dotnetcore/</link>
      <pubDate>Mon, 23 Sep 2019 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-on-dotnetcore/</guid>
      <description>
        
        
        &lt;p&gt;The .NET team at Microsoft has been working in close collaboration with the gRPC team since November 2018 on a new fully managed implementation of gRPC for .NET Core.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re pleased to announce that &lt;strong&gt;grpc-dotnet&lt;/strong&gt; is now available with .NET Core 3.0 today!&lt;/p&gt;
&lt;h2 id=&#34;how-to-get-it&#34;&gt;How to get it?&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;grpc-dotnet&lt;/strong&gt; packages have just been released to &lt;a href=&#34;https://www.nuget.org/profiles/grpc-packages&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NuGet.org&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and are already available for use in your projects. These packages also require the latest .NET Core 3.0 shared framework. You can download the .NET Core 3.0 SDK for your dev machine and build servers from the &lt;a href=&#34;https://aka.ms/netcore3download&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;.NET Core 3.0 download page&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to acquire the shared framework.&lt;/p&gt;
&lt;h2 id=&#34;getting-started&#34;&gt;Getting Started&lt;/h2&gt;
&lt;p&gt;As gRPC is now a first-class citizen in .NET ecosystem, gRPC templates are included as part of the .NET SDK. To get started, navigate to a console window after installing the SDK and run the following commands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dotnet new grpc -o GrpcGreeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; GrpcGreeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dotnet run
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To create a gRPC client and test with the newly created gRPC Greeter service, you can &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/tutorials/grpc/grpc-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;follow the rest of this tutorial here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;doesnt-grpc-already-work-with-net-core&#34;&gt;Doesn&amp;rsquo;t gRPC already work with .NET Core?&lt;/h2&gt;
&lt;p&gt;There are currently two official implementations of gRPC for .NET:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/src/csharp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Grpc.Core&lt;/strong&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;: The original gRPC C# implementation based on the native gRPC Core library.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;grpc-dotnet&lt;/strong&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;: The new implementation written entirely in C# with no native dependencies and based on the newly released .NET Core 3.0.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The implementations coexist side-by-side and each has its own advantages in terms of available features, integrations, supported platforms, maturity level and performance. Both implementations share the same API for invoking and handling RPCs, thus limiting the lock-in and enabling users to choose the implementation that satisfies their needs the best.&lt;/p&gt;
&lt;h2 id=&#34;whats-new&#34;&gt;What&amp;rsquo;s new?&lt;/h2&gt;
&lt;p&gt;Unlike the existing C-Core based implementation (&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/src/csharp&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Grpc.Core&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;), the new libraries (&lt;a href=&#34;https://github.com/grpc/grpc-dotnet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-dotnet&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;) make use of the existing networking primitives in the .NET Core Base Class Libraries (BCL). The diagram below highlights the difference between the existing &lt;strong&gt;Grpc.Core&lt;/strong&gt; library and the new &lt;strong&gt;grpc-dotnet&lt;/strong&gt; libraries.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-dotnet.svg&#34; alt=&#34;gRPC .NET Stack&#34; id=&#34;grpc-dotnet.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-dotnet.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-dotnet.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-dotnet.svg&#34; alt=&#34;gRPC .NET Stack&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;On the server side, the &lt;code&gt;Grpc.AspNetCore.Server&lt;/code&gt; package integrates into ASP.NET Core, allowing developers to benefit from ecosystem of common cross-cutting concerns of logging, configuration, dependency injection, authentication, authorization etc. which have already been solved by ASP.NET Core. Popular libraries in the ASP.NET ecosystem such as &lt;a href=&#34;https://github.com/aspnet/EntityFrameworkCore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Entity Framework Core (ORM)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/serilog/serilog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Serilog (Logging library)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/IdentityServer/IdentityServer4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Identity Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; among others now work seamlessly with gRPC.&lt;/p&gt;
&lt;p&gt;On the client side, the &lt;code&gt;Grpc.Net.Client&lt;/code&gt; package builds upon the familiar &lt;code&gt;HttpClient&lt;/code&gt; API that ships as part of .NET Core. As with the server, gRPC clients greatly benefit from the ecosystem of packages that build upon &lt;code&gt;HttpClient&lt;/code&gt;. It is now possible to use existing packages such as &lt;a href=&#34;https://github.com/App-vNext/Polly&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Polly&lt;/strong&gt;(Resilience and fault-handling library)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://docs.microsoft.com/aspnet/core/fundamentals/http-requests&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HttpClientFactory(manage HTTPClient lifetimes)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; with gRPC clients.&lt;/p&gt;
&lt;p&gt;The diagram below captures the exhaustive list of all new .NET packages for gRPC and their relationship with the existing packages.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-dotnet-packages.svg&#34; alt=&#34;grpc-dotnet packages&#34; id=&#34;grpc-dotnet-packages.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-dotnet-packages.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-dotnet-packages.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-dotnet-packages.svg&#34; alt=&#34;grpc-dotnet packages&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In addition to the newly published packages that ship as part of &lt;strong&gt;grpc-dotnet&lt;/strong&gt;, we&amp;rsquo;ve also made improvements that benefit both stacks. Visual Studio 2019 ships with language grammar support for protobuf files and automatic generation of gRPC server/client code upon saving a protobuf file without requiring full project rebuilds due to design-time builds.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-visualstudio.png&#34; alt=&#34;gRPC in Visual Studio 2019&#34; id=&#34;grpc-visualstudio&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-visualstudio&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-visualstudio&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-visualstudio.png&#34; alt=&#34;gRPC in Visual Studio 2019&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;feedback&#34;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re excited about improving the gRPC experience for .NET developers. Give it a try and let us know about feature ideas or bugs you may encounter using the &lt;a href=&#34;https://github.com/grpc/grpc-dotnet/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-dotnet issue tracker&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Dear gRPC</title>
      <link>https://grpc.io/blog/hello-pancakes/</link>
      <pubDate>Fri, 08 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/hello-pancakes/</guid>
      <description>
        
        
        &lt;p&gt;Dear gRPC,&lt;/p&gt;
&lt;p&gt;We messed up. We are so sorry that we missed your birthday this year. Last year we celebrated &lt;a href=&#34;https://twitter.com/grpcio/status/968618209803931648&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;with cake&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and fanfare, but this year we dropped the ball. Please don&amp;rsquo;t think that we love you any less.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re 4 now and that&amp;rsquo;s a big milestone! You&amp;rsquo;re part of so much amazing technology at companies like Salesforce, Netflix, Spotify, Fanatics, and of course, Google. In fact just this week the &lt;a href=&#34;https://ads-developers.googleblog.com/2019/03/upgrade-to-new-google-ads-api-to-get.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;biggest API Google has&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; went production-ready with gRPC.&lt;/p&gt;
&lt;p&gt;We&amp;rsquo;re proud of you, gRPC, and we&amp;rsquo;re going to make this up to you. For starters - we got you a puppy! He&amp;rsquo;s an adorable &lt;strong&gt;G&lt;/strong&gt;olden &lt;strong&gt;R&lt;/strong&gt;etriever and his name is &lt;strong&gt;P&lt;/strong&gt;an&lt;strong&gt;C&lt;/strong&gt;akes. He loves to run back and forth with toys, packets, or messages. He&amp;rsquo;s super active and no matter how much we train him, we just can&amp;rsquo;t get him to REST. PanCakes is going to be your best friend, and ambassador.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://raw.githubusercontent.com/grpc/grpc-community/main/PanCakes/Pancakes_Birthday.png&#34; alt=&#34;gRPC Mascot PanCakes&#34; id=&#34;Pancakes_Birthday&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-Pancakes_Birthday&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-Pancakes_Birthday&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/grpc/grpc-community/main/PanCakes/Pancakes_Birthday.png&#34; alt=&#34;gRPC Mascot PanCakes&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Even though it&amp;rsquo;s a bit late, we still want to throw you a party, gRPC. Our friends at CNCF have planned a &lt;a href=&#34;https://events.linuxfoundation.org/events/grpconf-2019/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;big event&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for you on March 21, and there&amp;rsquo;s going to be lots of people there! They&amp;rsquo;ll be sharing stories about the cool things they&amp;rsquo;ve built, and meeting new people. It&amp;rsquo;s an entire day all about you, and everyone there is going to learn so much. There will be other puppies who can play with PanCakes! Some of the amazing dogs from &lt;a href=&#34;http://www.cci.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Canine Companions for Independence&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; will be there to greet conference attendees and share how they help their humans live a more independent life.&lt;/p&gt;
&lt;p&gt;We are so excited to see what this year holds for you, gRPC!&lt;/p&gt;
&lt;p&gt;~ gRPC Maintainers&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://raw.githubusercontent.com/grpc/grpc-community/main/PanCakes/Pancakes_Birthday_4.png&#34; alt=&#34;gRPC Mascot PanCakes&#34; id=&#34;Pancakes_Birthday_4&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-Pancakes_Birthday_4&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-Pancakes_Birthday_4&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://raw.githubusercontent.com/grpc/grpc-community/main/PanCakes/Pancakes_Birthday_4.png&#34; alt=&#34;gRPC Mascot PanCakes&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: The state of gRPC in the browser</title>
      <link>https://grpc.io/blog/state-of-grpc-web/</link>
      <pubDate>Tue, 08 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/state-of-grpc-web/</guid>
      <description>
        
        
        &lt;p&gt;gRPC 1.0 was released in August 2016 and has since grown to become one of the
premier technical solutions for application communications. It has been adopted
by startups, enterprise companies, and open source projects worldwide.
Its support for polyglot environments, focus on performance, type safety, and
developer productivity has transformed the way developers design their
architectures.&lt;/p&gt;
&lt;p&gt;So far the benefits have largely only been available to mobile
app and backend developers, whilst frontend developers have had to continue to
rely on JSON REST interfaces as their primary means of information exchange.
However, with the release of gRPC-Web, gRPC is poised to become a valuable
addition in the toolbox of frontend developers.&lt;/p&gt;
&lt;p&gt;In this post, I&amp;rsquo;ll describe some of the history of gRPC in the browser, explore
the state of the world today, and share some thoughts on the future.&lt;/p&gt;
&lt;h1 id=&#34;beginnings&#34;&gt;Beginnings&lt;/h1&gt;
&lt;p&gt;In the summer of 2016, both a team at Google and
Improbable&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#f1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; independently started working on
implementing something that could be called &amp;ldquo;gRPC for the browser&amp;rdquo;. They soon
discovered each other&amp;rsquo;s existence and got together to define a
spec&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#f2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; for the new protocol.&lt;/p&gt;
&lt;h2 id=&#34;the-grpc-web-spec&#34;&gt;The gRPC-Web Spec&lt;/h2&gt;
&lt;p&gt;It is currently impossible to implement the HTTP/2 gRPC
spec&lt;sup id=&#34;a3&#34;&gt;&lt;a href=&#34;#f3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; in the browser, as there is simply no browser
API with enough fine-grained control over the requests. For example: there is
no way to force the use of HTTP/2, and even if there was, raw HTTP/2 frames are
inaccessible in browsers. The gRPC-Web spec starts from the point of view of the
HTTP/2 spec, and then defines the differences. These notably include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Supporting both HTTP/1.1 and HTTP/2.&lt;/li&gt;
&lt;li&gt;Sending of gRPC trailers at the very end of request/response bodies as
indicated by a new bit in the gRPC message header&lt;sup id=&#34;a4&#34;&gt;&lt;a href=&#34;#f4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;li&gt;A mandatory proxy for translating between gRPC-Web requests and gRPC HTTP/2
responses.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;the-tech&#34;&gt;The Tech&lt;/h2&gt;
&lt;p&gt;The basic idea is to have the browser send normal HTTP requests (with Fetch or
XHR) and have a small proxy in front of the gRPC server to translate the
requests and responses to something the browser can use.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-web-proxy.png&#34; alt=&#34;The role of the gRPC-Web proxy&#34; id=&#34;grpc-web-proxy&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-web-proxy&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-web-proxy&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-web-proxy.png&#34; alt=&#34;The role of the gRPC-Web proxy&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h1 id=&#34;the-two-implementations&#34;&gt;The Two Implementations&lt;/h1&gt;
&lt;p&gt;The teams at Google and Improbable both went on to implement the spec in two
different repositories&lt;sup id=&#34;a5&#34;&gt;&lt;a href=&#34;#f5&#34;&gt;5&lt;/a&gt;,&lt;/sup&gt;&lt;sup id=&#34;a6&#34;&gt;&lt;a href=&#34;#f6&#34;&gt;6&lt;/a&gt;&lt;/sup&gt;,
and with slightly different implementations, such that neither entirely
conformed to the spec, and for a long time neither was compatible with the
other&amp;rsquo;s proxy&lt;sup id=&#34;a7&#34;&gt;&lt;a href=&#34;#f7&#34;&gt;7&lt;/a&gt;,&lt;/sup&gt;&lt;sup id=&#34;a8&#34;&gt;&lt;a href=&#34;#f8&#34;&gt;8&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The Improbable gRPC-Web client&lt;sup id=&#34;a9&#34;&gt;&lt;a href=&#34;#f9&#34;&gt;9&lt;/a&gt;&lt;/sup&gt; is implemented in
TypeScript and available on npm as &lt;code&gt;@improbable-eng/grpc-web&lt;/code&gt;&lt;sup id=&#34;a10&#34;&gt;&lt;a href=&#34;#f10&#34;&gt;10&lt;/a&gt;&lt;/sup&gt;.
There is also a Go proxy available, both as a package that can be imported into
existing Go gRPC servers&lt;sup id=&#34;a11&#34;&gt;&lt;a href=&#34;#f11&#34;&gt;11&lt;/a&gt;&lt;/sup&gt;, and as a standalone
proxy that can be used to expose an arbitrary gRPC server to a gRPC-Web
frontend&lt;sup id=&#34;a12&#34;&gt;&lt;a href=&#34;#f12&#34;&gt;12&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;The Google gRPC-Web client&lt;sup id=&#34;a13&#34;&gt;&lt;a href=&#34;#f13&#34;&gt;13&lt;/a&gt;&lt;/sup&gt; is implemented in
JavaScript using the Google Closure library&lt;sup id=&#34;a14&#34;&gt;&lt;a href=&#34;#f14&#34;&gt;14&lt;/a&gt;&lt;/sup&gt; base.
It is available on npm as &lt;code&gt;grpc-web&lt;/code&gt;&lt;sup id=&#34;a15&#34;&gt;&lt;a href=&#34;#f15&#34;&gt;15&lt;/a&gt;&lt;/sup&gt;. It originally
shipped with a proxy implemented as an NGINX
extension&lt;sup id=&#34;a16&#34;&gt;&lt;a href=&#34;#f16&#34;&gt;16&lt;/a&gt;&lt;/sup&gt;, but has since doubled down on an Envoy
proxy HTTP filter&lt;sup id=&#34;a17&#34;&gt;&lt;a href=&#34;#f17&#34;&gt;17&lt;/a&gt;&lt;/sup&gt;, which is available in all
versions since v1.4.0.&lt;/p&gt;
&lt;h2 id=&#34;feature-sets&#34;&gt;Feature Sets&lt;/h2&gt;
&lt;p&gt;The gRPC HTTP/2 implementations all support the four method types: unary,
server-side, client-side, and bi-directional streaming. However, the gRPC-Web
spec does not mandate any client-side or bi-directional streaming support
specifically, only that it will be implemented once WHATWG
Streams&lt;sup id=&#34;a18&#34;&gt;&lt;a href=&#34;#f18&#34;&gt;18&lt;/a&gt;&lt;/sup&gt; are implemented in browsers.&lt;/p&gt;
&lt;p&gt;The Google client supports unary and server-side streaming, but only when used
with the &lt;code&gt;grpcwebtext&lt;/code&gt; mode. Only unary requests are fully supported in the
&lt;code&gt;grpcweb&lt;/code&gt; mode. These two modes specify different ways to encode the protobuf
payload in the requests and responses.&lt;/p&gt;
&lt;p&gt;The Improbable client supports both unary and server-side streaming, and has an
implementation that automatically chooses between XHR and Fetch based on the
browser capabilities.&lt;/p&gt;
&lt;p&gt;Here’s a table that summarizes the different features supported:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Client / Feature&lt;/th&gt;
&lt;th&gt;Transport&lt;/th&gt;
&lt;th&gt;Unary&lt;/th&gt;
&lt;th&gt;Server-side streams&lt;/th&gt;
&lt;th&gt;Client-side &amp;amp; bi-directional streaming&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Improbable&lt;/td&gt;
&lt;td&gt;Fetch/XHR ️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;❌&lt;sup id=&#34;a19&#34;&gt;&lt;a href=&#34;#f19&#34;&gt;19&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google (&lt;code&gt;grpcwebtext&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;XHR ️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Google (&lt;code&gt;grpcweb&lt;/code&gt;)&lt;/td&gt;
&lt;td&gt;XHR ️&lt;/td&gt;
&lt;td&gt;✔️&lt;/td&gt;
&lt;td&gt;❌&lt;sup id=&#34;a20&#34;&gt;&lt;a href=&#34;#f20&#34;&gt;20&lt;/a&gt;&lt;/sup&gt;&lt;/td&gt;
&lt;td&gt;❌&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;For more information on this table, please see
&lt;a href=&#34;https://github.com/johanbrandhorst/grpc-web-compatibility-test&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;my compatibility test repo on github&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The compatibility tests may evolve into some automated test framework to enforce
and document the various compatibilities in the future.&lt;/p&gt;
&lt;h2 id=&#34;compatibility-issues&#34;&gt;Compatibility Issues&lt;/h2&gt;
&lt;p&gt;Of course, with two different proxies also come compatibility issues.
Fortunately, these have recently been ironed out, so you can expect to use
either client with either proxy.&lt;/p&gt;
&lt;h1 id=&#34;the-future&#34;&gt;The Future&lt;/h1&gt;
&lt;p&gt;The Google implementation announced version 1.0 and general availability in
October 2018&lt;sup id=&#34;a21&#34;&gt;&lt;a href=&#34;#f21&#34;&gt;21&lt;/a&gt;&lt;/sup&gt; and has published a road map of future
goals&lt;sup id=&#34;a22&#34;&gt;&lt;a href=&#34;#f22&#34;&gt;22&lt;/a&gt;&lt;/sup&gt;, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;An efficient JSON-like message encoding&lt;/li&gt;
&lt;li&gt;In-process proxies for Node, Python, Java and more&lt;/li&gt;
&lt;li&gt;Integration with popular frameworks (React, Angular, Vue)&lt;/li&gt;
&lt;li&gt;Fetch API transport for memory efficient streaming&lt;/li&gt;
&lt;li&gt;Bi-directional streaming support&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Google is looking for feedback on what features are important to the community,
so if you think any of these are particularly valuable to you, then please fill
in their survey&lt;sup id=&#34;a23&#34;&gt;&lt;a href=&#34;#f23&#34;&gt;23&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;p&gt;Recent talks between the two projects have agreed on promoting the Google client
and Envoy proxy as preferred solutions for new users. The Improbable client and
proxy will remain as alternative implementations of the spec without the
Google Closure dependency, but should be considered experimental. A migration
guide will be produced for existing users to move to the Google client, and the
teams are working together to converge the generated APIs.&lt;/p&gt;
&lt;h1 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;The Google client will continue to have new features and fixes implemented at a
steady pace, with a team dedicated to its success, and it being the official
gRPC client. It doesn’t have Fetch API support like the Improbable client, but
if this is an important feature for the community, it will be added. The Google
team and the greater community are collaborating on the official client to the
benefit of the gRPC community at large. Since the GA announcement the community
contributions to the Google gRPC-Web repo has increased dramatically.&lt;/p&gt;
&lt;p&gt;When choosing between the two proxies, there&amp;rsquo;s no difference in capability, so
it becomes a matter of your deployment model. Envoy will suit some
scenarios, while an in-process Go proxy has its own advantages.&lt;/p&gt;
&lt;p&gt;If you’re getting started with gRPC-Web today, first try the Google client. It
has strict API compatibility guarantees and is built on the rock-solid Google
Closure library base used by Gmail and Google Maps. If you &lt;em&gt;need&lt;/em&gt; Fetch API
memory efficiency or experimental websocket client-side and bi-directional
streaming, the Improbable client is a good choice, and it will continue to be
used and maintained by Improbable for the foreseeable future.&lt;/p&gt;
&lt;p&gt;Either way, gRPC-Web is an excellent choice for web developers. It brings the
portability, performance, and engineering of a sophisticated protocol into the
browser, and marks an exciting time for frontend developers!&lt;/p&gt;
&lt;h2 id=&#34;references&#34;&gt;References&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;f1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;improbable.io/games/blog/grpc-web-moving-past-restjson-towards-type-safe-web-apis&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a2&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a3&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc/blob/master/doc/PROTOCOL-WEB.md#protocol-differences-vs-grpc-over-http2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a4&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/improbable-eng/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/improbable-eng/grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a5&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a6&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/improbable-eng/grpc-web/issues/162&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/improbable-eng/grpc-web/issues/162&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a7&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc-web/issues/91&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-web/issues/91&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a8&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f9&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/improbable-eng/grpc-web/tree/master/client/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/improbable-eng/grpc-web/tree/master/client/grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a9&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f10&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@improbable-eng/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npmjs.com/package/@improbable-eng/grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a10&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f11&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/improbable-eng/grpc-web/tree/master/go/grpcweb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/improbable-eng/grpc-web/tree/master/go/grpcweb&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a11&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f12&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/improbable-eng/grpc-web/tree/master/go/grpcwebproxy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/improbable-eng/grpc-web/tree/master/go/grpcwebproxy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a12&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f13&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc-web/tree/master/javascript/net/grpc/web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-web/tree/master/javascript/net/grpc/web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a13&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f14&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://developers.google.com/closure&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;developers.google.com/closure&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a14&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f15&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;npmjs.com/package/grpc-web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a15&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f16&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc-web/tree/master/net/grpc/gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-web/tree/master/net/grpc/gateway&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a16&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f17&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_web_filter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/grpc_web_filter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a17&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f18&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://streams.spec.whatwg.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;streams.spec.whatwg.org&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a18&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f19&#34;&gt;&lt;/a&gt; The Improbable client supports client-side and
bi-directional streaming with an experimental websocket transport. This is
not part of the gRPC-Web spec, and is not recommended for production use. &lt;a href=&#34;#a19&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f20&#34;&gt;&lt;/a&gt; &lt;code&gt;grpcweb&lt;/code&gt; allows server streaming methods to be called, but
it doesn&amp;rsquo;t return data until the stream has closed. &lt;a href=&#34;#a20&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f21&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://grpc.io/blog/grpc-web-ga/&#34;&gt;gRPC-Web is Generally Available&lt;/a&gt; &lt;a href=&#34;#a21&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f22&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/doc/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-web/blob/master/doc/roadmap.md&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a22&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f23&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.google.com/forms/d/1NjWpyRviohn5jaPntosBHXRXZYkh_Ffi4GxJZFibylM&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;docs.google.com/forms/d/1NjWpyRviohn5jaPntosBHXRXZYkh_Ffi4GxJZFibylM&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; &lt;a href=&#34;#a23&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Visualizing gRPC Language Stacks</title>
      <link>https://grpc.io/blog/grpc-stacks/</link>
      <pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-stacks/</guid>
      <description>
        
        
        &lt;p&gt;Here is a high level overview of the gRPC Stacks.  Each of the &lt;strong&gt;10&lt;/strong&gt; default languages supported by gRPC has multiple layers, allowing you to customize what pieces you want in your application.&lt;/p&gt;
&lt;p&gt;There are three main stacks in gRPC: C-core, Go, and Java.  Most of the languages are thin wrappers on top of the &lt;a href=&#34;https://github.com/grpc/grpc/tree/master/src/core&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C-based&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; gRPC core library:&lt;/p&gt;
&lt;h3 id=&#34;wrapped-languages&#34;&gt;Wrapped Languages:&lt;/h3&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-core-stack.svg&#34; alt=&#34;gRPC Core Stack&#34; id=&#34;grpc-core-stack.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-core-stack.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-core-stack.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-core-stack.svg&#34; alt=&#34;gRPC Core Stack&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;For example, a Python application calls into the generated Python stubs.  These calls pass through interceptors, and into the wrapping library where the calls are translated into C calls.  The gRPC C-core will encode the RPC as HTTP/2, optionally encrypt the data with TLS, and then write it to the network.&lt;/p&gt;
&lt;p&gt;One of the cool things about gRPC is that you can swap these pieces out.  For example, you could use C++ instead, and use an In-Process transport.  This would save you from having to go all the way down to the OS network layer.   Another example is trying out the QUIC protocol, which allows you to open new connections quickly.  Being able to run over a variety of transports based on the environment makes gRPC really flexible.&lt;/p&gt;
&lt;p&gt;For each of the wrapped languages, the default HTTP/2 implementation is built into the C-core library, so there is no need to include an outside one.  However, as you can see, it is possible to bring your own (such as with Cronet, the Chrome networking library).&lt;/p&gt;
&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;
&lt;p&gt;In &lt;a href=&#34;https://github.com/grpc/grpc-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, the stack is much simpler, due to not having to support so many configurations.  Here is a high level overview of the Go stack:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-go-stack.svg&#34; alt=&#34;gRPC Go Stack&#34; id=&#34;grpc-go-stack.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-go-stack.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-go-stack.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-go-stack.svg&#34; alt=&#34;gRPC Go Stack&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The structure is a little different here.  Since there is only one language, the flow from the top of the stack to the bottom is more linear.  Unlike wrapped languages, gRPC Go can use either its own HTTP/2 implementation, or the Go &lt;code&gt;net/http&lt;/code&gt; package.&lt;/p&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;p&gt;Here is a high level overview of the &lt;a href=&#34;https://github.com/grpc/grpc-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Java&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; stack:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-java-stack.svg&#34; alt=&#34;gRPC Java Stack&#34; id=&#34;grpc-java-stack.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-java-stack.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-java-stack.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-java-stack.svg&#34; alt=&#34;gRPC Java Stack&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Again, the structure is a little different.  Java supports HTTP/2, QUIC, and In Process like the C-core.  Unlike the C-Core though, applications commonly can bypass the generated stubs and interceptors, and speak directly to the Java Core library.  Each structure is slightly different based on the needs of each language implementation of gRPC.  Also unlike wrapped languages, gRPC Java separates the HTTP/2 implementation into pluggable libraries (such as Netty, OkHttp, or Cronet).&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC-Web is Generally Available</title>
      <link>https://grpc.io/blog/grpc-web-ga/</link>
      <pubDate>Tue, 23 Oct 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-web-ga/</guid>
      <description>
        
        
        &lt;p&gt;We are excited to announce the GA release of
&lt;a href=&#34;https://www.npmjs.com/package/grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Web&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, a JavaScript client library
that enables web apps to communicate directly with gRPC backend services,
without requiring an HTTP server to act as an intermediary. &amp;ldquo;GA&amp;rdquo; means that
gRPC-Web is now Generally Available and stable and qualified for production use.&lt;/p&gt;
&lt;p&gt;With gRPC-Web, you can now easily build truly end-to-end gRPC application
architectures by defining your client &lt;em&gt;and&lt;/em&gt; server-side data types and service
interfaces with Protocol Buffers. This has been a hotly requested feature for a
while, and we are finally happy to say that it is now ready for production use.
In addition, being able to access gRPC services opens up new an exciting
possibilities for &lt;a href=&#34;https://github.com/grpc/grpc-experiments/tree/master/gdebug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;web based
tooling&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; around gRPC.&lt;/p&gt;
&lt;h2 id=&#34;the-basics&#34;&gt;The Basics&lt;/h2&gt;
&lt;p&gt;gRPC-Web, just like gRPC, lets you define the service &amp;ldquo;contract&amp;rdquo; between client
(web) and backend gRPC services using Protocol Buffers. The client can then be
auto generated. To do this, you have a choice between the &lt;a href=&#34;https://developers.google.com/closure/compiler/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Closure&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; compiler
or the more widely used &lt;a href=&#34;https://requirejs.org/docs/commonjs.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CommonJS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
This development process removes the need to manage concerns such as creating
custom JSON serialization and deserialization logic, wrangling HTTP status codes
(which can vary across REST APIs), managing content type negotiation etc.&lt;/p&gt;
&lt;p&gt;From a broader architectural perspective, gRPC-Web enables end-to-end gRPC. The diagram below illustrates this:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc-web-arch.png&#34;  id=&#34;grpc-web-arch&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc-web-arch&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc-web-arch&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc-web-arch.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 1. gRPC with gRPC-Web (left) and gRPC with REST (right)&lt;/p&gt;
&lt;p&gt;In the gRPC-Web universe on the left, a client application speaks Protocol Buffers to a gRPC backend server that speaks Protocol Buffers to other gRPC backend services. In the REST universe on the right, the web app speaks HTTP to a backend REST API server that then speaks Protocol Buffers to backend services.&lt;/p&gt;
&lt;h2 id=&#34;advantages-of-using-grpc-web&#34;&gt;Advantages of using gRPC-Web&lt;/h2&gt;
&lt;p&gt;gRPC-Web will offer an ever-broader feature set over time, but here’s what’s in 1.0 today:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;End-to-end gRPC&lt;/strong&gt; — Enables you to craft your entire RPC pipeline using Protocol Buffers. Imagine a scenario in which a client request goes to an HTTP server, which then interacts with 5 backend gRPC services. There’s a good chance that you’ll spend as much time building the HTTP interaction layer as you will building the entire rest of the pipeline.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tighter coordination between frontend and backend teams&lt;/strong&gt;  — With the entire RPC pipeline defined using Protocol Buffers, you no longer need to have your “microservices teams” alongside your “client team.” The client-backend interaction is just one more gRPC layer amongst others.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Easily generate client libraries&lt;/strong&gt;  — With gRPC-Web, the server that interacts with the “outside” world, i.e. the membrane connecting your backend stack to the internet, is now a gRPC server instead of an HTTP server, that means that all of your service’s client libraries can be gRPC libraries. Need client libraries for Ruby, Python, Java, and 4 other languages? You no longer need to write HTTP clients for all of them.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;a-grpc-web-example&#34;&gt;A gRPC-Web example&lt;/h2&gt;
&lt;p&gt;The previous section illustrated some of the high-level advantages of gRPC-Web for large-scale applications. Now let’s get closer to the metal with an example: a simple TODO app. In gRPC-Web you can start with a simple &lt;code&gt;todos.proto&lt;/code&gt; definition like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;syntax &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;proto3&amp;#34;&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;todos&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Todo&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; content &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;bool&lt;/span&gt; finished &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;GetTodoRequest&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int32&lt;/span&gt; id &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; TodoService {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; GetTodoById (GetTodoRequest) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (Todo);&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;CommonJS client-side code can be generated from this &lt;code&gt;.proto&lt;/code&gt; definition with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protoc echo.proto &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --js_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;import_style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;commonjs:./output &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --grpc-web_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;import_style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;commonjs:./output
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now, fetching a list of TODOs from a backend gRPC service is as simple as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; {GetTodoRequest} &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./todos_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; {TodoServiceClient} &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;./todos_grpc_web_pb.js&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; todoService &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; proto.todos.TodoServiceClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http://localhost:8080&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; todoId &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1234&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; getTodoRequest &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; proto.todos.GetTodoRequest();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;getTodoRequest.setId(todoId);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; metadata &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; getTodo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; todoService.getTodoById(getTodoRequest, metadata, (err, response) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (err) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    console.log(err);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; todo &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; response.todo();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (todo &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      console.log(&lt;span style=&#34;color:#c30&#34;&gt;`A TODO with the ID &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;todoId&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt; wasn&amp;#39;t found`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      console.log(&lt;span style=&#34;color:#c30&#34;&gt;`Fetched TODO with ID &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;todoId&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;: &lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;todo.content()&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;`&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once you declare the data types and a service interface, gRPC-Web abstracts away all the boilerplate, leaving you with a clean and human-friendly API (essentially the same API as the current &lt;a href=&#34;https://grpc.io/docs/languages/node/&#34;&gt;Node.js&lt;/a&gt; for gRPC API, just transferred to the client).&lt;/p&gt;
&lt;p&gt;On the backend, the gRPC server can be written in any language that supports gRPC, such as Go, Java, C++, Ruby, Node.js, and many others. The last piece of the puzzle is the service proxy. From the get-go, gRPC-Web will support &lt;a href=&#34;https://envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; as the default service proxy, which has a built-in &lt;a href=&#34;https://www.envoyproxy.io/docs/envoy/latest/configuration/http_filters/grpc_web_filter#config-http-filters-grpc-web&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;envoy.grpc_web filter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; that you can apply with just a few lines of configuration.&lt;/p&gt;
&lt;h2 id=&#34;next-steps&#34;&gt;Next Steps&lt;/h2&gt;
&lt;p&gt;Going GA means that the core building blocks are firmly in place and ready for usage in production web applications. But there’s still much more to come for gRPC-Web. Check out the &lt;a href=&#34;https://github.com/grpc/grpc-web/blob/master/doc/roadmap.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;official road map&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to see what the core team envisions for the near future.&lt;/p&gt;
&lt;p&gt;If you’re interested in contributing to gRPC-Web, there are a few things we would love community help with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Front-end framework integration&lt;/strong&gt; — Commonly used front-end frameworks like &lt;a href=&#34;https://reactjs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://vuejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vue&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://angular.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Angular&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; don&amp;rsquo;t yet offer official support for gRPC-Web. But we would love to see these frameworks support it since the integration between these frontend frameworks and gRPC-Web can be a vehicle to deliver user-perceivable performance benefits to applications. If you are interested in building out support for these frontend frameworks, let us know on the &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC.io mailing list&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/grpc/grpc-web/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;filing a feature request on github&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or via the feature survey form below.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Language-specific proxy support&lt;/strong&gt; — As of the GA release, &lt;a href=&#34;https://envoyproxy.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is the default proxy for gRPC-Web, offering support via a special module. NGINX is also &lt;a href=&#34;https://github.com/grpc/grpc-web/tree/master/net/grpc/gateway/nginx&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;supported&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. But we’d also love to see development of in-process proxies for specific languages since they obviate the need for special proxies—such as Envoy and nginx—and would make using gRPC-Web even easier.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We’d also love to get feature requests from the community. Currently the best way to make feature requests is to fill out the &lt;a href=&#34;https://docs.google.com/forms/d/1NjWpyRviohn5jaPntosBHXRXZYkh_Ffi4GxJZFibylM/viewform?edit_requested=true&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Web road map features survey&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. When filling up the form, list features you’d like to see and also let us know if you’d like to contribute to the development of those features in the &lt;strong&gt;I’d like to contribute to&lt;/strong&gt; section. The gRPC-Web engineers will be sure to take that information to heart over the course of the project’s development.&lt;/p&gt;
&lt;p&gt;Most importantly, we want to thank all the Alpha and Beta users who have given us feedback, bug reports and pull requests contributions over the course of the past year. We would certainly hope to maintain this momentum and make sure this project brings tangible benefits to the developer community.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: A short introduction to Channelz</title>
      <link>https://grpc.io/blog/a-short-introduction-to-channelz/</link>
      <pubDate>Wed, 05 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/a-short-introduction-to-channelz/</guid>
      <description>
        
        
        &lt;p&gt;Channelz is a tool that provides comprehensive runtime info about connections at
different levels in gRPC. It is designed to help debug live programs, which may
be suffering from network, performance, configuration issues, etc. The
&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A14-channelz.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; provides a
detailed explanation of channelz design and is the canonical reference for all
channelz implementations across languages. The purpose of this blog is to
familiarize readers with channelz service and how to use it for debugging
issues. The context of this post is set in
&lt;a href=&#34;https://github.com/grpc/grpc-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, but the overall idea should be
applicable across languages. At the time of writing, channelz is available for
&lt;a href=&#34;https://github.com/grpc/grpc-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and
&lt;a href=&#34;https://github.com/grpc/grpc-java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-Java&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Support for
&lt;a href=&#34;https://github.com/grpc/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and wrapped languages is coming soon.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s learn channelz through a simple example which uses channelz to help debug
an issue. The
&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/helloworld&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;helloworld&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
example from our repo is slightly modified to set up a buggy scenario. You can
find the full source code here:
&lt;a href=&#34;https://gist.github.com/lyuxuan/515fa6da7e0924b030e29b8be56fd90a&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;client&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
&lt;a href=&#34;https://gist.github.com/lyuxuan/81dd08ca649a6c78a61acc7ab05e0fef&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Client setup:&lt;/strong&gt;
The client will make 100 SayHello RPCs to a specified target and load balance
the workload with the round robin policy. Each call has a 150ms timeout. RPC
responses and errors are logged for debugging purposes.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Running the program, we notice in the log that there are intermittent errors
with error code &lt;strong&gt;DeadlineExceeded&lt;/strong&gt;, as shown in Figure 1.&lt;/p&gt;
&lt;p&gt;However, there&amp;rsquo;s no clue about what is causing the deadline exceeded error and
there are many possibilities:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Network issue, for example: connection lost&lt;/li&gt;
&lt;li&gt;Proxy issue, for example: dropped requests/responses in the middle&lt;/li&gt;
&lt;li&gt;Server issue, for example: lost requests or just slow to respond&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/log.png&#34;  id=&#34;log&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-log&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-log&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/log.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 1. Program log screenshot&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s turn on grpc INFO logging for more debug info and see if we can find
something helpful.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/logWithInfo.png&#34;  id=&#34;logWithInfo&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-logWithInfo&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-logWithInfo&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/logWithInfo.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 2. gRPC INFO log&lt;/p&gt;
&lt;p&gt;As shown in Figure 2, the info log indicates that all three connections to the
server are connected and ready for transmitting RPCs. No suspicious event shows
up in the log. One thing that can be inferred from the info log is that all
connections are up all the time, therefore the lost connection hypothesis can be
ruled out.&lt;/p&gt;
&lt;p&gt;To further narrow down the root cause of the issue, we will ask channelz for
help.&lt;/p&gt;
&lt;p&gt;Channelz provides gRPC internal networking machinery stats through a gRPC
service. To enable channelz, users just need to register the channelz service to
a gRPC server in their program and start the server. The code snippet below
shows the API for registering channelz service to a
&lt;a href=&#34;https://godoc.org/google.golang.org/grpc#Server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc.Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Note that this
has already been done for our example client.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;google.golang.org/grpc/channelz/service&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// s is a *grpc.Server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;service.&lt;span style=&#34;color:#c0f&#34;&gt;RegisterChannelzServiceToServer&lt;/span&gt;(s)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// call s.Serve() to serve channelz service
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A web tool called
&lt;a href=&#34;https://github.com/grpc/grpc-experiments/tree/master/gdebug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-zpages&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
has been developed to conveniently serve channelz data through a web page.
First, configure the web app to connect to the gRPC port that&amp;rsquo;s serving the
channelz service (see instructions from the previous link). Then, open the
channelz web page in the browser. You should see a web page like Figure 3. Now
we can start querying channelz!&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/mainpage.png&#34;  id=&#34;mainpage&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-mainpage&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-mainpage&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/mainpage.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 3. Channelz main page&lt;/p&gt;
&lt;p&gt;As the error is on the client side, let&amp;rsquo;s first click on
&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A14-channelz.md#gettopchannels&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TopChannels&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
TopChannels is a collection of root channels which don&amp;rsquo;t have parents. In
gRPC-Go, a top channel is a
&lt;a href=&#34;https://godoc.org/google.golang.org/grpc#ClientConn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ClientConn&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; created by the
user through &lt;a href=&#34;https://godoc.org/google.golang.org/grpc#NewClient&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;NewClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
and used for making RPC calls. Top channels are of
&lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/9b13d199cc0d4703c7ea26c9c330ba695866eb23/grpc/channelz/v1/channelz.proto#L37&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Channel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
type in channelz, which is an abstraction of a connection that an RPC can be
issued to.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/topChan1.png&#34;  id=&#34;topChan1&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-topChan1&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-topChan1&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/topChan1.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 4. TopChannels result&lt;/p&gt;
&lt;p&gt;So we click on the TopChannels, and a page like Figure 4 appears, which lists
all the live top channel(s) with related info.&lt;/p&gt;
&lt;p&gt;As shown in Figure 5, there is only one top channel with id = 2 (Note that text
in square brackets is the reference name of the in memory channel object, which
may vary across languages).&lt;/p&gt;
&lt;p&gt;Looking at the &lt;strong&gt;Data&lt;/strong&gt; section, we can see there are 15 calls failed out of 100
on this channel.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/topChan2.png&#34;  id=&#34;topChan2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-topChan2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-topChan2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/topChan2.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 5. Top Channel (id = 2)&lt;/p&gt;
&lt;p&gt;On the right hand side, it shows the channel has no child &lt;strong&gt;Channels&lt;/strong&gt;, 3
&lt;strong&gt;Subchannels&lt;/strong&gt; (as highlighted in Figure 6), and 0 &lt;strong&gt;Sockets&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/topChan3.png&#34;  id=&#34;topChan3&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-topChan3&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-topChan3&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/topChan3.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 6. Subchannels owned by the Channel (id = 2)&lt;/p&gt;
&lt;p&gt;A
&lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/9b13d199cc0d4703c7ea26c9c330ba695866eb23/grpc/channelz/v1/channelz.proto#L61&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Subchannel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is an abstraction over a connection and used for load balancing. For example,
you want to send requests to &amp;ldquo;google.com&amp;rdquo;. The resolver resolves &amp;ldquo;google.com&amp;rdquo; to
multiple backend addresses that serve &amp;ldquo;google.com&amp;rdquo;. In this example, the client
is set up with the round robin load balancer, so all live backends are sent
equal traffic. Then the (logical) connection to each backend is represented as a
Subchannel. In gRPC-Go, a
&lt;a href=&#34;https://godoc.org/google.golang.org/grpc/balancer#SubConn&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SubConn&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; can be seen
as a Subchannel.&lt;/p&gt;
&lt;p&gt;The three Subchannels owned by the parent Channel means there are three
connections to three different backends for sending the RPCs to. Let&amp;rsquo;s look
inside each of them for more info.&lt;/p&gt;
&lt;p&gt;So we click on the first Subchannel ID (i.e. &amp;ldquo;4[]&amp;rdquo;) listed, and a page like
Figure 7 renders. We can see that all calls on this Subchannel have succeeded.
Thus it&amp;rsquo;s unlikely this Subchannel is related to the issue we are having.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/subChan4.png&#34;  id=&#34;subChan4&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-subChan4&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-subChan4&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/subChan4.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 7. Subchannel (id = 4)&lt;/p&gt;
&lt;p&gt;So we go back, and click on Subchannel 5 (i.e. &amp;ldquo;5[]&amp;rdquo;). Again, the web page
indicates that Subchannel 5 also never had any failed calls.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/subChan6_1.png&#34;  id=&#34;subChan6_1&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-subChan6_1&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-subChan6_1&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/subChan6_1.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 8. Subchannel (id = 6)&lt;/p&gt;
&lt;p&gt;And finally, we click on Subchannel 6. This time, there&amp;rsquo;s something different.
As we can see in Figure 8, there are 15 out of 34 RPC calls failed on this
Subchannel. And remember that the parent Channel also has exactly 15 failed
calls. Therefore, Subchannel 6 is where the issue comes from. The state of the
Subchannel is &lt;strong&gt;READY&lt;/strong&gt;, which means it is connected and is ready to transmit
RPCs. That rules out network connection problems. To dig up more info, let&amp;rsquo;s
look at the Socket owned by this Subchannel.&lt;/p&gt;
&lt;p&gt;A
&lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/9b13d199cc0d4703c7ea26c9c330ba695866eb23/grpc/channelz/v1/channelz.proto#L227&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Socket&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is roughly equivalent to a file descriptor, and can be generally regarded as the
TCP connection between two endpoints. In grpc-go,
&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/ce4f3c8a89229d9db3e0c30d28a9f905435ad365/internal/transport/http2_client.go#L46&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http2Client&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
and
&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/ce4f3c8a89229d9db3e0c30d28a9f905435ad365/internal/transport/http2_server.go#L61&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http2Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
correspond to Socket. Note that a network listener is also considered a Socket,
and will show up in the channelz Server info.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/subChan6_2.png&#34;  id=&#34;subChan6_2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-subChan6_2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-subChan6_2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/subChan6_2.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 9. Subchannel (id = 6) owns Socket (id = 8)&lt;/p&gt;
&lt;p&gt;We click on Socket 8, which is at the bottom of the page (see Figure 9). And we
now see a page like Figure 10.&lt;/p&gt;
&lt;p&gt;The page provides comprehensive info about the socket like the security
mechanism in use, stream count, message count, keepalives, flow control numbers,
etc. The socket options info is not shown in the screenshot, as there are a lot
of them and not related to the issue we are investigating.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Remote Address&lt;/strong&gt; field suggests that the backend we are having a problem
with is &lt;strong&gt;&amp;ldquo;127.0.0.1:10003&amp;rdquo;&lt;/strong&gt;. The stream counts here correspond perfectly to
the call counts of the parent Subchannel. From this, we can know that the server
is not actively sending DeadlineExceeded errors. This is because if the
DeadlineExceeded error is returned by the server, then the streams would all be
successful. A client side stream&amp;rsquo;s success is independent of whether the call
succeeds. It is determined by whether a HTTP2 frame with EOS bit set has been
received (refer to the
&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A14-channelz.md#socket-data&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
for more info). Also, we can see that the number of messages sent is 34, which
equals the number of calls, and it rules out the possibility of the client being
stuck somehow and results in deadline exceeded. In summary, we can narrow down
the issue to the server which serves on 127.0.0.1:10003. It may be that the
server is slow to respond, or some proxy in front of it is dropping requests.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/socket8.png&#34;  id=&#34;socket8&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-socket8&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-socket8&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/socket8.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p style=&#34;text-align: center&#34;&gt; Figure 10. Socket (id = 8)&lt;/p&gt;
&lt;p&gt;As you see, channelz has helped us pinpoint the potential root cause of the
issue with just a few clicks. You can now concentrate on what&amp;rsquo;s happening with
the pinpointed server. And again, channelz may help expedite the debugging at
the server side too.&lt;/p&gt;
&lt;p&gt;We will stop here and let readers explore the server side channelz, which is
simpler than the client side. In channelz, a
&lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/9b13d199cc0d4703c7ea26c9c330ba695866eb23/grpc/channelz/v1/channelz.proto#L199&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is also an RPC entry point like a Channel, where incoming RPCs arrive and get
processed. In grpc-go, a
&lt;a href=&#34;https://godoc.org/google.golang.org/grpc#Server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc.Server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; corresponds to a
channelz Server. Unlike Channel, Server only has Sockets (both listen socket(s)
and normal connected socket(s)) as its children.&lt;/p&gt;
&lt;p&gt;Here are some hints for the readers:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Look for the server with the address (127.0.0.1:10003).&lt;/li&gt;
&lt;li&gt;Look at the call counts.&lt;/li&gt;
&lt;li&gt;Go to the Socket(s) owned by the server.&lt;/li&gt;
&lt;li&gt;Look at the Socket stream counts and message counts.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You should notice that the number of messages received by the server socket is
the same as sent by the client socket (Socket 8), which rules out the case of
having a misbehaving proxy (dropping request) in the middle. And the number of
messages sent by the server socket is equal to the messages received at client
side, which means the server was not able to send back the response before
deadline. You may now look at the
&lt;a href=&#34;https://gist.github.com/lyuxuan/81dd08ca649a6c78a61acc7ab05e0fef&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; code
to verify whether it is indeed the cause.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Server setup:&lt;/strong&gt;
The server side program starts up three GreeterServers, with two of them using
an implementation
(&lt;a href=&#34;https://gist.github.com/lyuxuan/81dd08ca649a6c78a61acc7ab05e0fef#file-main-go-L42&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)
that imposes no delay when responding to the client, and one using an
implementation
(&lt;a href=&#34;https://gist.github.com/lyuxuan/81dd08ca649a6c78a61acc7ab05e0fef#file-main-go-L50&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slowServer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)
which injects a variable delay of 100ms - 200ms before sending the response.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As you can see through this demo, channelz helped us quickly narrow down the
possible causes of an issue and is easy to use. For more resources, see the
detailed channelz
&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A14-channelz.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Find us on
GitHub at &lt;a href=&#34;https://github.com/grpc/grpc-go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;github.com/grpc/grpc-go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC on HTTP/2 Engineering a Robust, High-performance Protocol</title>
      <link>https://grpc.io/blog/grpc-on-http2/</link>
      <pubDate>Mon, 20 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-on-http2/</guid>
      <description>
        
        
        &lt;p&gt;In a &lt;a href=&#34;https://www.cncf.io/blog/2018/07/03/http-2-smarter-at-scale/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;previous article&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, we explored how HTTP/2 dramatically increases network efficiency and enables real-time communication by providing a framework for long-lived connections. In this article, we’ll look at how gRPC builds on HTTP/2’s long-lived connections to create a performant, robust platform for inter-service communication. We will explore the relationship between gRPC and HTTP/2, how gRPC manages HTTP/2 connections, and how gRPC uses HTTP/2 to keep connections alive, healthy, and utilized.&lt;/p&gt;
&lt;h2 id=&#34;grpc-semantics&#34;&gt;gRPC Semantics&lt;/h2&gt;
&lt;p&gt;To begin, let’s dive into how gRPC concepts relate to HTTP/2 concepts. gRPC introduces three new concepts: &lt;em&gt;channels&lt;/em&gt;&lt;sup id=&#34;a1&#34;&gt;&lt;a href=&#34;#f1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, &lt;em&gt;remote procedure calls&lt;/em&gt; (RPCs), and &lt;em&gt;messages&lt;/em&gt;. The relationship between the three is simple: each channel may have many RPCs while each RPC may have many messages.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/channels_mapping_2.png&#34; alt=&#34;Channel mapping&#34; id=&#34;channels_mapping_2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-channels_mapping_2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-channels_mapping_2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/channels_mapping_2.png&#34; alt=&#34;Channel mapping&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Let’s take a look at how gRPC semantics relate to HTTP/2:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/grpc_on_http2_mapping_2.png&#34; alt=&#34;gRPC on HTTP/2&#34; id=&#34;grpc_on_http2_mapping_2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-grpc_on_http2_mapping_2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-grpc_on_http2_mapping_2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/grpc_on_http2_mapping_2.png&#34; alt=&#34;gRPC on HTTP/2&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Channels are a key concept in gRPC. Streams in HTTP/2 enable multiple concurrent conversations on a single connection; channels extend this concept by enabling multiple streams over multiple concurrent connections. On the surface, channels provide an easy interface for users to send messages into; underneath the hood, though, an incredible amount of engineering goes into keeping these connections alive, healthy, and utilized.&lt;/p&gt;
&lt;p&gt;Channels represent virtual connections to an endpoint, which in reality may be backed by many HTTP/2 connections. RPCs are associated with a connection (this association is described further on). RPCs are in practice plain HTTP/2 streams. Messages are associated with RPCs and get sent as HTTP/2 data frames. To be more specific, messages are &lt;em&gt;layered&lt;/em&gt; on top of data frames. A data frame may have many gRPC messages, or if a gRPC message is quite large&lt;sup id=&#34;a2&#34;&gt;&lt;a href=&#34;#f2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; it might span multiple data frames.&lt;/p&gt;
&lt;h2 id=&#34;resolvers-and-load-balancers&#34;&gt;Resolvers and Load Balancers&lt;/h2&gt;
&lt;p&gt;In order to keep connections alive, healthy, and utilized, gRPC utilizes a number of components, foremost among them &lt;em&gt;name resolvers&lt;/em&gt; and &lt;em&gt;load balancers&lt;/em&gt;. The resolver turns names into addresses and then hands these addresses to the load balancer. The load balancer is in charge of creating connections from these addresses and load balancing RPCs between connections.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/dns_to_load_balancer_mapping_3.png&#34; alt=&#34;Resolvers and Load Balancers&#34; id=&#34;dns_to_load_balancer_mapping_3&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-dns_to_load_balancer_mapping_3&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-dns_to_load_balancer_mapping_3&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/dns_to_load_balancer_mapping_3.png&#34; alt=&#34;Resolvers and Load Balancers&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/load_balance_round_robins_2.png&#34; alt=&#34;Round Robin Load Balancer&#34; id=&#34;load_balance_round_robins_2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-load_balance_round_robins_2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-load_balance_round_robins_2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/load_balance_round_robins_2.png&#34; alt=&#34;Round Robin Load Balancer&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;A DNS resolver, for example, might resolve some host name to 13 IP addresses, and then a RoundRobin balancer might create 13 connections - one to each address - and round robin RPCs across each connection. A simpler balancer might simply create a connection to the first address. Alternatively, a user who wants multiple connections but knows that the host name will only resolve to one address might have their balancer create connections against each address 10 times to ensure that multiple connections are used.&lt;/p&gt;
&lt;p&gt;Resolvers and load balancers solve small but crucial problems in a gRPC system. This design is intentional: reducing the problem space to a few small, discrete problems helps users build custom components. These components can be used to fine-tune gRPC to fit each system’s individual needs.&lt;/p&gt;
&lt;h2 id=&#34;connection-management&#34;&gt;Connection Management&lt;/h2&gt;
&lt;p&gt;Once configured, gRPC will keep the pool of connections - as defined by the resolver and balancer - healthy, alive, and utilized.&lt;/p&gt;
&lt;p&gt;When a connection fails, the load balancer will begin to reconnect using the last known list of addresses&lt;sup id=&#34;a3&#34;&gt;&lt;a href=&#34;#f3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Meanwhile, the resolver will begin attempting to re-resolve the list of host names. This is useful in a number of scenarios. If the proxy is no longer reachable, for example, we’d want the resolver to update the list of addresses to not include that proxy’s address. To take another example: DNS entries might change over time, and so the list of addresses might need to be periodically updated. In this manner and others, gRPC is designed for long-term resiliency.&lt;/p&gt;
&lt;p&gt;Once resolution is finished, the load balancer is informed of the new addresses. If addresses have changed, the load balancer may spin down connections to addresses not present in the new list or create connections to addresses that weren’t previously there.&lt;/p&gt;
&lt;h2 id=&#34;identifying-failed-connections&#34;&gt;Identifying Failed Connections&lt;/h2&gt;
&lt;p&gt;The effectiveness of gRPC&amp;rsquo;s connection management hinges upon its ability to identify failed connections. There are generally two types of connection failures: clean failures, in which the failure is communicated, and the less-clean failure, in which the failure is not communicated.&lt;/p&gt;
&lt;p&gt;Let’s consider a clean, easy-to-observe failure. Clean failures can occur when an endpoint intentionally kills the connection. For example, the endpoint may have gracefully shut down, or a timer may have been exceeded, prompting the endpoint to close the connection. When connections close cleanly, TCP semantics suffice: closing a connection causes the &lt;a href=&#34;http://www.tcpipguide.com/free/t_TCPConnectionTermination-2.htm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FIN handshake&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to occur. This ends the HTTP/2 connection, which ends the gRPC connection. gRPC will immediately begin reconnecting (as described above). This is quite clean and requires no additional HTTP/2 or gRPC semantics.&lt;/p&gt;
&lt;p&gt;The less clean version is where the endpoint dies or hangs without informing the client. In this case, TCP might undergo retry for as long as 10 minutes before the connection is considered failed. Of course, failing to recognize that the connection is dead for 10 minutes is unacceptable. gRPC solves this problem using HTTP/2 semantics: when configured using KeepAlive, gRPC will periodically send &lt;a href=&#34;https://http2.github.io/http2-spec/#PING&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HTTP/2 PING frames&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. These frames bypass flow control and are used to establish whether the connection is alive. If a PING response does not return within a timely fashion, gRPC will consider the connection failed, close the connection, and begin reconnecting (as described above).&lt;/p&gt;
&lt;p&gt;In this way, gRPC keeps a pool of connections healthy and uses HTTP/2 to ascertain the health of connections periodically. All of this behavior is opaque to the user, and message redirecting happens automatically and on the fly. Users simply send messages on a seemingly always-healthy pool of connections.&lt;/p&gt;
&lt;h2 id=&#34;keeping-connections-alive&#34;&gt;Keeping Connections Alive&lt;/h2&gt;
&lt;p&gt;As mentioned above, KeepAlive provides a valuable benefit: periodically checking the health of the connection by sending an HTTP/2 PING to determine whether the connection is still alive. However, it has another equally useful benefit: signaling liveness to proxies.&lt;/p&gt;
&lt;p&gt;Consider a client sending data to a server through a proxy. The client and server may be happy to keep a connection alive indefinitely, sending data as necessary. Proxies, on the other hand, are often quite resource constrained and may kill idle connections to save resources. Google Cloud Platform (GCP) load balancers disconnect apparently-idle connections after &lt;a href=&#34;https://cloud.google.com/compute/docs/troubleshooting#communicatewithinternet&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;10 minutes&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, and Amazon Web Services Elastic Load Balancers (AWS ELBs) disconnect them after &lt;a href=&#34;https://aws.amazon.com/articles/1636185810492479&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;60 seconds&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;With gRPC periodically sending HTTP/2 PING frames on connections, the perception of a non-idle connection is created. Endpoints using the aforementioned idle kill rule would pass over killing these connections.&lt;/p&gt;
&lt;h2 id=&#34;a-robust-high-performance-protocol&#34;&gt;A Robust, High Performance Protocol&lt;/h2&gt;
&lt;p&gt;HTTP/2 provides a foundation for long-lived, real-time communication streams. gRPC builds on top of this foundation with connection pooling, health semantics, efficient use of data frames and multiplexing, and KeepAlive.&lt;/p&gt;
&lt;p&gt;Developers choosing protocols must choose those that meet today’s demands as well as tomorrow’s. They are well served by choosing gRPC, whether it be for resiliency, performance, long-lived or short-lived communication, customizability, or simply knowing that their protocol will scale to extraordinarily massive traffic while remaining efficient all the way. To get going with gRPC and HTTP/2 right away, check out &lt;a href=&#34;https://grpc.io/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC&amp;rsquo;s Getting Started guides&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;footnotes&#34;&gt;Footnotes&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;f1&#34;&gt;&lt;/a&gt; In Go, a gRPC channel is called ClientConn because the word “channel” has a language-specific meaning. &lt;a href=&#34;#a1&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f2&#34;&gt;&lt;/a&gt; gRPC uses the HTTP/2 default max size for a data frame of 16kb. A message over 16kb may span multiple data frames, whereas a message below that size may share a data frame with some number of other messages. &lt;a href=&#34;#a2&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;f3&#34;&gt;&lt;/a&gt; This is the behavior of the RoundRobin balancer, but not every load balancer does or must behave this way. &lt;a href=&#34;#a3&#34;&gt;↩&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC &#43; JSON</title>
      <link>https://grpc.io/blog/grpc-with-json/</link>
      <pubDate>Wed, 15 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-with-json/</guid>
      <description>
        
        
        &lt;p&gt;So you&amp;rsquo;ve bought into this whole RPC thing and want to try it out, but aren&amp;rsquo;t quite sure about Protocol Buffers.  Your existing code encodes your own objects, or perhaps you have code that needs a particular encoding.  What to do?&lt;/p&gt;
&lt;p&gt;Fortunately, gRPC is encoding agnostic!  You can still get a lot of the benefits of gRPC without using Protobuf.  In this post we&amp;rsquo;ll go through how to make gRPC work with other encodings and types.  Let&amp;rsquo;s try using JSON.&lt;/p&gt;
&lt;p&gt;gRPC is actually a collection of technologies that have high cohesion, rather than a singular, monolithic framework.  This means its possible to swap out parts of gRPC and still take advantage of gRPC&amp;rsquo;s benefits.  &lt;a href=&#34;https://github.com/google/gson&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Gson&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a popular library for Java for doing JSON encoding.  Let&amp;rsquo;s remove all the protobuf related things and replace them with Gson:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;background-color:#fcc&#34;&gt;- Protobuf wire encoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;background-color:#fcc&#34;&gt;- Protobuf generated message types
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;background-color:#fcc&#34;&gt;- gRPC generated stub types
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;background-color:#fcc&#34;&gt;&lt;/span&gt;&lt;span style=&#34;background-color:#cfc&#34;&gt;+ JSON wire encoding
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;background-color:#cfc&#34;&gt;+ Gson message types
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Previously, Protobuf and gRPC were generating code for us, but we would like to use our own types.  Additionally, we are going to be using our own encoding too.  Gson allows us to bring our own types in our code, but provides a way of serializing those types into bytes.&lt;/p&gt;
&lt;p&gt;Let&amp;rsquo;s continue with the &lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/tree/04-gson-marshaller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Key-Value&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; store service.  We will be modifying the code used my previous &lt;a href=&#34;https://grpc.io/blog/optimizing-grpc-part-2/&#34;&gt;So You Want to Optimize gRPC&lt;/a&gt; post.&lt;/p&gt;
&lt;h2 id=&#34;what-is-a-service-anyways&#34;&gt;What is a Service Anyways?&lt;/h2&gt;
&lt;p&gt;From the point of view of gRPC, a &lt;em&gt;Service&lt;/em&gt; is a collection of &lt;em&gt;Methods&lt;/em&gt;.  In Java, a method is represented as a &lt;a href=&#34;https://grpc.io/grpc-java/javadoc/io/grpc/MethodDescriptor.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MethodDescriptor&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  Each &lt;code&gt;MethodDescriptor&lt;/code&gt; includes the name of the method, a &lt;code&gt;Marshaller&lt;/code&gt; for encoding requests, and a &lt;code&gt;Marshaller&lt;/code&gt; for encoding responses.  They also include additional detail, such as if the call is streaming or not.  For simplicity, we&amp;rsquo;ll stick with unary RPCs which have a single request and single response.&lt;/p&gt;
&lt;p&gt;Since we won&amp;rsquo;t be generating any code, we&amp;rsquo;ll need to write the message classes ourselves.  There are four methods, each which have a request and a response type.  This means we need to make eight messages:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;CreateRequest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; key&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;CreateResponse&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;RetrieveRequest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; key&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;RetrieveResponse&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;UpdateRequest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; key&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;UpdateResponse&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;DeleteRequest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; key&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;DeleteResponse&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Because GSON uses reflection to determine how the fields in our classes map to the serialized JSON, we don&amp;rsquo;t need to annotate the messages.&lt;/p&gt;
&lt;p&gt;Our client and server logic will use the request and response types, but gRPC needs to know how to produce and consume these messages.  To do this, we need to implement a &lt;a href=&#34;https://grpc.io/grpc-java/javadoc/io/grpc/MethodDescriptor.Marshaller.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Marshaller&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  A marshaller knows how to convert from an arbitrary type to an &lt;code&gt;InputStream&lt;/code&gt;, which is then passed down into the gRPC core library.  It is also capable of doing the reverse transformation when decoding data from the network.  For GSON, here is what the marshaller looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; Marshaller&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;marshallerFor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; clz&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Gson gson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Gson&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Marshaller&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; InputStream &lt;span style=&#34;color:#c0f&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;T value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ByteArrayInputStream&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;gson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toJson&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; clz&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getBytes&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;StandardCharsets&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; T &lt;span style=&#34;color:#c0f&#34;&gt;parse&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;InputStream stream&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; gson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;fromJson&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; InputStreamReader&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;stream&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StandardCharsets&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;UTF_8&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;),&lt;/span&gt; clz&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;};&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Given a &lt;code&gt;Class&lt;/code&gt; object for a some request or response, this function will produce a marshaller.  Using the marshallers, we can compose a full &lt;code&gt;MethodDescriptor&lt;/code&gt; for each of the four CRUD methods.  Here is an example of the Method descriptor for &lt;em&gt;Create&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; MethodDescriptor&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; CREATE_METHOD &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      MethodDescriptor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          marshallerFor&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateRequest&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;),&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          marshallerFor&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setFullMethodName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;              MethodDescriptor&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;generateFullMethodName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;SERVICE_NAME&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Create&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setType&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MethodType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;UNARY&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if we were using Protobuf, we would use the existing Protobuf marshaller, and the
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/03-nonblocking-server/build/generated/source/proto/main/grpc/io/grpc/examples/proto/KeyValueServiceGrpc.java#L44&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;method descriptors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
would be generated automatically.&lt;/p&gt;
&lt;h2 id=&#34;sending-rpcs&#34;&gt;Sending RPCs&lt;/h2&gt;
&lt;p&gt;Now that we can marshal JSON requests and responses, we need to update our
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/b225d28c7c2f3c356b0f3753384b3329f2ab5911/src/main/java/io/grpc/examples/KvClient.java#L98&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KvClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
the gRPC client used in the previous post, to use our MethodDescriptors.  Additionally, since we won&amp;rsquo;t be using any Protobuf types, the code needs to use &lt;code&gt;ByteBuffer&lt;/code&gt; rather than &lt;code&gt;ByteString&lt;/code&gt;.  That said, we can still use the &lt;code&gt;grpc-stub&lt;/code&gt; package on Maven to issue the RPC.  Using the &lt;em&gt;Create&lt;/em&gt; method again as an example, here&amp;rsquo;s how to make an RPC:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; createRandomKey&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ClientCall&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; call &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        chan&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newCall&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CREATE_METHOD&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; CallOptions&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;DEFAULT&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CreateRequest&lt;/span&gt; req &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CreateRequest&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; key&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    req&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; randomBytes&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MEAN_VALUE_SIZE&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;array&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ListenableFuture&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ClientCalls&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;futureUnaryCall&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;call&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; req&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As you can see, we create a new &lt;code&gt;ClientCall&lt;/code&gt; object from the &lt;code&gt;MethodDescriptor&lt;/code&gt;, create the request, and then send it using &lt;code&gt;ClientCalls.futureUnaryCall&lt;/code&gt; in the stub library.  gRPC takes care of the rest for us.  You can also make blocking stubs or async stubs instead of future stubs.&lt;/p&gt;
&lt;h2 id=&#34;receiving-rpcs&#34;&gt;Receiving RPCs&lt;/h2&gt;
&lt;p&gt;To update the server, we need to create a key-value service and implementation.  Recall that in gRPC, a &lt;em&gt;Server&lt;/em&gt; can handle one or more &lt;em&gt;Services&lt;/em&gt;.  Again, what Protobuf would normally have generated for us we need to write ourselves.  Here is what the base service looks like:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;KeyValueServiceImplBase&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; BindableService &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CreateRequest&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;retrieve&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;delete&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* Called by the Server to wire up methods to the handlers */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; ServerServiceDefinition &lt;span style=&#34;color:#c0f&#34;&gt;bindService&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ServerServiceDefinition&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Builder&lt;/span&gt; ssd &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ServerServiceDefinition&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;SERVICE_NAME&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssd&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addMethod&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CREATE_METHOD&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ServerCalls&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asyncUnaryCall&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; create&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssd&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addMethod&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RETRIEVE_METHOD&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssd&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addMethod&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;UPDATE_METHOD&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ssd&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addMethod&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;DELETE_METHOD&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/*...*/&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ssd&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;KeyValueServiceImplBase&lt;/code&gt; will serve as both the service definition (which describes which methods the server can handle) and as the implementation (which describes what to do for each method).  It serves as the glue between gRPC and our application logic.  Practically no changes are needed to swap from Proto to GSON in the server code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;KvService&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;extends&lt;/span&gt; KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;KeyValueServiceImplBase&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CreateRequest&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;KvGson&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CreateResponse&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ByteBuffer value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;wrap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After implementing all the methods on the server, we now have a fully functioning gRPC Java, JSON encoding RPC system.  And to show you there is nothing up my sleeve:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew :dependencies | grep -i proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# no proto deps!&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;optimizing-the-code&#34;&gt;Optimizing the Code&lt;/h2&gt;
&lt;p&gt;While Gson is not as fast as Protobuf, there&amp;rsquo;s no sense in not picking the low hanging fruit.  Running the code we see the performance is pretty slow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew installDist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;time&lt;/span&gt; ./build/install/kvstore/bin/kvstore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Did 215.883 RPCs/s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What happened?  In the previous &lt;a href=&#34;https://grpc.io/blog/optimizing-grpc-part-2/&#34;&gt;optimization&lt;/a&gt; post, we saw the Protobuf version do nearly &lt;em&gt;2,500 RPCs/s&lt;/em&gt;.  JSON is slow, but not &lt;em&gt;that&lt;/em&gt; slow.  We can see what the problem is by printing out the JSON data as it goes through the marshaller:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;:[&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-100&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-48&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;22&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-128&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;85&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;115&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;56&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;34&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-48&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-1&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-119&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;60&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;17&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-13&lt;/span&gt;,&lt;span style=&#34;color:#f60&#34;&gt;-118&lt;/span&gt;]}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;That&amp;rsquo;s not right!  Looking at a &lt;code&gt;RetrieveRequest&lt;/code&gt;, we see that the key bytes are being encoded as an array, rather than as a byte string.  The wire size is much larger than it needs to be, and may not be compatible with other JSON code.  To fix this, let&amp;rsquo;s tell GSON to encode and decode this data as base64 encoded bytes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; Gson gson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GsonBuilder&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;registerTypeAdapter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[].&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; TypeAdapter&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;write&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;JsonWriter out&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      out&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Base64&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getEncoder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;encodeToString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;value&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;read&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;JsonReader in&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; IOException &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Base64&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDecoder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;decode&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;in&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;nextString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Using this in our marshallers, we can see a dramatic performance difference:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew installDist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;time&lt;/span&gt; ./build/install/kvstore/bin/kvstore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Did 2,202.2 RPCs/s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Almost &lt;strong&gt;10x&lt;/strong&gt; faster than before!  We can still take advantage of gRPC&amp;rsquo;s efficiency while bringing our own encoders and messages.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;gRPC lets you use encoders other than Protobuf.  It has no dependency on Protobuf and was specially made to work with a wide variety of environments.  We can see that with a little extra boilerplate, we can use any encoder we want.  While this post only covered JSON, gRPC is compatible with Thrift, Avro, Flatbuffers, Cap’n Proto, and even raw bytes!  gRPC lets you be in control of how your data is handled.  (We still recommend Protobuf though due to strong backwards compatibility, type checking, and performance it gives you.)&lt;/p&gt;
&lt;p&gt;All the code is available on &lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/tree/04-gson-marshaller&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; if you would like to see a fully working implementation.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Take the gRPC Survey!</title>
      <link>https://grpc.io/blog/take-the-grpc-survey/</link>
      <pubDate>Tue, 14 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/take-the-grpc-survey/</guid>
      <description>
        
        
        &lt;h2 id=&#34;the-grpc-project-wants-your-feedback&#34;&gt;The gRPC Project wants your feedback!&lt;/h2&gt;
&lt;p&gt;The gRPC project is looking for feedback to improve the gRPC experience. To do this, we are running a &lt;a href=&#34;http://bit.ly/gRPC18survey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC user survey&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. We invite you to participate and provide input that will help us better plan and prioritize.&lt;/p&gt;
&lt;h2 id=&#34;grpc-user-survey&#34;&gt;gRPC User Survey&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Who&lt;/strong&gt; : If you currently use gRPC, have used gRPC in the past, or have any interest in it, we would love to hear from you.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Where&lt;/strong&gt;: Please take this 15 minute survey by Friday, 24th August.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Why&lt;/strong&gt;: gRPC is a broadly applicable project with a variety of use cases. We want to use &lt;a href=&#34;http://bit.ly/gRPC18survey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this survey&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to help us understand what works well, and what needs to be fixed.&lt;/p&gt;
&lt;h2 id=&#34;spread-the-word&#34;&gt;Spread the word!&lt;/h2&gt;
&lt;p&gt;Please help us spread the word on this survey by posting it on your social networks and sharing with your friends. Every single feedback is precious, and we would like as much of it as possible!&lt;/p&gt;
&lt;p&gt;Survey Short link: &lt;a href=&#34;http://bit.ly/gRPC18survey&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http://bit.ly/gRPC18survey&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Gracefully clean up in gRPC JUnit tests</title>
      <link>https://grpc.io/blog/graceful-cleanup-junit-tests/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/graceful-cleanup-junit-tests/</guid>
      <description>
        
        
        &lt;p&gt;It is best practice to always clean up gRPC resources such as client channels, servers, and previously attached Contexts whenever they are no longer needed.&lt;/p&gt;
&lt;p&gt;This is even true for JUnit tests, because otherwise leaked resources may not only linger in your machine forever, but also interfere with subsequent tests. A not-so-bad case is that subsequent tests can&amp;rsquo;t pass because of a leaked resource from the previous test. The worst case is that some subsequent tests pass that wouldn&amp;rsquo;t have passed at all if the previously passed test had not leaked a resource.&lt;/p&gt;
&lt;p&gt;So cleanup, cleanup, cleanup&amp;hellip; and fail the test if any cleanup is not successful.&lt;/p&gt;
&lt;p&gt;A typical example is&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; Server server&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; ManagedChannel channel&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@After&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tearDown&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// assume channel and server are not null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    channel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdownNow&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdownNow&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// fail the test if cleanup is not successful
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; channel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;awaitTermination&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;channel failed to shutdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;awaitTermination&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;server failed to shutdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or to be more graceful&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; Server server&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; ManagedChannel channel&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@After&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;tearDown&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// assume channel and server are not null
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    channel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdown&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdown&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// fail the test if cannot gracefully shutdown
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; channel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;awaitTermination&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;channel cannot be gracefully shutdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;assert&lt;/span&gt; server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;awaitTermination&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;5&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;server cannot be gracefully shutdown&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      channel&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdownNow&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      server&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;shutdownNow&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;However, having to add all this to every test so it shuts down gracefully gives you more work to do, as you need to write the shutdown boilerplate by yourself. Because of this, the gRPC testing library has helper rules to make this job less tedious.&lt;/p&gt;
&lt;p&gt;Initially, a JUnit rule &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/v1.1.x/testing/src/main/java/io/grpc/testing/GrpcServerRule.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;GrpcServerRule&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; was introduced to eliminate the shutdown boilerplate. This rule creates an In-Process server and channel at the beginning of the test, and shuts them down at the end of test automatically. However, users found this rule too restrictive in that it does not support transports other than In-Process transports, multiple channels to the server, custom channel or server builder options, and configuration inside individual test methods.&lt;/p&gt;
&lt;p&gt;A more flexible JUnit rule &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/v1.13.x/testing/src/main/java/io/grpc/testing/GrpcCleanupRule.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;GrpcCleanupRule&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; was introduced in gRPC release v1.13, which also eliminates the shutdown boilerplate. However unlike &lt;code&gt;GrpcServerRule&lt;/code&gt;, &lt;code&gt;GrpcCleanupRule&lt;/code&gt; does not create any server or channel automatically at all. Users create and start the server by themselves, and create channels by themselves, just as in plain tests. With this rule, users just need to register every resource (channel or server) that needs to be shut down at the end of test, and the rule will then shut them down gracefully automatically.&lt;/p&gt;
&lt;p&gt;You can register resources either before running test methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; GrpcCleanupRule grpcCleanup &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GrpcCleanupRule&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; String serverName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; InProcessServerBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;generateName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; Server server &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpcCleanup&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;InProcessServerBuilder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;serverName&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addService&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;myServiceImpl&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpcCleanup&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;InProcessChannelBuilder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;serverName&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;or inside each individual test method&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyTest&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@Rule&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; GrpcCleanupRule grpcCleanup &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GrpcCleanupRule&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; String serverName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; InProcessServerBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;generateName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; InProcessServerBuilder serverBuilder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; InProcessServerBuilder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;serverName&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; InProcessChannelBuilder channelBuilder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; InProcessChannelBuilder
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;forName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;serverName&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@Test&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;testFooBar&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    grpcCleanup&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	serverBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addService&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;myServiceImpl&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;start&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ManagedChannel channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpcCleanup&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;register&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    	channelBuilder&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;maxInboundMessageSize&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;1024&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now with &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/v1.13.x/testing/src/main/java/io/grpc/testing/GrpcCleanupRule.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;GrpcCleanupRule&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; you don&amp;rsquo;t need to worry about graceful shutdown of gRPC servers and channels in JUnit test. So try it out and clean up in your tests!&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC Meets .NET SDK And Visual Studio: Automatic Codegen On Build</title>
      <link>https://grpc.io/blog/grpc-dotnet-build/</link>
      <pubDate>Tue, 26 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-dotnet-build/</guid>
      <description>
        
        
        &lt;p&gt;As part of Microsoft&amp;rsquo;s move towards its cross-platform .NET offering, they have
greatly simplified the project file format, and allowed a tight integration of
third-party code generators with .NET projects. We are listening, and now proud
to introduce integrated compilation of Protocol Buffer and gRPC service
&lt;code&gt;.proto&lt;/code&gt; files in .NET C# projects starting with the version 1.17 of the
Grpc.Tools NuGet package, now available from Nuget.org.&lt;/p&gt;
&lt;p&gt;You no longer need to use hand-written scripts to generate code from &lt;code&gt;.proto&lt;/code&gt;
files: The .NET build magic handles this for you. The integrated tools locate
the proto compiler and gRPC plugin, standard Protocol Buffer imports, and track
dependencies before invoking the code generators, so that the generated C#
source files are never out of date, at the same time keeping regeneration to
the minimum required. In essence, &lt;code&gt;.proto&lt;/code&gt; files are treated as first-class
sources in a .NET C# project.&lt;/p&gt;
&lt;h2 id=&#34;a-walkthrough&#34;&gt;A Walkthrough&lt;/h2&gt;
&lt;p&gt;In this blog post, we&amp;rsquo;ll walk through the simplest and probably the most common
scenario of creating a library from &lt;code&gt;.proto&lt;/code&gt; files using the cross-platform
&lt;code&gt;dotnet&lt;/code&gt; command. We will implement essentially a clone of the &lt;code&gt;Greeter&lt;/code&gt;
library, shared by client and server projects in the &lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/csharp/Helloworld/Greeter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C# &lt;code&gt;Helloworld&lt;/code&gt; example
directory
&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;create-a-new-project&#34;&gt;Create a new project&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s start by creating a new library project.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work$ dotnet new classlib -o MyGreeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;The template &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Class library&amp;#34;&lt;/span&gt; was created successfully.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work$ &lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; MyGreeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ ls -lF
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;total &lt;span style=&#34;color:#f60&#34;&gt;12&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-rw-r-- &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; kkm kkm   &lt;span style=&#34;color:#f60&#34;&gt;86&lt;/span&gt; Nov  &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; 16:10 Class1.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;-rw-rw-r-- &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; kkm kkm  &lt;span style=&#34;color:#f60&#34;&gt;145&lt;/span&gt; Nov  &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; 16:10 MyGreeter.csproj
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;drwxrwxr-x &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; kkm kkm &lt;span style=&#34;color:#f60&#34;&gt;4096&lt;/span&gt; Nov  &lt;span style=&#34;color:#f60&#34;&gt;9&lt;/span&gt; 16:10 obj/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Observe that the &lt;code&gt;dotnet new&lt;/code&gt; command has created the file &lt;code&gt;Class1.cs&lt;/code&gt; that
we won&amp;rsquo;t need, so remove it. Also, we need some &lt;code&gt;.proto&lt;/code&gt; files to compile. For
this exercise, we&amp;rsquo;ll copy an example file &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;examples/protos/helloworld.proto&lt;/code&gt;
&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
from the gRPC distribution.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ rm Class1.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ wget -q https://raw.githubusercontent.com/grpc/grpc/master/examples/protos/helloworld.proto
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(on Windows, use &lt;code&gt;del Class1.cs&lt;/code&gt;, and, if you do not have the wget command,
just &lt;a href=&#34;https://raw.githubusercontent.com/grpc/grpc/master/examples/protos/helloworld.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open the above URL
&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
and use a &lt;em&gt;Save As&amp;hellip;&lt;/em&gt; command from your Web browser).&lt;/p&gt;
&lt;p&gt;Next, add required NuGet packages to the project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ dotnet add package Grpc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info : PackageReference &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; package &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Grpc&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.17.0&amp;#39;&lt;/span&gt; added to file &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/home/kkm/work/MyGreeter/MyGreeter.csproj&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ dotnet add package Grpc.Tools
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info : PackageReference &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; package &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Grpc.Tools&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.17.0&amp;#39;&lt;/span&gt; added to file &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/home/kkm/work/MyGreeter/MyGreeter.csproj&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ dotnet add package Google.Protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;info : PackageReference &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; package &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;Google.Protobuf&amp;#39;&lt;/span&gt; version &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;3.6.1&amp;#39;&lt;/span&gt; added to file &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;/home/kkm/work/MyGreeter/MyGreeter.csproj&amp;#39;&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;add-proto-files-to-the-project&#34;&gt;Add &lt;code&gt;.proto&lt;/code&gt; files to the project&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Next comes an important part.&lt;/strong&gt; First of all, by default, a &lt;code&gt;.csproj&lt;/code&gt; project
file automatically finds all &lt;code&gt;.cs&lt;/code&gt; files in its directory, although
&lt;a href=&#34;https://docs.microsoft.com/dotnet/core/tools/csproj#recommendation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Microsoft now recommends suppressing this globbing
behavior&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
so we too decided against globbing &lt;code&gt;.proto&lt;/code&gt; files. Thus the &lt;code&gt;.proto&lt;/code&gt;
files must be added to the project explicitly.&lt;/p&gt;
&lt;p&gt;Second of all, it is important to add a property &lt;code&gt;PrivateAssets=&amp;quot;All&amp;quot;&lt;/code&gt; to the
Grpc.Tools package reference, so that it will not be needlessly fetched by the
consumers of your new library. This makes sense, as the package only contains
compilers, code generators and import files, which are not needed outside of
the project where the &lt;code&gt;.proto&lt;/code&gt; files have been compiled. While not strictly
required in this simple walkthrough, it must be your standard practice to do
that always.&lt;/p&gt;
&lt;p&gt;So edit the file &lt;code&gt;MyGreeter.csproj&lt;/code&gt; to add the &lt;code&gt;helloworld.proto&lt;/code&gt; so that it
will be compiled, and the &lt;code&gt;PrivateAssets&lt;/code&gt; property to the Grpc.Tools package
reference. Your resulting project file should now look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;Project&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Sdk=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Microsoft.NET.Sdk&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;TargetFramework&amp;gt;&lt;/span&gt;netstandard2.0&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;/TargetFramework&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;/PropertyGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;ItemGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Google.Protobuf&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Version=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;3.6.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Grpc&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Version=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1.17.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- The Grpc.Tools package generates C# sources from .proto files during
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         project build, but is not needed by projects using the built library.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;         It&amp;#39;s IMPORTANT to add the &amp;#39;PrivateAssets=&amp;#34;All&amp;#34;&amp;#39; to this reference: --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;PackageReference&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Grpc.Tools&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Version=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1.17.0&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;PrivateAssets=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;All&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&amp;lt;!-- Explicitly include our helloworld.proto file by adding this line: --&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;Protobuf&lt;/span&gt; &lt;span style=&#34;color:#309&#34;&gt;Include=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;helloworld.proto&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;/ItemGroup&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;lt;/Project&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;build-it&#34;&gt;Build it!&lt;/h3&gt;
&lt;p&gt;At this point you can build the project with the &lt;code&gt;dotnet build&lt;/code&gt; command to
compile the &lt;code&gt;.proto&lt;/code&gt; file and the library assembly. For this walkthrough, we&amp;rsquo;ll
add a logging switch &lt;code&gt;-v:n&lt;/code&gt; to the command, so we can see that the command to
compile the &lt;code&gt;helloworld.proto&lt;/code&gt; file was in fact run. You may find it a good
idea to always do that the very first time you compile a project!&lt;/p&gt;
&lt;p&gt;Note that many output lines are omitted below, as the build output is quite
verbose.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ dotnet build -v:n
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Build started 11/9/18 5:33:44 PM.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  1:7&amp;gt;Project &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/home/kkm/work/MyGreeter/MyGreeter.csproj&amp;#34;&lt;/span&gt; on node &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Build target&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   1&amp;gt;_Protobuf_CoreCompile:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      /home/kkm/.nuget/packages/grpc.tools/1.17.0/tools/linux_x64/protoc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        --csharp_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;obj/Debug/netstandard2.0
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        --plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-grpc&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;/home/kkm/.nuget/packages/grpc.tools/1.17.0/tools/linux_x64/grpc_csharp_plugin
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        --grpc_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;obj/Debug/netstandard2.0 --proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;/home/kkm/.nuget/packages/grpc.tools/1.17.0/build/native/include
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        --proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;. --dependency_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;obj/Debug/netstandard2.0/da39a3ee5e6b4b0d_helloworld.protodep helloworld.proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     CoreCompile:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt; ... skipping long output ... &lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       MyGreeter -&amp;gt; /home/kkm/work/MyGreeter/bin/Debug/netstandard2.0/MyGreeter.dll
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Build succeeded.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If at this point you invoke the &lt;code&gt;dotnet build -v:n&lt;/code&gt; command again, &lt;code&gt;protoc&lt;/code&gt;
would not be invoked, and no C# sources would be compiled. But if you change
the &lt;code&gt;helloworld.proto&lt;/code&gt; source, then its outputs will be regenerated and then
recompiled by the C# compiler during the build. This is a regular dependency
tracking behavior that you expect from modifying any source file.&lt;/p&gt;
&lt;p&gt;Of course, you can also add &lt;code&gt;.cs&lt;/code&gt; files to the same project: It is a regular C#
project building a .NET library, after all. This is done in our &lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/csharp/RouteGuide/RouteGuide&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RouteGuide
&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
example.&lt;/p&gt;
&lt;h3 id=&#34;where-are-the-generated-files&#34;&gt;Where are the generated files?&lt;/h3&gt;
&lt;p&gt;You may wonder where the proto compiler and gRPC plugin output C# files are. By
default, they are placed in the same directory as other generated files, such
as objects (termed the &amp;ldquo;intermediate output&amp;rdquo; directory in the .NET build
parlance), under the &lt;code&gt;obj/&lt;/code&gt; directory. This is a regular practice of .NET
builds, so that autogenerated files do not clutter the working directory or
accidentally placed under source control. Otherwise, they are accessible to the
tools like the debugger. You can see other autogenerated sources in that
directory, too:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/work/MyGreeter$ find obj -name &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;*.cs&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj/Debug/netstandard2.0/MyGreeter.AssemblyInfo.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj/Debug/netstandard2.0/Helloworld.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;obj/Debug/netstandard2.0/HelloworldGrpc.cs
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;(use &lt;code&gt;dir /s obj\*.cs&lt;/code&gt; if you are following this walkthrough from a Windows
command prompt).&lt;/p&gt;
&lt;h2 id=&#34;there-is-more-to-it&#34;&gt;There Is More To It&lt;/h2&gt;
&lt;p&gt;While the simplest default behavior is adequate in many cases, there are many
ways to fine-tune your &lt;code&gt;.proto&lt;/code&gt; compilation process in a large project. We
encourage you to read the &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/csharp/BUILD-INTEGRATION.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation file BUILD-INTEGRATION.md
&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
for available options if you find that the default arrangement does not suit
your workflow. The package also extends the Visual Studio&amp;rsquo;s Properties window,
so you may set some options per file in the Visual Studio interface.&lt;/p&gt;
&lt;p&gt;&amp;ldquo;Classic&amp;rdquo; &lt;code&gt;.csproj&lt;/code&gt; projects and Mono are also supported.&lt;/p&gt;
&lt;h2 id=&#34;share-your-experience&#34;&gt;Share Your Experience&lt;/h2&gt;
&lt;p&gt;As with any initial release of a complex feature, we are thrilled to receive
your feedback. Did something not work as expected? Do you have a scenario that
is not easy to cover with the new tools? Do you have an idea how to improve the
workflow in general? Please read the documentation carefully, and then &lt;a href=&#34;https://github.com/grpc/grpc/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open an
issue&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; in the gRPC code repository on
GitHub. Your feedback is important to determine the future direction for our
build integration work!&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC ❤ Kotlin</title>
      <link>https://grpc.io/blog/kotlin-gradle-projects/</link>
      <pubDate>Tue, 19 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/kotlin-gradle-projects/</guid>
      <description>
        
        
        &lt;p&gt;Did you know that gRPC Java now has out of box support for Kotlin projects built with Gradle? &lt;a href=&#34;https://kotlinlang.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Kotlin&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a modern, statically typed language developed by JetBrains that targets the JVM and Android. It is generally easy for Kotlin programs to interoperate with existing Java libraries. To improve this experience further, we have added support to the &lt;a href=&#34;https://github.com/google/protobuf-gradle-plugin/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf-gradle-plugin&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; so that the generated Java libraries are automatically picked up by Kotlin. You can now add the protobuf-gradle-plugin to your Kotlin project, and use gRPC just like you would with a typical Java project.&lt;/p&gt;


&lt;div class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Native Kotlin support&lt;/h4&gt;

    Looking for native Kotlin support of gRPC? See &lt;a href=&#34;https://grpc.io/blog/kotlin-meet-grpc/&#34;&gt;Kotlin, meet gRPC&lt;/a&gt;.

&lt;/div&gt;

&lt;p&gt;The following examples show you how to configure a project for a JVM application and an Android application using Kotlin.&lt;/p&gt;
&lt;h3 id=&#34;kotlin-grpc-client-and-server&#34;&gt;Kotlin gRPC client and server&lt;/h3&gt;
&lt;p&gt;The full example can be found &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/v1.29.0/examples/example-kotlin&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Configuring gRPC for a Kotlin project is the same as configuring it for a Java project.&lt;/p&gt;
&lt;p&gt;Below is a snippet of the example project&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt; highlighting some Kotlin related sections:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;kotlin&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.google.protobuf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Generate IntelliJ IDEA&amp;#39;s .idea &amp;amp; .iml project files.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// protobuf-gradle-plugin automatically registers *.proto and the gen output files
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// to IntelliJ as sources.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// For best results, install the Protobuf and Kotlin plugins for IntelliJ.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;idea&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buildscript &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ext&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;kotlin_version&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.2.21&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  repositories &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    mavenCentral&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dependencies &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    classpath &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.google.protobuf:protobuf-gradle-plugin:0.8.5&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    classpath &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  compile &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The rest of the projects dep are added below, refer to example URL
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The standard protobuf block, same as normal gRPC Java projects
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;protobuf &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  protoc &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt; artifact &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.google.protobuf:protoc:3.5.1-1&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    plugins &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      grpc &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt; artifact &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;io.grpc:protoc-gen-grpc-java:${grpcVersion}&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    generateProtoTasks &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      all&lt;span style=&#34;color:#555&#34;&gt;()*.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;plugins&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt; grpc &lt;span style=&#34;color:#555&#34;&gt;{}&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now Kotlin source files can use the proto generated messages and gRPC stubs. By default, Kotlin sources should be placed in &lt;code&gt;src/main/kotlin&lt;/code&gt; and &lt;code&gt;src/test/kotlin&lt;/code&gt;. If needed, run &lt;code&gt;./gradlew generateProto generateTestProto&lt;/code&gt; and refresh IntelliJ for the generated sources to appear in the IDE. Finally, run &lt;code&gt;./gradlew installDist&lt;/code&gt; to build the project, and use &lt;code&gt;./build/install/examples/bin/hello-world-client&lt;/code&gt; or &lt;code&gt;./build/install/examples/bin/hello-world-server&lt;/code&gt; to run the example.&lt;/p&gt;
&lt;p&gt;You can read more about configuring Kotlin &lt;a href=&#34;https://kotlinlang.org/docs/reference/using-gradle.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;kotlin-android-grpc-application&#34;&gt;Kotlin Android gRPC application&lt;/h3&gt;
&lt;p&gt;The full example can be found &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/v1.29.0/examples/example-kotlin/android/helloworld&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Configuring gRPC for a Kotlin Android project is the same as configuring it for a normal Android project.&lt;/p&gt;
&lt;p&gt;In the top level &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;buildscript &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ext&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;kotlin_version&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;1.2.21&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  repositories &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    google&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    jcenter&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  dependencies &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    classpath &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.android.tools.build:gradle:3.0.1&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    classpath &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;com.google.protobuf:protobuf-gradle-plugin:0.8.5&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    classpath &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;allprojects &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  repositories &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    google&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    jcenter&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;And in the app module&amp;rsquo;s &lt;code&gt;build.gradle&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-groovy&#34; data-lang=&#34;groovy&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.android.application&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;kotlin-android&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;kotlin-android-extensions&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;apply &lt;span style=&#34;color:#99f&#34;&gt;plugin:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;com.google.protobuf&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;repositories &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  mavenCentral&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;dependencies &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  compile &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// refer to full example for remaining deps
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;protobuf &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The normal gRPC configuration for Android goes here
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;android &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Android Studio 3.1 does not automatically pick up &amp;#39;src/main/kotlin&amp;#39; as source files
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  sourceSets &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;java&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;srcDirs&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;src/main/kotlin&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Just like the non-Android project, run &lt;code&gt;./gradlew generateProto generateProto&lt;/code&gt; to run the proto code generator and &lt;code&gt;./gradlew build&lt;/code&gt; to build the project.&lt;/p&gt;
&lt;p&gt;Finally, test out the Android app by opening the project in Android Studio and selecting &lt;code&gt;Run &amp;gt; Run &#39;app&#39;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/kotlin-project-android-app.png&#34; alt=&#34;Kotlin Android app example&#34; id=&#34;kotlin-project-android-app&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-kotlin-project-android-app&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-kotlin-project-android-app&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/kotlin-project-android-app.png&#34; alt=&#34;Kotlin Android app example&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;We are excited about improving the gRPC experience for Kotlin developers. Please add enhancement ideas or bugs to the &lt;a href=&#34;https://github.com/google/protobuf-gradle-plugin/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf-gradle-plugin issue tracker&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or the &lt;a href=&#34;https://github.com/grpc/grpc-java/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-java issue tracker&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: So You Want to Optimize gRPC - Part 2</title>
      <link>https://grpc.io/blog/optimizing-grpc-part-2/</link>
      <pubDate>Mon, 16 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/optimizing-grpc-part-2/</guid>
      <description>
        
        
        &lt;p&gt;How fast is gRPC?  Pretty fast if you understand how modern clients and servers are built.  In
&lt;a href=&#34;https://grpc.io/blog/optimizing-grpc-part-1/&#34;&gt;part 1&lt;/a&gt;, I showed how to get an easy &lt;strong&gt;60%&lt;/strong&gt; improvement.  In this
post I show how to get a &lt;strong&gt;10000%&lt;/strong&gt; improvement.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;As in &lt;a href=&#34;https://grpc.io/blog/optimizing-grpc-part-1/&#34;&gt;part 1&lt;/a&gt;, we will start with an existing, Java based,
key-value service.  The service will offer concurrent access for creating, reading, updating,
and deleting keys and values.  All the code can be seen
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/tree/03-nonblocking-server&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; if you want to try
it out.&lt;/p&gt;
&lt;h2 id=&#34;server-concurrency&#34;&gt;Server Concurrency&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at the &lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f422b1b6e7c69f8c07f96ed4ddba64757242352c/src/main/java/io/grpc/examples/KvService.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KvService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
class.  This service handles the RPCs sent by the client, making sure that none of them
accidentally corrupt the state of storage.  To ensure this, the service uses the &lt;code&gt;synchronized&lt;/code&gt;
keyword to ensure only one RPC is active at a time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; store &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CreateRequest request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  simulateWork&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;WRITE_DELAY_MILLIS&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;putIfAbsent&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;While this code is thread safe, it comes at a high price: only one RPC can ever be active!  We
need some way of allowing multiple operations to happen safely at the same time.  Otherwise,
the program can&amp;rsquo;t take advantage of all the available processors.&lt;/p&gt;
&lt;h3 id=&#34;breaking-the-lock&#34;&gt;Breaking the Lock&lt;/h3&gt;
&lt;p&gt;To solve this, we need to know a little more about the &lt;em&gt;semantics&lt;/em&gt; of our RPCs.  The more we know
about how the RPCs are supposed to work, the more optimizations we can make.  For a key-value
service, we notice that &lt;em&gt;operations to different keys don&amp;rsquo;t interfere with each other&lt;/em&gt;.  When
we update key &amp;lsquo;foo&amp;rsquo;, it has no bearing on the value stored for key &amp;lsquo;bar&amp;rsquo;.  But, our server is
written such that operations to any key must be synchronized with respect to each other.  If we
could make operations to different keys happen concurrently, our server could handle a lot more
load.&lt;/p&gt;
&lt;p&gt;With the idea in place, we need to figure out how to modify the server.  The
&lt;code&gt;synchronized&lt;/code&gt; keyword causes Java to acquire a lock on &lt;code&gt;this&lt;/code&gt;, which is the instance of
&lt;code&gt;KvService&lt;/code&gt;.  The lock is acquired when the &lt;code&gt;create&lt;/code&gt; method is entered, and released on return.
The reason we need synchronization is to protect the &lt;code&gt;store&lt;/code&gt; Map.  Since it is implemented as a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Hash_table&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;HashMap&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, modifications to it change the internal
arrays.  Because the internal state of the &lt;code&gt;HashMap&lt;/code&gt; will be corrupted if not properly
synchronized, we can&amp;rsquo;t just remove the synchronization on the method.&lt;/p&gt;
&lt;p&gt;However, Java offers a solution here: &lt;code&gt;ConcurrentHashMap&lt;/code&gt;.  This class offers the ability to
safely access the contents of the map concurrently.  For example, in our usage we want to check
if a key is present.   If not present, we want to add it, else we want to return an error.  The
&lt;code&gt;putIfAbsent&lt;/code&gt; method atomically checks if a value is present, adds it if not, and tells us if
it succeeded.&lt;/p&gt;
&lt;p&gt;Concurrent maps provide stronger guarantees about the safety of &lt;code&gt;putIfAbsent&lt;/code&gt;, so we can swap the
&lt;code&gt;HashMap&lt;/code&gt; to a &lt;code&gt;ConcurrentHashMap&lt;/code&gt; and remove &lt;code&gt;synchronized&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; ConcurrentMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; store &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ConcurrentHashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CreateRequest request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  simulateWork&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;WRITE_DELAY_MILLIS&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;putIfAbsent&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;if-at-first-you-dont-succeed&#34;&gt;If at First You Don&amp;rsquo;t Succeed&lt;/h3&gt;
&lt;p&gt;Updating &lt;code&gt;create&lt;/code&gt; was pretty easy.  Doing the same for &lt;code&gt;retrieve&lt;/code&gt; and &lt;code&gt;delete&lt;/code&gt; is easy too.
However, the &lt;code&gt;update&lt;/code&gt; method is a little trickier.  Let&amp;rsquo;s take a look at what it&amp;rsquo;s doing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UpdateRequest request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;UpdateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer newValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  simulateWork&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;WRITE_DELAY_MILLIS&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer oldValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;oldValue &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;NOT_FOUND&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; oldValue&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; newValue&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;UpdateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Updating a key to a new value needs two interactions with the &lt;code&gt;store&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Check to see if the key exists at all.&lt;/li&gt;
&lt;li&gt;Update the previous value to the new value.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Unfortunately &lt;code&gt;ConcurrentMap&lt;/code&gt; doesn&amp;rsquo;t have a straightforward method to do this.  Since we may not
be the only ones modifying the map, we need to handle the possibility that our assumptions
have changed.  We read the old value out, but by the time we replace it, it may have been deleted.&lt;/p&gt;
&lt;p&gt;To reconcile this, let&amp;rsquo;s retry if &lt;code&gt;replace&lt;/code&gt; fails.   It returns true if the replace
was successful.  (&lt;code&gt;ConcurrentMap&lt;/code&gt; asserts that the operations will not corrupt the internal
structure, but doesn&amp;rsquo;t say that they will succeed!)  We will use a do-while loop:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;update&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    UpdateRequest request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;UpdateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  ByteBuffer oldValue&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;do&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    oldValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;oldValue &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;NOT_FOUND&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(!&lt;/span&gt;store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;replace&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; oldValue&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; newValue&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;UpdateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The code wants to fail if it ever sees null, but never if there is a non-null previous value.  One
thing to note is that if &lt;em&gt;another&lt;/em&gt; RPC modifies the value between the &lt;code&gt;store.get()&lt;/code&gt; call and the
&lt;code&gt;store.replace()&lt;/code&gt; call, it will fail.  This is a non-fatal error for us, so we will just try again.
Once it has successfully put the new value in, the service can respond back to the user.&lt;/p&gt;
&lt;p&gt;There is one other possibility that could happen: two RPCs could update the same value and
overwrite each other&amp;rsquo;s work.  While this may be okay for some applications, it would not be
suitable for APIs that provide transactionality.  It is out of scope for this post to show how to
fix this, but be aware it can happen.&lt;/p&gt;
&lt;h2 id=&#34;measuring-the-performance&#34;&gt;Measuring the Performance&lt;/h2&gt;
&lt;p&gt;In the last post, we modified the client to be asynchronous and use the gRPC ListenableFuture API.
To avoid running out of memory, the client was modified to have at most &lt;strong&gt;100&lt;/strong&gt; active RPCs at a
time.  As we now see from the server code, performance was bottlenecked on acquiring locks.
Since we have removed those, we expect to see a 100x improvement.  The same amount of work is done
per RPC, but a lot more are happening at the same time.  Let&amp;rsquo;s see if our hypothesis holds:&lt;/p&gt;
&lt;p&gt;Before:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew installDist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;time&lt;/span&gt; ./build/install/kvstore/bin/kvstore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Apr 16, &lt;span style=&#34;color:#f60&#34;&gt;2018&lt;/span&gt; 10:38:42 AM io.grpc.examples.KvRunner runClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Did 24.067 RPCs/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	1m0.886s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m9.340s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m1.660s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;After:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-node&#34; data-lang=&#34;node&#34;&gt;Apr 16, 2018 10:36:48 AM io.grpc.examples.KvRunner runClient
INFO: Did 2,449.8 RPCs/s

real	1m0.968s
user	0m52.184s
sys	0m20.692s
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Wow!  From 24 RPCs per second to 2,400 RPCs per second.  And we didn&amp;rsquo;t have to change our API or
our client.  This is why understanding your code and API semantics is important.  By exploiting the
properties of the key-value API, namely the independence of operations on different keys, the code
is now much faster.&lt;/p&gt;
&lt;p&gt;One noteworthy artifact of this code is the &lt;code&gt;user&lt;/code&gt; timing in the results.  Previously the user time
was only 9 seconds, meaning that the CPU was active only 9 of the 60 seconds the code was running.
Afterwards, the usage went up by more than 5x to 52 seconds.  The reason is that more CPU cores are
active.  The &lt;code&gt;KvServer&lt;/code&gt; is simulating work by sleeping for a few milliseconds.  In a real
application, it would be doing useful work and not have such a dramatic change.  Rather than
scaling per the number of RPCs, it would scale per the number of cores.  Thus, if your machine had
12 cores, you would expect to see a 12x improvement.  Still not bad though!&lt;/p&gt;
&lt;h3 id=&#34;more-errors&#34;&gt;More Errors&lt;/h3&gt;
&lt;p&gt;If you run this code yourself, you will see a lot more log spam in the form:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nocode&#34; data-lang=&#34;nocode&#34;&gt;Apr 16, 2018 10:38:40 AM io.grpc.examples.KvClient$3 onFailure
INFO: Key not found
io.grpc.StatusRuntimeException: NOT_FOUND
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The reason is that the new version of the code makes API level race conditions more apparent.
With 100 times as many RPCs happening, the chance of updates and deletes colliding with each other
is more likely.  To solve this we will need to modify the API definition.   Stay tuned for the next
post showing how to fix this.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are a lot of opportunities to optimize your gRPC code.  To take advantage of these, you
need to understand what your code is doing.  This post shows how to convert a lock-based service into
a low-contention, lock-free service.  Always make sure to measure before and after your changes.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: So You Want to Optimize gRPC - Part 1</title>
      <link>https://grpc.io/blog/optimizing-grpc-part-1/</link>
      <pubDate>Tue, 06 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/optimizing-grpc-part-1/</guid>
      <description>
        
        
        &lt;p&gt;A common question with gRPC is how to make it fast.  The gRPC library offers users access to high
performance RPCs, but it isn&amp;rsquo;t always clear how to achieve this.  Because this question is common
enough I thought I would try to show my thought process when tuning programs.&lt;/p&gt;
&lt;h2 id=&#34;setup&#34;&gt;Setup&lt;/h2&gt;
&lt;p&gt;Consider a basic key-value service that is used by multiple other programs.  The service needs to
be safe for concurrent access in case multiple updates happen at the same time.  It needs to be
able to scale up to use the available hardware.   Lastly, it needs to be fast.  gRPC is a perfect
fit for this type of service; let&amp;rsquo;s look at the best way to implement it.&lt;/p&gt;
&lt;p&gt;For this blog post, I have written an example
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;client and server&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; using gRPC Java. The program is
split into three main classes, and a protobuf file describing the API:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/01-start/src/main/java/io/grpc/examples/KvClient.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KvClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is a simulated user of the key value system.   It randomly creates, retrieves, updates,
and deletes keys and values.  The size of keys and values it uses is also randomly decided
using an &lt;a href=&#34;https://en.wikipedia.org/wiki/Exponential_distribution&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;exponential distribution&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/01-start/src/main/java/io/grpc/examples/KvService.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KvService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is an implementation of the key value service.  It is installed by the gRPC Server to handle
the requests issued by the client.  To simulate storing the keys and values on disk, it adds
short sleeps while handling the request.  Reads and writes will experience a 10 and 50
millisecond delay to make the example act more like a persistent database.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/01-start/src/main/java/io/grpc/examples/KvRunner.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;KvRunner&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
orchestrates the interaction between the client and the server.  It is the main entry point,
starting both the client and server in process, and waiting for the the client to execute its
work.  The runner does work for 60 seconds and then records how many RPCs were completed.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/01-start/src/main/proto/kvstore.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;kvstore.proto&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
is the protocol buffer definition of our service.  It describes exactly what clients can expect
from the service. For the sake of simplicity, we will use Create, Retrieve, Update, and Delete
as the operations (commonly known as CRUD).  These operations work with keys and values made up
of arbitrary bytes.  While they are somewhat REST like, we reserve the right to diverge and
add more complex operations in the future.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol buffers&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (protos) aren&amp;rsquo;t required to use
gRPC, they are a very convenient way to define service interfaces and generate client and server
code. The generated code acts as glue code between the application logic and the core gRPC
library. We refer to the code called by a gRPC client the &lt;em&gt;stub&lt;/em&gt;.&lt;/p&gt;
&lt;h2 id=&#34;starting-point&#34;&gt;Starting Point&lt;/h2&gt;
&lt;h3 id=&#34;client&#34;&gt;Client&lt;/h3&gt;
&lt;p&gt;Now that we know what the program &lt;em&gt;should&lt;/em&gt; do, we can start looking at how the program performs.
As mentioned above, the client makes random RPCs.  For example, here is the code that makes the
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f422b1b6e7c69f8c07f96ed4ddba64757242352c/src/main/java/io/grpc/examples/KvClient.java#L80&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;creation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
request:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doCreate&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;KeyValueServiceBlockingStub stub&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteString key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; createRandomKey&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CreateResponse res &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        CreateRequest&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;randomBytes&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MEAN_VALUE_SIZE&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(!&lt;/span&gt;res&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Invalid response&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;StatusRuntimeException e&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getStatus&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCode&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Code&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      knownKeys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      logger&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Key already existed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throw&lt;/span&gt; e&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A random key is created, along with a random value.  The request is sent to the server, and the
client waits for the response.  When the response is returned, the code checks that it is as
expected, and if not, throws an exception.  While the keys are chosen randomly, they need to be
unique, so we need to make sure that each key isn&amp;rsquo;t already in use.  To address this, the code
keeps track of keys it has created, so as not to create the same key twice.  However, it&amp;rsquo;s
possible that another client already created a particular key, so we log it and move on.
Otherwise, an exception is thrown.&lt;/p&gt;
&lt;p&gt;We use the &lt;strong&gt;blocking&lt;/strong&gt; gRPC API here, which issues a requests and waits for a response.
This is the simplest gRPC stub, but it blocks the thread while running.  This means that at most
&lt;strong&gt;one&lt;/strong&gt; RPC can be in progress at a time from the client&amp;rsquo;s point of view.&lt;/p&gt;
&lt;h3 id=&#34;server&#34;&gt;Server&lt;/h3&gt;
&lt;p&gt;On the server side, the request is received by the
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f422b1b6e7c69f8c07f96ed4ddba64757242352c/src/main/java/io/grpc/examples/KvService.java#L34&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;service handler&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; Map&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ByteBuffer&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; store &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    CreateRequest request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; responseObserver&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteBuffer value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asReadOnlyByteBuffer&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  simulateWork&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;WRITE_DELAY_MILLIS&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;store&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;putIfAbsent&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The service extracts the key and value as &lt;code&gt;ByteBuffer&lt;/code&gt;s from the request.  It acquires the lock
on the service itself to make sure concurrent requests don&amp;rsquo;t corrupt the storage.  After
simulating the disk access of a write, it stores it in the &lt;code&gt;Map&lt;/code&gt; of keys to values.&lt;/p&gt;
&lt;p&gt;Unlike the client code, the service handler is &lt;strong&gt;non-blocking&lt;/strong&gt;, meaning it doesn&amp;rsquo;t return a
value like a function call would.  Instead, it invokes &lt;code&gt;onNext()&lt;/code&gt; on the &lt;code&gt;responseObserver&lt;/code&gt; to
send the response back to the client.  Note that this call is also non-blocking, meaning that
the message may not yet have been sent.  To indicate we are done with the message, &lt;code&gt;onCompleted()&lt;/code&gt;
is called.&lt;/p&gt;
&lt;h3 id=&#34;performance&#34;&gt;Performance&lt;/h3&gt;
&lt;p&gt;Since the code is safe and correct, let&amp;rsquo;s see how it performs.  For my measurement I&amp;rsquo;m using my
Ubuntu system with a 12 core processor and 32 GB of memory.  Let&amp;rsquo;s build and run the code:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew installDist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;time&lt;/span&gt; ./build/install/kvstore/bin/kvstore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Feb 26, &lt;span style=&#34;color:#f60&#34;&gt;2018&lt;/span&gt; 1:10:07 PM io.grpc.examples.KvRunner runClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Starting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Feb 26, &lt;span style=&#34;color:#f60&#34;&gt;2018&lt;/span&gt; 1:11:07 PM io.grpc.examples.KvRunner runClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Did 16.55 RPCs/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	1m0.927s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m10.688s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m1.456s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Yikes!  For such a powerful machine, it can only do about 16 RPCs per second.  It hardly used any
of our CPU, and we don&amp;rsquo;t know how much memory it was using.  We need to figure out why it&amp;rsquo;s so
slow.&lt;/p&gt;
&lt;h2 id=&#34;optimization&#34;&gt;Optimization&lt;/h2&gt;
&lt;h3 id=&#34;analysis&#34;&gt;Analysis&lt;/h3&gt;
&lt;p&gt;Let&amp;rsquo;s understand what the program is doing before we make any changes.  When optimizing, we need
to know where the code is spending its time in order to know what we can optimize.  At this early
stage, we don&amp;rsquo;t need profiling tools yet, we can just reason about the program.&lt;/p&gt;
&lt;p&gt;The client is started and serially issues RPCs for about a minute.  Each iteration, it &lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f422b1b6e7c69f8c07f96ed4ddba64757242352c/src/main/java/io/grpc/examples/KvClient.java#L49&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;randomly
decides&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
what operation to do:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doClientWork&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;AtomicBoolean done&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Random random &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Random&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  KeyValueServiceBlockingStub stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; KeyValueServiceGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBlockingStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(!&lt;/span&gt;done&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Pick a random CRUD action to take.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; command &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; random&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;nextInt&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;4&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;command &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; 0&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      doCreate&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;stub&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;continue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* ... */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rpcCount&lt;span style=&#34;color:#555&#34;&gt;++;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means that &lt;strong&gt;at most one RPC can be active at any time&lt;/strong&gt;.  Each RPC has to wait for the
previous one to complete.  And how long does each RPC take to complete?  From reading the server
code, most of the operations are doing a write which takes about 50 milliseconds.  At top
efficiency, the most operations this code can do per second is about 20:&lt;/p&gt;
&lt;p&gt;20 queries = 1000ms / (50 ms / query)&lt;/p&gt;
&lt;p&gt;Our code can do about 16 queries in a second, so that seems about right.  We can spot check this
assumption by looking at the output of the &lt;code&gt;time&lt;/code&gt; command used to run the code.  The server goes
to sleep when running queries in the
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f422b1b6e7c69f8c07f96ed4ddba64757242352c/src/main/java/io/grpc/examples/KvService.java#L88&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;simulateWork&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
method. This implies that the program should be mostly idle while waiting for the RPCs to
complete.&lt;/p&gt;
&lt;p&gt;We can confirm this is the case by looking at the &lt;code&gt;real&lt;/code&gt; and &lt;code&gt;user&lt;/code&gt; times of the command above.
They say that the amount of &lt;em&gt;wall clock&lt;/em&gt; time was 1 minute, while the amount of &lt;em&gt;cpu&lt;/em&gt; time
was 10 seconds.  My powerful, multicore CPU was only busy 16% of the time.  Thus, if we could
get the program to do more work during that time, it seems like we could get more RPCs complete.&lt;/p&gt;
&lt;h3 id=&#34;hypothesis&#34;&gt;Hypothesis&lt;/h3&gt;
&lt;p&gt;Now we can state clearly what we think is the problem, and propose a solution.  One way to speed
up programs is to make sure the CPU is not idling.  To do this, we issue work concurrently.&lt;/p&gt;
&lt;p&gt;In gRPC Java, there are three types of stubs: blocking, non-blocking, and listenable future.  We
have already seen the blocking stub in the client, and the non-blocking stub in the server.  The
listenable future API is a compromise between the two, offering both blocking and non-blocking
like behavior.  As long as we don&amp;rsquo;t block a thread waiting for work to complete, we can start
new RPCs without waiting for the old ones to complete.&lt;/p&gt;
&lt;h3 id=&#34;experiment&#34;&gt;Experiment&lt;/h3&gt;
&lt;p&gt;To test our hypothesis, let&amp;rsquo;s modify the client code to use the listenable future API.  This
means that we need to think more about concurrency in our code.  For example, when keeping track
of known keys client-side, we need to safely read, modify, and write the keys.  We also need to
make sure that in case of an error, we stop making new RPCs (proper error handling will be covered
in a future post).  Lastly, we need to update the number of RPCs made concurrently, since the
update could happen in another thread.&lt;/p&gt;
&lt;p&gt;Making all these changes increases the complexity of the code.  This is a trade off you will need
to consider when optimizing your code.  In general, code simplicity is at odds with optimization.
Java is not known for being terse.  That said, the code below is still readable, and program flow
is still roughly from top to bottom in the function.  Here is the
&lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/f0113912c01ac4ea48a80bb7a4736ddcb3f21e24/src/main/java/io/grpc/examples/KvClient.java#L92&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doCreate()&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
method revised:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doCreate&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;KeyValueServiceFutureStub stub&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; AtomicReference&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Throwable&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; error&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteString key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; createRandomKey&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ListenableFuture&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      CreateRequest&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;randomBytes&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MEAN_VALUE_SIZE&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addListener&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; rpcCount&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;incrementAndGet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(),&lt;/span&gt; MoreExecutors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  Futures&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addCallback&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;res&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FutureCallback&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;onSuccess&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse result&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(!&lt;/span&gt;result&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getDefaultInstance&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;compareAndSet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Invalid response&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;knownKeys&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        knownKeys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;onFailure&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Throwable t&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      Status status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;fromThrowable&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCode&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; Code&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ALREADY_EXISTS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;synchronized&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;knownKeys&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          knownKeys&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;remove&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        logger&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;log&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Level&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;INFO&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Key already existed&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; t&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        error&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;compareAndSet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; t&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The stub has been modified to be a &lt;code&gt;KeyValueServiceFutureStub&lt;/code&gt;, which produces a &lt;code&gt;Future&lt;/code&gt; when
called instead of the response itself.  gRPC Java uses an extension of this called &lt;code&gt;ListenableFuture&lt;/code&gt;,
which allows adding a callback when the future completes.  For the sake of this program, we are
not as concerned with getting the response.  Instead we care more if the RPC succeeded or not.
With that in mind, the code mainly checks for errors rather than processing the response.&lt;/p&gt;
&lt;p&gt;The first change made is how the number of RPCs is recorded.  Instead of incrementing the counter
outside of the main loop, we increment it when the RPC completes.&lt;/p&gt;
&lt;p&gt;Next, we create a new object
for each RPC which handles both the success and failure cases.  Because &lt;code&gt;doCreate()&lt;/code&gt; will already
be completed by the time RPC callback is invoked, we need a way to propagate errors other than
by throwing.  Instead, we try to update an reference atomically.  The main loop will occasionally
check if an error has occurred and stop if there is a problem.&lt;/p&gt;
&lt;p&gt;Lastly, the code is careful to only add a key to &lt;code&gt;knownKeys&lt;/code&gt; when the RPC is actually complete,
and only remove it when known to have failed.  We synchronize on the variable to make sure two
threads don&amp;rsquo;t conflict.  Note: although the access to &lt;code&gt;knownKeys&lt;/code&gt; is threadsafe, there are still
&lt;a href=&#34;https://en.wikipedia.org/wiki/Race_condition&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;race conditions&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  It is possible that one thread
could read from &lt;code&gt;knownKeys&lt;/code&gt;, a second thread delete from &lt;code&gt;knownKeys&lt;/code&gt;, and then the first thread
issue an RPC using the first key.  Synchronizing on the keys only ensures that it is consistent,
not that it is correct.  Fixing this properly is outside of the scope of this post, so instead we
just log the event and move on.  You will see a few such log statements if you run this program.&lt;/p&gt;
&lt;h3 id=&#34;running-the-code&#34;&gt;Running the Code&lt;/h3&gt;
&lt;p&gt;If you start up this program and run it, you&amp;rsquo;ll notice that it doesn&amp;rsquo;t work:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;WARNING: An exception was thrown by io.grpc.netty.NettyClientStream&lt;span style=&#34;color:#033&#34;&gt;$Sink$1&lt;/span&gt;.operationComplete&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java.lang.OutOfMemoryError: unable to create new native thread
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at java.lang.Thread.start0&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Native Method&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	at java.lang.Thread.start&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Thread.java:714&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What?!  Why would I show you code that fails?  The reason is that in real life making a change often
doesn&amp;rsquo;t work on the first try.  In this case, the program ran out of memory.  Odd things begin to
happen when a program runs out of memory.  Often, the root cause is hard to find, and red herrings
abound.  A confusing error message says &amp;ldquo;unable to create new native thread&amp;rdquo;
even though we didn&amp;rsquo;t create any new threads in our code.  Experience is very helpful in fixing
these problems rather than debugging.  Since I have debugged many OOMs, I happen to know Java tells
us about the straw that broke the camel&amp;rsquo;s back.  Our program started using way more memory, but the
final allocation that failed happened, by chance, to be in thread creation.&lt;/p&gt;
&lt;p&gt;So what happened?  &lt;em&gt;There was no pushback to starting new RPCs.&lt;/em&gt;  In the blocking version, a new
RPC couldn&amp;rsquo;t start until the last one completed.  While slow, it also prevented us from creating
tons of RPCs that we didn&amp;rsquo;t have memory for.  We need to account for this in the listenable
future version.&lt;/p&gt;
&lt;p&gt;To solve this, we can apply a self-imposed limit on the number of active RPCs.  Before starting a
new RPC, we will try to acquire a permit.  If we get one, the RPC can start.  If not, we will wait
until one is available.  When an RPC completes (either in success or failure), we return the
permit.  To &lt;a href=&#34;https://github.com/carl-mastrangelo/kvstore/blob/02-future-client/src/main/java/io/grpc/examples/KvClient.java#L94&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;accomplish&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
this, we will using a &lt;code&gt;Semaphore&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; Semaphore limiter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Semaphore&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;100&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;doCreate&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;KeyValueServiceFutureStub stub&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; AtomicReference&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Throwable&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; error&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  limiter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;acquire&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ByteString key &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; createRandomKey&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ListenableFuture&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;CreateResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; res &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      CreateRequest&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;randomBytes&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;MEAN_VALUE_SIZE&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  res&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addListener&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;  &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    rpcCount&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;incrementAndGet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    limiter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;release&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;},&lt;/span&gt; MoreExecutors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;directExecutor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* ... */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the code runs successfully, and doesn&amp;rsquo;t run out of memory.&lt;/p&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;p&gt;Building and running the code again looks a lot better:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;./gradlew installDist
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;time&lt;/span&gt; ./build/install/kvstore/bin/kvstore
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Feb 26, &lt;span style=&#34;color:#f60&#34;&gt;2018&lt;/span&gt; 2:40:47 PM io.grpc.examples.KvRunner runClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Starting
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Feb 26, &lt;span style=&#34;color:#f60&#34;&gt;2018&lt;/span&gt; 2:41:47 PM io.grpc.examples.KvRunner runClient
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Did 24.283 RPCs/s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;real	1m0.923s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;user	0m12.772s
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;sys	0m1.572s
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Our code does &lt;strong&gt;46%&lt;/strong&gt; more RPCs per second than previously.  We can also see that we used about 20%
more CPU than previously.  As we can see our hypothesis turned out to be correct and the fix
worked.  All this happened without making any changes to the server.  Also, we were able to
measure without using any special profilers or tracers.&lt;/p&gt;
&lt;p&gt;Do the numbers make sense?  We expect to issue mutation (create, update, and delete) RPCs each
about with 1/4 probability.  Reads are also issue 1/4 of the time, but don&amp;rsquo;t take as long.  The
mean RPC time should be about the weighted average RPC time:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-nocode&#34; data-lang=&#34;nocode&#34;&gt;  .25 * 50ms (create)
  .25 * 10ms (retrieve)
  .25 * 50ms (update)
 +.25 * 50ms (delete)
------------
        40ms
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;At 40ms on average per RPC, we would expect the number of RPCs per second to be:&lt;/p&gt;
&lt;p&gt;25 queries = 1000ms / (40 ms / query)&lt;/p&gt;
&lt;p&gt;That&amp;rsquo;s approximately what we see with the new code.  The server is still serially handling
requests, so it seems like we have more work to do in the future.  But for now, our optimizations
seem to have worked.&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;There are a lot of opportunities to optimize your gRPC code.  To take advantage of these, you
need to understand what your code is doing, and what your code is supposed to do.  This post shows
the very basics of how to approach and think about optimization.  Always make sure to measure
before and after your changes, and use these measurements to guide your optimizations.&lt;/p&gt;
&lt;p&gt;In &lt;a href=&#34;https://grpc.io/blog/optimizing-grpc-part-2/&#34;&gt;Part 2&lt;/a&gt;, we will continue optimizing the server part of the code.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC and Deadlines</title>
      <link>https://grpc.io/blog/deadlines/</link>
      <pubDate>Mon, 26 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/deadlines/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;TL;DR: Always set a deadline&lt;/strong&gt;. This post explains why we recommend being deliberate about setting deadlines, with useful code snippets to show you how.&lt;/p&gt;
&lt;p&gt;When you use gRPC, the gRPC library takes care of communication, marshalling, unmarshalling, and deadline enforcement. Deadlines allow gRPC clients to specify how long they are willing to wait for an RPC to complete before the RPC is terminated with the error &lt;code&gt;DEADLINE_EXCEEDED&lt;/code&gt;. By default this deadline is a very large number, dependent on the language implementation. How deadlines are specified is also language-dependent. Some language APIs work in terms of a &lt;strong&gt;deadline&lt;/strong&gt;, a fixed point in time by which the RPC should complete. Others use a &lt;strong&gt;timeout&lt;/strong&gt;, a duration of time after which the RPC times out.&lt;/p&gt;
&lt;p&gt;In general, when you don&amp;rsquo;t set a deadline, resources will be held for all in-flight requests, and all requests can potentially reach the maximum timeout. This puts the service at risk of running out of resources, like memory, which would increase the latency of the service, or could crash the entire process in the worst case.&lt;/p&gt;
&lt;p&gt;To avoid this, services should specify the longest default deadline they technically support, and clients should wait until the response is no longer useful to them. For the service this can be as simple as providing a comment in the .proto file. For the client this involves setting useful deadlines.&lt;/p&gt;
&lt;p&gt;There is no single answer to &amp;ldquo;What is a good deadline/timeout value?&amp;rdquo;. Your service might be as simple as the &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/examples/protos/helloworld.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Greeter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; in our quick start guides, in which case 100 ms would be fine. Your service might be as complex as a globally-distributed and strongly consistent database. The deadline for a client query will be different from how long they should wait for you to drop their table.&lt;/p&gt;
&lt;p&gt;So what do you need to consider to make an informed choice of deadline? Factors to take into account include the end to end latency of the whole system, which RPCs are serial, and which can be made in parallel. You should to be able to put numbers on it, even if it&amp;rsquo;s a rough calculation. Engineers need to understand the service and then set a deliberate deadline for the RPCs between clients and servers.&lt;/p&gt;
&lt;p&gt;In gRPC, both the client and server make their own independent and local determination about whether the remote procedure call (RPC) was successful. This means their conclusions may not match! An RPC that finished successfully on the server side can fail on the client side. For example, the server can send the response, but the reply can arrive at the client after their deadline has expired. The client will already have terminated with the status error &lt;code&gt;DEADLINE_EXCEEDED&lt;/code&gt;. This should be checked for and managed at the application level.&lt;/p&gt;
&lt;h2 id=&#34;setting-a-deadline&#34;&gt;Setting a deadline&lt;/h2&gt;
&lt;p&gt;As a client you should always set a deadline for how long you are willing to
wait for a reply from the server. Here are examples using the Greeting service
from the &lt;a href=&#34;https://grpc.io/docs/quickstart/&#34;&gt;Quick start&lt;/a&gt; pages:&lt;/p&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ClientContext context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_point deadline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;system_clock&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;now() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;milliseconds(&lt;span style=&#34;color:#f60&#34;&gt;100&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.set_deadline(deadline);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;go&#34;&gt;Go&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;clientDeadline &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; time.&lt;span style=&#34;color:#c0f&#34;&gt;Now&lt;/span&gt;().&lt;span style=&#34;color:#c0f&#34;&gt;Add&lt;/span&gt;(time.&lt;span style=&#34;color:#c0f&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deadlineMs) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; time.Millisecond)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx, cancel &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#c0f&#34;&gt;WithDeadline&lt;/span&gt;(ctx, clientDeadline)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; blockingStub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;withDeadlineAfter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;deadlineMs&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;sayHello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This sets the deadline to 100ms from when the client RPC is set to when the response is picked up by the client.&lt;/p&gt;
&lt;h2 id=&#34;checking-deadlines&#34;&gt;Checking deadlines&lt;/h2&gt;
&lt;p&gt;On the server side, the server can query to see if a particular RPC is no longer wanted. Before a server starts work on a response it is very important to check if there is still a client waiting for it. This is especially important to do before starting expensive processing.&lt;/p&gt;
&lt;h3 id=&#34;c-1&#34;&gt;C++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (context&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;IsCancelled()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Status&lt;/span&gt;(StatusCode&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CANCELLED, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Deadline exceeded or Client cancelled, abandoning.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;go-1&#34;&gt;Go&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; ctx.&lt;span style=&#34;color:#c0f&#34;&gt;Err&lt;/span&gt;() &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; context.Canceled {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; status.&lt;span style=&#34;color:#c0f&#34;&gt;New&lt;/span&gt;(codes.Canceled, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Client cancelled, abandoning.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java-1&#34;&gt;Java&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Context&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isCancelled&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  responseObserver&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;CANCELLED&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;withDescription&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Cancelled by client&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;asRuntimeException&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Is it useful for a server to continue with the request, when you know your client has reached their deadline? It depends. If the response can be cached in the server, it can be worth processing and caching it; particularly if it&amp;rsquo;s resource heavy, and costs you money for each request. This will make future requests faster as the result will already be available.&lt;/p&gt;
&lt;h2 id=&#34;adjusting-deadlines&#34;&gt;Adjusting deadlines&lt;/h2&gt;
&lt;p&gt;What if you set a deadline but a new release or server version causes a bad regression? The deadline could be too small, resulting in all your requests timing out with &lt;code&gt;DEADLINE_EXCEEDED&lt;/code&gt;, or too large and your user tail latency is now massive. You can use a flag to set and adjust the deadline.&lt;/p&gt;
&lt;h3 id=&#34;c-2&#34;&gt;C++&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#099&#34;&gt;#include&lt;/span&gt; &lt;span style=&#34;color:#099&#34;&gt;&amp;lt;gflags/gflags.h&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#099&#34;&gt;&lt;/span&gt;DEFINE_int32(deadline_ms, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Deadline in milliseconds.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ClientContext context;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;time_point deadline &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;system_clock&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;now() &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;chrono&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;milliseconds(FLAGS_deadline_ms);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;context.set_deadline(deadline);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;go-2&#34;&gt;Go&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; deadlineMs = flag.&lt;span style=&#34;color:#c0f&#34;&gt;Int&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;deadline_ms&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Default deadline in milliseconds.&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ctx, cancel &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; context.&lt;span style=&#34;color:#c0f&#34;&gt;WithTimeout&lt;/span&gt;(ctx, time.&lt;span style=&#34;color:#c0f&#34;&gt;Duration&lt;/span&gt;(&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;deadlineMs) &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; time.Millisecond)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;java-2&#34;&gt;Java&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Option&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;--deadline_ms&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; usage&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Deadline in milliseconds.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; deadlineMs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 20&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;1000&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; blockingStub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;withDeadlineAfter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;deadlineMs&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; TimeUnit&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;MILLISECONDS&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;sayHello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Now the deadline can be adjusted to wait longer to avoid failing, without the need to cherry-pick a release with a different hard coded deadline. This lets you mitigate the issue for users until the regression can be debugged and resolved.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC-Go Engineering Practices</title>
      <link>https://grpc.io/blog/grpc-go-engineering-practices/</link>
      <pubDate>Mon, 22 Jan 2018 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-go-engineering-practices/</guid>
      <description>
        
        
        &lt;p&gt;It&amp;rsquo;s the start of the new year, and almost the end of my first full year on the
gRPC-Go project, so I&amp;rsquo;d like to take this opportunity to provide an update on
the state of gRPC-Go development and give some visibility into how we manage the
project.  For me, personally, this is the first open source project to which
I&amp;rsquo;ve meaningfully contributed, so this year has been a learning experience for
me.  Over this year, the team has made constant improvements to our work habits
and communication.  I still see room for improvement, but I believe we are in a
considerably better place than we were a year ago.&lt;/p&gt;
&lt;h2 id=&#34;repo-health&#34;&gt;Repo Health&lt;/h2&gt;
&lt;p&gt;When I first joined the gRPC-Go team, they had been without their previous
technical lead for a few months.  At that time, we had 45 open PRs, the oldest
of which was over a year old at the time.  As a new team member and maintainer,
the accumulation of stale PRs made it difficult to assess priorities and
understand the state of things.  For our contributors, neglecting PRs was both
disrespectful and an inconvenience when we started asking for rebases due to
other commits.  To resolve this, we made a concerted effort to either merge or
close all of those PRs, and we now hold weekly meetings to review the status of
every active PR to prevent the situation from reoccurring.&lt;/p&gt;
&lt;p&gt;At the same time, we had 103 open issues, many of which were already fixed or
outdated or untriaged.  Since then, we fixed or closed 85 of those and put in
place a process to ensure we triage and prioritize new issues on a weekly
rotation.  Similarly to our PRs, we also review our assigned and high-priority
issues in a weekly meeting.&lt;/p&gt;
&lt;p&gt;Our ongoing SLO for new issues and PRs is 1 week to triage and first response.&lt;/p&gt;
&lt;p&gt;We also revamped our &lt;a href=&#34;https://github.com/grpc/grpc-go/labels&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;labels&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for issues
and PRs to help with organization.  We typically apply a priority (P0-P3) and a
type (for example, Bug, Feature, or Performance) to every issue.  We also have a
collection of status labels we apply in various situations.  The type labels are
also applied to PRs to aid in generating our release notes.&lt;/p&gt;
&lt;h2 id=&#34;versioning-and-backward-compatibility&#34;&gt;Versioning and Backward Compatibility&lt;/h2&gt;
&lt;p&gt;We have recently documented our &lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/Documentation/versioning.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;versioning
policy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
Our goal is to maintain full backward compatibility except in limited
circumstances, including experimental APIs and mitigating security risks (most
notably &lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1392&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#1392&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;). If you notice a
behavior regression, please don&amp;rsquo;t hesitate to &lt;a href=&#34;https://github.com/grpc/grpc-go/issues/new&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open an
issue&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; in our repo (please &lt;a href=&#34;https://xkcd.com/1172/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;be
reasonable&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;grfc&#34;&gt;gRFC&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/grpc/proposal&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC proposal repo&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; contains proposals
for substantial feature changes for gRPC that need to be designed upfront,
called gRFCs.  The purpose of this process is to provide visibility and solicit
feedback from the community.  Each change is discussed on our &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mailing
list&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and debated before the
change is made.  We leveraged this before making the
backward-compatibility-breaking metadata change (&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/L7-go-metadata-api.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC
L7&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;), and
also for designing the new resolver/balancer API (&lt;a href=&#34;https://github.com/grpc/proposal/pull/30&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC
L9&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;h2 id=&#34;regression-testing&#34;&gt;Regression Testing&lt;/h2&gt;
&lt;p&gt;Every PR in our repo must pass our unit and end-to-end tests.  Our current test
coverage is 85%.  Anytime a regression is identified, we add a test that covers
the failing scenario, both to prove to ourselves that the problem is resolved by
the fix, and to prevent it from reoccurring in the future.  This helps us
improve our overall coverage numbers as well.  We also intend to re-enable
coverage reporting for all PRs, but in a non-blocking fashion (&lt;a href=&#34;https://github.com/grpc/grpc-go/issues/1676&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;related
issue&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In addition to testing for correctness, any PR that we suspect will impact
performance is run though our benchmarks.  We have a set of benchmarks both in
our &lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/benchmark&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;open source repo&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
and also within Google.  These comprise a variety of workloads that we believe
are most important for our users, both streaming and unary, and some are
specifically designed to measure our optimal QPS, throughput, or latency.&lt;/p&gt;
&lt;h2 id=&#34;releases&#34;&gt;Releases&lt;/h2&gt;
&lt;p&gt;The GA release of gRPC-Go was made in conjunction with the other languages in
July of 2016.  The team performed several patch releases between then and the
end of 2016, but none included release notes.  Our subsequent releases have
improved in regularity (a minor release is performed every six weeks) and
in the quality of the release notes.  We also are responsive with patch
releases, back-porting bug fixes to older releases either on demand or for more
serious issues within a week.&lt;/p&gt;
&lt;p&gt;When performing a release, in addition to the tests in our repo, we also run a
full suite of inter-op tests with other gRPC language implementations.  This
process has been working well for us, and we will cover more about this in a
future blog post.&lt;/p&gt;
&lt;h2 id=&#34;non-open-source-work&#34;&gt;Non-Open Source Work&lt;/h2&gt;
&lt;p&gt;We have taken an &amp;ldquo;open source first&amp;rdquo; approach to developing gRPC.  This means
that, wherever possible, gRPC functionality is added directly into the open
source project.  However, to work within Google&amp;rsquo;s infrastructure, our team
sometimes needs to provide additional functionality on top of gRPC.  This is
typically done through hooks like the &lt;a href=&#34;https://godoc.org/google.golang.org/grpc/stats#Handler&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stats
API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or
&lt;a href=&#34;https://godoc.org/google.golang.org/grpc#UnaryClientInterceptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;interceptors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
or &lt;a href=&#34;https://godoc.org/google.golang.org/grpc/resolver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom resolvers&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To keep Google&amp;rsquo;s internal version of gRPC up-to-date with the open source
version, we do weekly or on-demand imports.  Before an import, we run every test
within Google that depends upon gRPC.  This gives us another way in which we can
catch problems before performing releases in Open Source.&lt;/p&gt;
&lt;h2 id=&#34;looking-forward&#34;&gt;Looking Forward&lt;/h2&gt;
&lt;p&gt;In 2018, we intend to do more of the same, and maintain our SLOs around
addressing issues and accepting contributions to the project.  We also would
like to more aggressively tag issues with the &lt;a href=&#34;https://github.com/grpc/grpc-go/labels/Status%3A%20Help%20Wanted&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Help
Wanted&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; label
for anyone looking to contribute to have a bigger selection of issues to choose
from.&lt;/p&gt;
&lt;p&gt;For gRPC itself, one of our main focuses right now is performance, which we hope
will transparently benefit many of our users.  In the near-term, we have some
exciting changes we&amp;rsquo;re wrapping up that should provide a 30+% reduction in
latency with high concurrency, resulting in a QPS improvement of ~25%.  Once
that work is done, we have a list of other &lt;a href=&#34;https://github.com/grpc/grpc-go/issues?q=is%3Aissue&amp;#43;is%3Aopen&amp;#43;label%3A%22Type%3A&amp;#43;Performance%22&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;performance
issues&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that we&amp;rsquo;ll be tackling next.&lt;/p&gt;
&lt;p&gt;On user experience, we want to provide better documentation, and are starting to
improve our godoc with better comments and more examples.  We want to improve
the overall experience of using gRPC, so we will be working closely on projects
around distributed tracing, monitoring, and testing to make gRPC services easier
to manage in production.  We want to do more, and we are hoping that starting
with these and listening to feedback will help us ship improvements steadily.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: The gRPC Meetup Kit</title>
      <link>https://grpc.io/blog/meetup-kit/</link>
      <pubDate>Thu, 14 Sep 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/meetup-kit/</guid>
      <description>
        
        
        &lt;p&gt;If you have ever wanted to run an event around &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt;, but didn&amp;rsquo;t know where to start, or weren&amp;rsquo;t sure what content is available - we have released the &lt;a href=&#34;https://github.com/grpc-ecosystem/meetup-kit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Meetup Kit&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;The meetup kit includes a 15 minute presentation on the basic concepts of gRPC, with accompanying &lt;a href=&#34;https://docs.google.com/presentation/d/1dgI09a-_4dwBMLyqfwchvS6iXtbcISQPLAXL6gSYOcc/edit?usp=sharing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;slides&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=UVsIfSfS6I4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;video&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for either reference or playback, as well as a &lt;a href=&#34;https://codelabs.developers.google.com/codelabs/cloud-grpc/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;45-minute codelab&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; that takes you through the basics of gRPC in &lt;a href=&#34;https://nodejs.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node.js&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://golang.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. At the end of the codelab participants will have a solid understanding of the fundamentals of gRPC.&lt;/p&gt;
&lt;p&gt;If you are thinking about running a gRPC event, make sure to contact us to receive &lt;a href=&#34;https://goo.gl/forms/C3TCtFdobz4ippty2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC stickers&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and/or organise &lt;a href=&#34;https://goo.gl/forms/pvxNwWExr5ApbNst2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;office hours over Hangouts with the gRPC team&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPC-Go performance Improvements</title>
      <link>https://grpc.io/blog/grpc-go-perf-improvements/</link>
      <pubDate>Tue, 22 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-go-perf-improvements/</guid>
      <description>
        
        
        &lt;p&gt;For past few months we&amp;rsquo;ve been working on improving gRPC-Go performance. This includes improving network utilization, optimizing CPU usage and memory allocations. Most of our recent effort has been focused around revamping gRPC-Go flow control. After several optimizations and new features we&amp;rsquo;ve been able to improve quite significantly, especially on high-latency networks. We expect users that are working with high-latency networks and large messages to see an order of magnitude performance gain.
Benchmark results at the end.&lt;/p&gt;
&lt;p&gt;This blog summarizes the work we have done so far (in chronological order) to improve performance and lays out our near-future plans.&lt;/p&gt;
&lt;h2 id=&#34;recently-implemented-optimizations&#34;&gt;Recently Implemented Optimizations&lt;/h2&gt;
&lt;h3 id=&#34;expanding-stream-window-on-receiving-large-messages&#34;&gt;Expanding stream window on receiving large messages&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1248&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This is an optimization used by gRPC-C to achieve performance benefits for large messages. The idea is that when there&amp;rsquo;s an active read by the application on the receive side, we can effectively bypass stream-level flow control to request the whole message. This proves to be very helpful with large messages. Since the application is already committed to reading and has allocated enough memory for it, it makes sense that we send a proactive large window update (if necessary) to get the whole message rather than receiving it in chunks and sending window updates when we run low on window.&lt;/p&gt;
&lt;p&gt;This optimization alone provided a 10x improvement for large messages on high-latency networks.&lt;/p&gt;
&lt;h3 id=&#34;decoupling-application-reads-from-connection-flow-control&#34;&gt;Decoupling application reads from connection flow control&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1265&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;After having several discussions with gRPC-Java and gRPC-C core team we realized that gRPC-Go&amp;rsquo;s connection-level flow control was overly restrictive in the sense that window updates on the connection depended upon if the application had read data from it or not. It must be noted that it makes perfect sense to have stream-level flow control depended on application read but not so much for connection-level flow control. The rationale is as follows: A connection is shared by several streams (RPCs). If there were at least one stream that read slowly or didn&amp;rsquo;t read at all, it would hamper the performance or completely stall other streams on that connection. This happens because we won&amp;rsquo;t send out window updates on the connection until that slow or inactive stream read data. Therefore, it makes sense to decouple the connection&amp;rsquo;s flow control from application reads.&lt;/p&gt;
&lt;p&gt;However, this begs at least two questions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Won&amp;rsquo;t a client be able to send as much data as it wants to the server by creating new streams when one runs out?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Why even have connection-level flow control if the stream-level flow control is enough?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The answer to the first question is short and simple: no. A server has an option to limit the number of streams that it intends to serve concurrently. Therefore, although at first it may seem like a problem, it really is not.&lt;/p&gt;
&lt;p&gt;The need for connection-level flow control:&lt;/p&gt;
&lt;p&gt;It is true that stream-level flow control is sufficient to throttle a sender from sending too much data. But not having connection-level flow control (or using an unlimited connection-level window) makes it so that when things get slower on a stream, opening a new one will appear to make things faster. This will only take one so far since the number of streams are limited. However, having a connection-level flow control window set to the Bandwidth Delay Product (BDP) of the network puts an upper-bound on how much performance can realistically be squeezed out of the network.&lt;/p&gt;
&lt;h3 id=&#34;piggyback-window-updates&#34;&gt;Piggyback window updates&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1273&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Sending a window update itself has a cost associated to it; a flush operation is necessary, which results in a syscall. Syscalls are blocking and slow. Therefore, when sending out a stream-level window update, it makes sense to also check if a connection-level window update can be sent using the same flush syscall.&lt;/p&gt;
&lt;h3 id=&#34;bdp-estimation-and-dynamic-flow-control-window&#34;&gt;BDP estimation and dynamic flow control window&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1310&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;This feature is the latest and in some ways the most awaited optimization feature that has helped us close the final gap between gRPC and HTTP/1.1 performance on high latency networks.&lt;/p&gt;
&lt;p&gt;Bandwidth Delay Product (BDP) is the bandwidth of a network connection times its round-trip latency.  This effectively tells us how many bytes can be &amp;ldquo;on the wire&amp;rdquo; at a given moment, if full utilization is achieved.&lt;/p&gt;
&lt;p&gt;The &lt;a href=&#34;https://docs.google.com/document/d/1Eq4eBEbNt1rc8EYuwqsduQd1ZfcBOCYt9HVSBa--m-E/pub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;algorithm&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to compute BDP and adapt accordingly was first proposed by @ejona and later implemented by both gRPC-C core and gRPC-Java (note that it isn&amp;rsquo;t enabled in Java yet). The idea is simple and powerful: every time a receiver gets a data frame it sends out a BDP ping (a ping with unique data only used by BDP estimator). After this, the receiver starts counting the number of bytes it receives (including the ones that triggered the BDP ping) until it receives the ack for that ping. This total sum of all bytes received in about 1.5 RTT (Round-Trip Time) is an approximation of the effective BDP * 1.5. If this is close to our current window size (say, more than 2/3rd of it) we must increase the window size. We put our window sizes (both streaming and connection) to be twice the BDP we sampled(total sum of all bytes received).&lt;/p&gt;
&lt;p&gt;This algorithm by itself could cause the BDP estimation to increase indefinitely; an increase in window will result in sampling more bytes which in turn will cause the window to be increased further. This phenomenon is called &lt;a href=&#34;https://en.wikipedia.org/wiki/Bufferbloat&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;buffer-bloat&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and was discovered by earlier implementations in gRPC-C core and gRPC-Java. The solution to this is to calculate the bandwidth for every sample and check if it is greater than the maximum bandwidth noted so far. If so, only then increase our window sizes. The bandwidth, as we know, can be calculated by dividing the sample by RTT * 1.5 (remember the sample was for one and a half round trips). If the bandwidth doesn&amp;rsquo;t increase with an increase in sampled bytes that&amp;rsquo;s indicative that this change is because of an increased window size and doesn&amp;rsquo;t really reflect the nature of the network itself.&lt;/p&gt;
&lt;p&gt;While running experiments on VMs in different continents we realized that every once in awhile a rogue, unnaturally fast ping-ack at the right time (really the wrong time) would cause our window sizes to go up. This happens because such a ping-ack would cause us to notice a decreased RTT and calculate a high bandwidth value. Now if that sample of bytes was greater than 2/3rd of our window then we would increase the window sizes. However, this ping ack was an aberration and shouldn&amp;rsquo;t have changed our perception of the network RTT al together. Therefore, we keep a running average of the RTTs we note weighted by a constant rather than the total number of samples to heed more to recent RTTs and less to the ones in past. It is important because networks might change over time.&lt;/p&gt;
&lt;p&gt;During implementation, we experimented with several tuning parameters, such as the multiplier to compute the window size from the sample size to select the best settings, that balanced between growth and accuracy.&lt;/p&gt;
&lt;p&gt;Given that we&amp;rsquo;re always bound by the flow control of TCP which for most cases is upper bounded at 4MB, we bound the growth of our window sizes by the same number: 4MB.&lt;/p&gt;
&lt;p&gt;BDP estimation and dynamically adjusting window sizes is turned-on by default and can be turned off by setting values manually for connection and/or stream window sizes.&lt;/p&gt;
&lt;h3 id=&#34;near-future-efforts&#34;&gt;Near-future efforts&lt;/h3&gt;
&lt;p&gt;We are now looking into improving our throughput by better CPU utilization, the following efforts are in-line with that.&lt;/p&gt;
&lt;h3 id=&#34;reducing-flush-syscalls&#34;&gt;Reducing flush syscalls&lt;/h3&gt;
&lt;p&gt;We noticed a bug in our transport layer which causes us to make a flush syscall for every data frame we write, even if the same goroutine has more data to send. We can batch a lot of these writes to use only one flush. This in fact will not be a big change to the code itself.&lt;/p&gt;
&lt;p&gt;In our efforts to get rid of unnecessary flushes we recently combined the headers and data write for unary and server streaming RPCs to one flush on the client-side. Link to &lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1343&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;code&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Another related idea proposed by one of our users @petermattic in &lt;a href=&#34;https://github.com/grpc/grpc-go/pull/1373&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; PR was to combine a server response to a unary RPC into one flush. We are currently looking into that as well.&lt;/p&gt;
&lt;h3 id=&#34;reducing-memory-allocation&#34;&gt;Reducing memory allocation&lt;/h3&gt;
&lt;p&gt;For every data frame read from the wire a new memory allocation takes place. The same holds true at the gRPC layer for every new message for decompressing and decoding. These allocations result in excessive garbage collection cycles, which are expensive. Reusing memory buffers can reduce this GC pressure, and we are prototyping approaches to do so. As requests need buffers of differing sizes, one approach would be to maintain individual memory pools of fixed sizes (powers of two). So now when reading x bytes from the wire we can find the nearest power of 2 greater than x and reuse a buffer from our cache if available or allocate a new one if need be. We will be using golang sync Pools so we don&amp;rsquo;t have to worry about garbage collection. However, we will need to run sufficient tests before committing to this.&lt;/p&gt;
&lt;h3 id=&#34;results&#34;&gt;Results&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Benchmark on a real network:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server and client were launched on two VMs in different continents. RTT of ~152ms.&lt;/li&gt;
&lt;li&gt;Client made an RPC with a payload and server responded back with an empty message.&lt;/li&gt;
&lt;li&gt;The time taken for each RPC was measured.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/compare/master...MakMukhi:http_greeter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;Message size&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;gRPC&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;HTTP 1.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 KB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10 KB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10 KB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;1 MB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~152 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;10 MB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~622 ms&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~630 ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;100 MB&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~5 sec&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;~5 sec&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Benchmark on simulated network:
&lt;ul&gt;
&lt;li&gt;Server and client were launched on the same machine and different network latencies were simulated.&lt;/li&gt;
&lt;li&gt;Client made an RPC with 1MB of payload and server responded back with an empty message.&lt;/li&gt;
&lt;li&gt;The time taken for each RPC was measured.&lt;/li&gt;
&lt;li&gt;Following tables show time taken by first 10 RPCs.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/compare/master...MakMukhi:grpc_vs_http&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Code link&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;no-latency-network&#34;&gt;No-latency Network&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;gRPC&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;HTTP 2.0&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;HTTP 1.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;5.097809ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;16.107461ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;18.298959ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.46083ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.301808ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.715456ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.081421ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.076645ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;8.118601ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.338013ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.232606ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.621028ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5.013544ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.693488ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;5.83375ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.963463ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.558047ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;5.571579ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.509808ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.855556ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;4.966938ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4.864618ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.324159ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.576279ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.545933ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.61375ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;6.105608ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3.481094ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;4.621215ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;7.001607ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;network-with-rtt-of-16ms&#34;&gt;Network with RTT of 16ms&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;gRPC&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;HTTP 2.0&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;HTTP 1.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;118.837625ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;84.453913ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;58.858109ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36.801006ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;22.476308ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20.877585ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35.008349ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21.206222ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;19.793881ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21.153461ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20.940937ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;22.18179ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20.640364ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21.888247ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;21.4666ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21.410346ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21.186008ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20.925514ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19.755766ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21.818027ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20.553768ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20.388882ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;21.366796ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;21.460029ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20.623342ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20.681414ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20.586908ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20.452023ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;20.781208ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;20.278481ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5 id=&#34;network-with-rtt-of-64ms&#34;&gt;Network with RTT of 64ms&lt;/h5&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;GRPC&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;HTTP 2.0&lt;/th&gt;
&lt;th style=&#34;text-align:right&#34;&gt;HTTP 1.1&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;455.072669ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;275.290241ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;208.826314ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;195.43357ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70.386788ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;70.042513ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;132.215978ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70.01131ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;71.19429ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;69.239273ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70.032237ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;69.479335ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;68.669903ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;70.192272ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;70.858937ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70.458108ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;69.395154ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;71.161921ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;68.488057ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;69.252731ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;71.374758ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;68.816031ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;69.628744ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;70.141381ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;69.170105ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;68.935813ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;70.685521ms&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;68.831608ms&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;69.728349ms&lt;/td&gt;
&lt;td style=&#34;text-align:right&#34;&gt;69.45605ms&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: 2017-08-17 Community Meeting Update</title>
      <link>https://grpc.io/blog/community-meeting-update/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/community-meeting-update/</guid>
      <description>
        
        
        &lt;p&gt;&lt;strong&gt;Next Community Meeting:&lt;/strong&gt; Thursday, August 31, 2017 11am Pacific Time (US and Canada)&lt;/p&gt;
&lt;h2 id=&#34;general-announcements&#34;&gt;General Announcements&lt;/h2&gt;
&lt;p&gt;Call for Papers: CloudNativeCon&lt;/p&gt;
&lt;p&gt;CloudNativeCon gathers all CNCF (Cloud Native Computing Foundation) projects under a single roof.
Presenters will be talking about their experiences with Kubernetes, Prometheus, OpenTracing, Fluentd, Linkerd, gRPC, CoreDNS, containerd, rkt and CNI.
The call for papers period will be ending on Monday, August 21, 2017.
The conference will be taking place on the 6th and 7th of December, 2017.
If you submit a talk, please add an entry to the spreadsheet linked in the &lt;a href=&#34;https://docs.google.com/document/d/1DTMEbBNmzNbZBh8nOivsnnw3CwUr1Q7WGRe7rNxyHOU/edit#bookmark=id.7qk9qf3ri75m&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Community Meeting Working Doc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Register for &lt;a href=&#34;https://events.linuxfoundation.org/events/cloudnativecon-and-kubecon-north-america/attend/register&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CloudNativeCon&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;release-updates&#34;&gt;Release Updates&lt;/h2&gt;
&lt;p&gt;1.6 will be available soon.
The required changes have already been merged and published in the protocol buffer libraries.
Keep your eyes peeled for the upcoming release.&lt;/p&gt;
&lt;h2 id=&#34;platform-updates&#34;&gt;Platform Updates&lt;/h2&gt;
&lt;p&gt;No platform updates.&lt;/p&gt;
&lt;h2 id=&#34;language-updates&#34;&gt;Language Updates&lt;/h2&gt;
&lt;p&gt;No language specific updates.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Announcing out-of-the-box support for gRPC in the Flatbuffers serialization library</title>
      <link>https://grpc.io/blog/grpc-flatbuffers/</link>
      <pubDate>Thu, 17 Aug 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-flatbuffers/</guid>
      <description>
        
        
        &lt;p&gt;The recent release of Flatbuffers &lt;a href=&#34;https://github.com/google/flatbuffers/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;version 1.7&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; introduced truly zero-copy support for gRPC out of the box.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://google.github.io/flatbuffers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Flatbuffers&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a serialization library that allows you to access serialized data without first unpacking it or allocating any
additional data structures. It was originally designed for games and other resource constrained applications, but is now finding more general use, both by teams within Google and in other companies such as Netflix and Facebook.&lt;/p&gt;
&lt;p&gt;Flatbuffers enables maximum throughput by directly using gRPC&amp;rsquo;s slice buffers with zero-copy for common use cases. An incoming rpc can be processed directly from gRPCs internal buffers, and constructing a new message will write directly to these buffers without intermediate steps.&lt;/p&gt;
&lt;p&gt;This is currently, fully supported in the C++ implementation of FlatBuffers, with more languages to come. There is also an implementation in Go, which is not entirely zero copy, but still very low on allocation cost (see below).&lt;/p&gt;
&lt;h2 id=&#34;example-usage&#34;&gt;Example Usage&lt;/h2&gt;
&lt;p&gt;Let&amp;rsquo;s look at an example of how this works.&lt;/p&gt;
&lt;h3 id=&#34;use-flatbuffers-as-an-idl&#34;&gt;Use Flatbuffers as an IDL&lt;/h3&gt;
&lt;p&gt;Start with an &lt;code&gt;.fbs&lt;/code&gt; schema (similar to .proto, if you are familiar with protocol buffers) that declares an RPC service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;table HelloReply {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  message&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;table HelloRequest {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  name&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;table ManyHellosRequest {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  name&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  num_greetings&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;int;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;rpc_service Greeter {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  SayHello(HelloRequest)&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;HelloReply;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  SayManyHellos(ManyHellosRequest)&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;HelloReply (streaming&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;);&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To generate C++ code from this, run: &lt;code&gt;flatc --cpp --grpc example.fbs&lt;/code&gt;, much like in protocol buffers.&lt;/p&gt;
&lt;h4 id=&#34;generated-server-implementation&#34;&gt;Generated Server Implementation&lt;/h4&gt;
&lt;p&gt;The server implementation is very similar to protocol buffers, except now the request and response messages are of type &lt;code&gt;flatbuffers::grpc::Message&amp;lt;HelloRequest&amp;gt; *&lt;/code&gt;.
Unlike protocol buffers, where these types represent a tree of C++ objects, here they are merely handles to a flat object in the underlying gRPC slice. You can access the data directly:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; request &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request_msg&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;GetRoot();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;name()&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;str();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Building a response is equally simple&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; msg_offset &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mb_.CreateString(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello, &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; name);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; hello_offset &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; CreateHelloReply(mb_, msg_offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mb_.Finish(hello_offset);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;response_msg &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; mb_.ReleaseMessage&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;HelloReply&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The client code is the same as that generated by protocol buffers, except for the FlatBuffer access and construction code.&lt;/p&gt;
&lt;p&gt;See the full example &lt;a href=&#34;https://github.com/google/flatbuffers/tree/master/grpc/samples/greeter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. To compile it, you need gRPC.
The same repo has a &lt;a href=&#34;https://github.com/google/flatbuffers/blob/master/grpc/tests/go_test.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;similar example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for Go.&lt;/p&gt;
&lt;p&gt;Read more about using and building FlatBuffers for your platform &lt;a href=&#34;https://google.github.io/flatbuffers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;on the flatbuffers site&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC Load Balancing</title>
      <link>https://grpc.io/blog/grpc-load-balancing/</link>
      <pubDate>Thu, 15 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/grpc-load-balancing/</guid>
      <description>
        
        
        &lt;p&gt;This post describes various load balancing scenarios seen when deploying gRPC. If you use &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; with multiple backends, this document is for you.&lt;/p&gt;
&lt;p&gt;A large scale gRPC deployment typically has a number of identical back-end instances, and a number of clients. Each server has a certain capacity. Load balancing is used for distributing the load from clients optimally across available servers.&lt;/p&gt;
&lt;h2 id=&#34;why-grpc&#34;&gt;Why gRPC?&lt;/h2&gt;
&lt;p&gt;gRPC is a modern RPC protocol implemented on top of HTTP/2. HTTP/2 is a Layer 7 (Application layer) protocol, that runs on top of a TCP (Layer 4 - Transport layer) protocol, which runs on top of IP (Layer 3 - Network layer) protocol. gRPC has many advantages over traditional HTTP/REST/JSON mechanism such as&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://http2.github.io/faq/#why-is-http2-binary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Binary protocol (HTTP/2)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Multiplexing many requests on one connection (HTTP/2)&lt;/li&gt;
&lt;li&gt;Header compression (HTTP/2)&lt;/li&gt;
&lt;li&gt;Strongly typed service and message definition (Protobuf)&lt;/li&gt;
&lt;li&gt;Idiomatic client/server library implementations in many languages&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In addition, gRPC integrates seamlessly with ecosystem components like service discovery, name resolver, load balancer, tracing and monitoring, among others.&lt;/p&gt;
&lt;h2 id=&#34;load-balancing-options&#34;&gt;Load balancing options&lt;/h2&gt;
&lt;h3 id=&#34;proxy-or-client-side&#34;&gt;Proxy or Client side?&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;Note: Proxy load balancing is also known as server-side load balancing in some literature.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Deciding between proxy versus client-side load balancing is a primary architectural choice. In Proxy load balancing, the client issues RPCs to the a Load Balancer (LB) proxy. The LB distributes the RPC call to one of the available backend servers that implement the actual logic for serving the call. The LB keeps track of load on each backend and implements algorithms for distributing load fairly. The clients themselves do not know about the backend servers. Clients can be untrusted. This architecture is typically used for user facing services where clients from open internet can connect to servers in a data center, as shown in the picture below. In this scenario, clients make requests to LB (#1). The LB passes on the request to one of the backends (#2), and the backends report load to LB (#3).&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/image_0.png&#34; alt=&#34;image alt text&#34; id=&#34;image_0&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-image_0&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-image_0&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/image_0.png&#34; alt=&#34;image alt text&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;In Client side load balancing, the client is aware of multiple backend servers and chooses one to use for each RPC. The client gets load reports from backend servers and the client implements the load balancing algorithms. In simpler configurations server load is not considered and client can just round-robin between available servers. This is shown in the picture below. As you can see, the client makes request to a specific backend (#1). The backends respond with load information (#2), typically on the same connection on which client RPC is executed. The client then updates its internal state.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/image_1.png&#34; alt=&#34;image alt text&#34; id=&#34;image_1&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-image_1&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-image_1&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/image_1.png&#34; alt=&#34;image alt text&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The following table outlines the pros and cons of each model.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;&lt;/td&gt;
    &lt;td&gt;Proxy&lt;/td&gt;
    &lt;td&gt;Client Side&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td style=&#34;width:10% !important&#34;&gt;Pros&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Simple client&lt;/li&gt;
&lt;li&gt;No client-side awareness of backend&lt;/li&gt;
&lt;li&gt;Works with untrusted clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;High performance because elimination of extra hop&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Cons&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;LB is in the data path&lt;/li&gt;
&lt;li&gt;Higher latency&lt;/li&gt;
&lt;li&gt;LB throughput may limit scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Complex client&lt;/li&gt;
&lt;li&gt;Client keeps track of server load and health&lt;/li&gt;
&lt;li&gt;Client implements load balancing algorithm&lt;/li&gt;
&lt;li&gt;Per-language implementation and maintenance burden&lt;/li&gt;
&lt;li&gt;Client needs to be trusted, or the trust boundary needs to be handled by a lookaside LB.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;proxy-load-balancer-options&#34;&gt;Proxy Load Balancer options&lt;/h3&gt;
&lt;p&gt;Proxy load balancing can be L3/L4 (transport level) or L7 (application level). In transport level load balancing, the server terminates the TCP connection and opens another connection to the backend of choice. The application data (HTTP/2 and gRPC frames) are simply copied between the client connection to the backend connection. L3/L4 LB by design does very little processing, adds less latency compared with  L7 LB, and is cheaper because it consumes fewer resources.&lt;/p&gt;
&lt;p&gt;In L7 (application level) load balancing, the LB terminates and parses the HTTP/2 protocol. The LB can inspect each request and assign a backend based on the request contents. For example, a session cookie sent as part of HTTP header can be used to associate with a specific backend, so all requests for that session are served by the same backend. Once the LB has chosen an appropriate backend, it creates a new HTTP/2 connection to that backend. It then forwards the HTTP/2 streams received from the client to the backend(s) of choice. With HTTP/2, LB can distribute the streams from one client among multiple backends.&lt;/p&gt;
&lt;h4 id=&#34;l3l4-transport-vs-l7-application&#34;&gt;L3/L4 (Transport) vs L7 (Application)&lt;/h4&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;
    Use case
    &lt;/td&gt;
    &lt;td&gt;
    Recommendation
    &lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;RPC load varies a lot among connections&lt;/td&gt;
    &lt;td&gt;Use Application level LB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Storage or compute affinity is important&lt;/td&gt;
    &lt;td&gt;Use Application level LB and use cookies or similar for routing requests to correct backend&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Minimizing resource utilization in proxy is more important than features&lt;/td&gt;
    &lt;td&gt;Use L3/L4 LB&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;Latency is paramount&lt;/td&gt;
    &lt;td&gt;Use L3/L4 LB&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
&lt;h3 id=&#34;client-side-lb-options&#34;&gt;Client side LB options&lt;/h3&gt;
&lt;h4 id=&#34;thick-client&#34;&gt;Thick client&lt;/h4&gt;
&lt;p&gt;A thick client approach means the load balancing smarts are implemented in the client. The client is responsible for keeping track of available servers, their workload, and the algorithms used for choosing servers. The client typically integrates libraries that communicate with other infrastructures such as service discovery, name resolution, quota management, etc.&lt;/p&gt;
&lt;h4 id=&#34;lookaside-load-balancing&#34;&gt;Lookaside Load Balancing&lt;/h4&gt;
&lt;p&gt;&lt;em&gt;Note: A lookaside load balancer is also known as an external load balancer or one-arm load balancer&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;With lookaside load balancing, the load balancing smarts are implemented in a special LB server. Clients query the lookaside LB and the LB responds with best server(s) to use. The heavy lifting of keeping server state and implementation of LB algorithm is consolidated in the lookaside LB. Note that client might choose to implement simple algorithms on top of the sophisticated ones implemented in the LB. gRPC defines a protocol for communication between client and LB using this model. See Load Balancing in gRPC &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;doc&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;p&gt;The picture below illustrates this approach. The client gets at least one address from lookaside LB (#1). Then the client uses this address to make a RPC (#2), and server sends load report to the LB (#3). The lookaside LB communicates with other infrastructure such as name resolution, service discovery, and so on (#4).&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/image_2.png&#34; alt=&#34;image alt text&#34; id=&#34;image_2&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-image_2&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-image_2&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/image_2.png&#34; alt=&#34;image alt text&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;recommendations-and-best-practices&#34;&gt;Recommendations and best practices&lt;/h2&gt;
&lt;p&gt;Depending upon the particular deployment and constraints, we suggest the following.&lt;/p&gt;
&lt;table&gt;
  &lt;tr&gt;
    &lt;td&gt;Setup&lt;/td&gt;
    &lt;td&gt;Recommendation&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Very high traffic between clients and servers&lt;/li&gt;
&lt;li&gt;Clients can be trusted&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Thick client-side load balancing&lt;/li&gt;
&lt;li&gt;Client side LB with ZooKeeper/Etcd/Consul/Eureka. &lt;a href=&#34;https://github.com/makdharma/grpc-zookeeper-lb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ZooKeeper example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Traditional setup - Many clients connecting to services behind a proxy&lt;/li&gt;
&lt;li&gt;Need trust boundary between servers and clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Proxy Load Balancing&lt;/li&gt;
&lt;li&gt;L3/L4 LB with GCLB (if using GCP)&lt;/li&gt;
&lt;li&gt;L3/L4 LB with haproxy - &lt;a href=&#34;https://gist.github.com/thpham/114d20de8472b2cef966&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;config file&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Nginx coming soon&lt;/li&gt;
&lt;li&gt;If need session stickiness - L7 LB with Envoy as proxy&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Microservices - N clients, M servers in the data center&lt;/li&gt;
&lt;li&gt;Very high performance requirements (low latency, high traffic)&lt;/li&gt;
&lt;li&gt;Client can be untrusted&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Look-aside Load Balancing&lt;/li&gt;
&lt;li&gt;Client-side LB using &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC-LB protocol&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Roll your own implementation (Q2’17), hosted gRPC-LB in the works.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Existing Service-mesh like setup using Linkerd or Istio&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
    &lt;td&gt;
&lt;ul&gt;
&lt;li&gt;Service Mesh&lt;/li&gt;
&lt;li&gt;Use built-in LB with &lt;a href=&#34;https://istio.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Istio&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, or &lt;a href=&#34;https://github.com/lyft/envoy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Envoy&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC in Helm</title>
      <link>https://grpc.io/blog/helm-grpc/</link>
      <pubDate>Mon, 15 May 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/helm-grpc/</guid>
      <description>
        
        
        &lt;p&gt;Helm is the package manager for Kubernetes. Helm provides its users with a customizable mechanism for
managing distributed applications and controlling their deployment.&lt;/p&gt;
&lt;p&gt;I have the good fortune to be a member of the phenomenal open-source Kubernetes Helm community serving as
a core contributor. My first day working with the Helm team was spent prototyping the architecture for
the next generation of Helm. By the end of that day, we had procured the preliminary RPC protocol data model
used to enable communication between Helm and its in-cluster server component, Tiller.&lt;/p&gt;
&lt;p&gt;We chose to use protocol buffers - the default framework gRPC uses for serialization and over-the-air
transmission - as our data definition language. By the end of that first day hacking with the Helm team,
gRPC and protocol buffers proved to be a powerful combination. We had successfully had acheived communication
between the Helm client and Tiller server using code generated from the protobuf and gRPC service definitions.
As a personal preference, we found that the protobuf files and resulting generated gRPC
code provided an aesthetic, nearly self-documenting developer experience compared to something like Swagger.&lt;/p&gt;
&lt;p&gt;Within a few days, the Helm team was scoping and implementing features for our users. By choosing gRPC/Proto
we had reduced the typical time spent bikeshedding that, in general, inevitably evolves from API modeling and
churning out boilerplate server code. If we had not reaped the benefits of gRPC/protobuf from day 1, we would
have spent significantly more time pivoting up and down the stack, as opposed to honing our focus on what
matters: the users and the features they requested.&lt;/p&gt;
&lt;p&gt;In addition to serving as the Helm/Tiller communication protocol, one of our more interesting applications
of protocol buffers is that we use it to model what&amp;rsquo;s referred to in Kubernetes parlance as a &amp;ldquo;Chart&amp;rdquo;. Charts
are an encapsulation of Kubernetes manifests that enable you to define, install, and upgrade Kubernetes applications.
For more complex Kubernetes applications, the set of manifests may be large. By virtue of its inherent compression
capabilities, protocol buffers and gRPC allowed us to mitigate the nuisance of transmitting bulky and
sprawling Kubernetes manifests.&lt;/p&gt;
&lt;p&gt;For a deeper dive into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The Helm proto, see: &lt;a href=&#34;https://github.com/kubernetes/helm/tree/master/_proto/hapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kubernetes/helm/tree/master/_proto/hapi&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Its generated counterpart, see: &lt;a href=&#34;https://github.com/kubernetes/helm/tree/master/pkg/proto/hapi&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kubernetes/helm/tree/master/pkg/proto/hapi&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;The interface to our Helm client, see: &lt;a href=&#34;https://github.com/kubernetes/helm/tree/master/pkg/helm&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/kubernetes/helm/tree/master/pkg/helm&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In summary, protobuf and gRPC provided Helm with:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Clearly defined message and protocol semantics for client and server communications.&lt;/li&gt;
&lt;li&gt;Increased feature development via a reduction in time spent on boilerplate server code / API modeling.&lt;/li&gt;
&lt;li&gt;High performance transmission of data through generated code and compression.&lt;/li&gt;
&lt;li&gt;Minimized cognitive cycles spent going from 0 to client/server communications.&lt;/li&gt;
&lt;/ul&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Migration to Google Cloud Platform — gRPC &amp; grpc-gateway</title>
      <link>https://grpc.io/blog/yikyak/</link>
      <pubDate>Wed, 12 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/yikyak/</guid>
      <description>
        
        
        &lt;p&gt;In our previous blog &lt;a href=&#34;https://medium.com/yik-yak-eng/migration-to-google-cloud-platform-overview-9b5e5c17c368&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;post&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; we gave an overview of our migration to Google Cloud Platform from Amazon Web Services. In this post we will drill down into the role that &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-gateway&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; played in that migration and share some lessons which we picked up along the way.&lt;/p&gt;
&lt;h2 id=&#34;most-people-have-rest-apis-dont-you-whats-the-problem&#34;&gt;Most people have REST APIs, don’t you? What’s the problem?&lt;/h2&gt;
&lt;p&gt;Yes, we actually still have REST APIs that clients use because migrating the client APIs was out of scope. To be fair, you can make REST APIs work and there are a lot of useful REST APIs out there. Having said that, the issues that we had with REST lie in the details.&lt;/p&gt;
&lt;h3 id=&#34;no-canonical-rest-specification&#34;&gt;No Canonical REST Specification&lt;/h3&gt;
&lt;p&gt;There is no single REST specification that is canonical. There are best practices, but no true canon. For that reason, there isn’t unanimous agreement on when to use specific HTTP methods and response codes. Beyond that, not all of the possible HTTP methods and response codes are supported across all platforms… This forces REST API implementers to compensate for these deficiencies using techniques that work for them but create more variance in REST APIs across the board. At best, REST APIs are really REST-ish dialects.&lt;/p&gt;
&lt;h3 id=&#34;harder-on-developers&#34;&gt;Harder on Developers&lt;/h3&gt;
&lt;p&gt;REST APIs aren’t exactly great from a developer’s standpoint either.
First, because REST is tied to HTTP there is no simple mapping to an API in my language of choice. If I’m using Go or Java there is no “interface” that I can use in my code to stub it out. I can create one, but it is extra-linguistic to the REST API definition.&lt;/p&gt;
&lt;p&gt;Second, REST APIs spread information that is necessary to interpreting the intent of the request across various components of the request. You have the HTTP method, the request URI, the request payload, and it can get even more complicated if request headers are involved in the semantics.&lt;/p&gt;
&lt;p&gt;Third, it is great that I can use curl from the command line to hit an API, but it comes at the cost of having to shoehorn the API into that ecosystem. Normally that use case only matters for letting people quickly try out an API — and if that is high on your list of requirements then by all means feel free to use REST… Just keep it simple.&lt;/p&gt;
&lt;h3 id=&#34;no-declarative-rest-api-description&#34;&gt;No Declarative REST API Description&lt;/h3&gt;
&lt;p&gt;The fourth problem with a REST APIs is that, at least until &lt;a href=&#34;https://swagger.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Swagger&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; arrived on the scene, there was no declarative way to define a REST API and include type information. It may sound pedantic, but there are legitimate reasons to want a proper definition that includes type information in general. To reinforce the point, look at the lines of PHP server code below, which were extracted from various files, that set the “hidePin” field on “yak” which was then returned to the client. The actual line of code that executed on the server was a function of multiple parameters, so imagine that the one which was run was basically chosen at random:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$yak&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;hidePin&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$yak&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;hidePin&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$yak&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;hidePin&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$yak&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;hidePin&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;What is the type of the field hidePin? You cannot say for certain. It could be a boolean or an integer or whatever happens to have been written there by the server, but in any case now your clients have to be able to deal with these possibilities which makes them more complicated.&lt;/p&gt;
&lt;p&gt;Problems can also arise when the client’s definition of a type varies from that which the server expects. Have a look at the server code below which processed a JSON payload sent up by a client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;switch&lt;/span&gt; (&lt;span style=&#34;color:#033&#34;&gt;$fieldName&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; “recipientID”&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// This is being added because iOS is passing the recipientID
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// incorrectly and we still want to capture these events
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// … expected fall through …
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;case&lt;/span&gt; “Recipientid”&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#033&#34;&gt;$this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;yakkerEvent&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;recipientID&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$value&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;break&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted...
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this case, the server had to deal with an iOS client that sent a JSON object whose field name used unexpected casing. Again, not insurmountable but all of these little disconnects compound and work together to steal time away from the problems that really move the ball down the field.&lt;/p&gt;
&lt;h2 id=&#34;grpc-can-address-the-issues-with-rest&#34;&gt;gRPC can address the issues with REST&lt;/h2&gt;
&lt;p&gt;If you’re not familiar with gRPC, it’s a “high performance, open-source universal remote procedure call (RPC) framework” that uses Google Protocol Buffers as the Interface Description Language (IDL) for describing a service interface as well as the structure of the messages exchanged. This IDL can then be compiled to produce language-specific client and server stubs. In case that seemed a little obtuse, I’ll zoom into the aspects that are important.&lt;/p&gt;
&lt;h3 id=&#34;grpc-is-declarative-strongly-typed-and-language-independent&#34;&gt;gRPC is Declarative, Strongly-Typed, and Language Independent&lt;/h3&gt;
&lt;p&gt;gRPC descriptions are written using an Interface Description Language that is independent of any specific programming language, yet its concepts map onto the supported languages. This means that you can describe your ideal service API, the messages that it supports, and then use “protoc”, the protocol compiler, to generate client and server stubs for your API. Out of the box, you can produce client and server stubs in C/C++, C#, Node.js, PHP, Ruby, Python, Go and Java. You can also get additional protoc plugins which can create stubs for Objective-C and Swift.&lt;/p&gt;
&lt;p&gt;Those issues that we had with “hidePin” and “recipientID” vs.”Recipientid” fields above go away because we have a single, canonical declaration that establishes the types used, and the language-specific code generation ensures that we don’t have typos in the client or server code regardless of their implementation language.&lt;/p&gt;
&lt;h3 id=&#34;grpc-means-no-hand-rolling-of-rpc-code-is-required&#34;&gt;gRPC Means No hand-rolling of RPC Code is Required&lt;/h3&gt;
&lt;p&gt;This is a very powerful aspect of the gRPC ecosystem. Often times developers will hand roll their RPC code because it just seems more straightforward. However, as the number of types of clients that you need to support increases, the carrying costs of this approach also increase non-linearly.
Imagine that you start off with a service that is called from a web browser. At some point down the road, the requirements are updated and now you have to support Android and iOS clients. Your server is likely fine, but the clients now need to be able to speak the same RPC dialect and often times there are differences that creep in. Things can get even worse if the server has to compensate for the differences amongst the clients.
On the other hand, using gRPC you just add the protocol compiler plugins and they generate the Android and iOS client stubs. This cuts out a whole class of problems. As a bonus, if you don’t modify the generated code — and you should not have to — then any performance improvements in the generated code will be picked up.&lt;/p&gt;
&lt;h3 id=&#34;grpc-has-compact-serialization&#34;&gt;gRPC has Compact Serialization&lt;/h3&gt;
&lt;p&gt;gRPC uses Google protocol buffers to serialize messages. This serialization format is very compact because, among other things, field names are not included in the serialized form. Compare this to a JSON object where each instance of an object carries a full copy of its field names, includes extra curly braces, etc. For a low-volume application this may not be an issue, but it can add up quickly.&lt;/p&gt;
&lt;h3 id=&#34;grpc-tooling-is-extensible&#34;&gt;gRPC Tooling is Extensible&lt;/h3&gt;
&lt;p&gt;Another very useful feature of the gRPC framework is that it is extensible. If you need support for a language that is not currently supported, there is a way to create plugins for the protocol compiler that allows you to add what you need.&lt;/p&gt;
&lt;h3 id=&#34;grpc-supports-contract-updates&#34;&gt;gRPC Supports Contract Updates&lt;/h3&gt;
&lt;p&gt;An often overlooked aspect of service APIs is how they may evolve over time. At best, this is often a secondary consideration. If you are using gRPC, and you adhered to a few basic rules, your messages can be forward and backward compatible.&lt;/p&gt;
&lt;h2 id=&#34;grpc-gatewaybecause-rest-will-be-with-us-for-a-while&#34;&gt;Grpc-gateway — because REST will be with us for a while…&lt;/h2&gt;
&lt;p&gt;You’re probably thinking: gRPC is great but I have a ton of REST clients to deal with. Well, there is another tool in this ecosystem and it is called grpc-gateway. Grpc-gateway “generates a reverse-proxy server which translates a RESTful JSON API into gRPC”. So if you want to support REST clients you can, and it doesn’t cost you any real extra effort.
If your existing REST clients are pretty far from the normal REST APIs, you can use custom marshallers with grpc-gateway to compensate.&lt;/p&gt;
&lt;h2 id=&#34;migration-and-grpc--grpc-gateway&#34;&gt;Migration and gRPC + grpc-gateway&lt;/h2&gt;
&lt;p&gt;As mentioned previously, we had a lot of PHP code and REST endpoints which we wanted to rework as part of the migration. By using the combination of gRPC and grpc-gateway, we were able to define gRPC versions of the legacy REST APIs and then use grpc-gateway to expose the exact REST endpoints that clients were used to. With these alternative implementations in place we were able to move traffic between the old and new systems using combinations of DNS updates as well as our &lt;a href=&#34;https://medium.com/yik-yak-eng/yik-yak-configuration-and-experiment-system-16a5c15ee77c#.7s11d3kqh&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Experimentation and Configuration System&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; without causing any disruption to the existing clients. We were even able to leverage the existing test suites to verify functionality and establish parity between the old and new systems.
Lets walk through the pieces and how they fit together.&lt;/p&gt;
&lt;h3 id=&#34;grpc-idl-for-apigetmessages&#34;&gt;gRPC IDL for “/api/getMessages”&lt;/h3&gt;
&lt;p&gt;Below is the gRPC IDL that we defined to mimic the legacy Yik Yak API in GCP. We’ve simplified the example to only contain the “/api/getMessages” endpoint which clients use to get the set of messages centered around their current location.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// APIRequest Message — sent by clients
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;APIRequest&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// userID is the ID of the user making the request
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; userID &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Other fields omitted for clarity…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// APIFeedResponse contains the set of messages that clients should
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// display.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;APIFeedResponse&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;repeated&lt;/span&gt; APIPost messages &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Other fields omitted for clarity…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// APIPost defines the set of post fields returned to the clients.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;APIPost&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; messageID &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Other fields omitted for clarity…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// YYAPI service accessed by Android, iOS and Web clients.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; YYAPI {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Other endpoints omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// APIGetMessages returns the list of messages within a radius of
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// the user’s current location.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; APIGetMessages (APIRequest) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (APIFeedResponse) {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;option&lt;/span&gt; (google.api.http) &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;      get&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;“&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;api&lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt;getMessages&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;”&lt;/span&gt; &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Option tells grpc-gateway that an HTTP
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// GET to /api/getMessages should be
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// routed to the APIGetMessages gRPC
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;                              &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// endpoint.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    };&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Other endpoints omitted…
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;protoc-generated-go-interfaces-for-yyapi-service&#34;&gt;Protoc Generated Go Interfaces for YYAPI Service&lt;/h3&gt;
&lt;p&gt;The IDL above is then compiled to Go files by the protoc compiler to produce client proxies and server stubs as below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Client API for YYAPI service
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt; YYAPIClient &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c0f&#34;&gt;APIGetMessages&lt;/span&gt;(ctx context.Context, in &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;APIRequest, opts &lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;grpc.CallOption) (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;APIFeedResponse, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// NewYYAPIClient returns an implementation of the YYAPIClient interface  which
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// clients can use to call the gRPC service.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;NewYYAPIClient&lt;/span&gt;(cc &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;grpc.ClientConn) YYAPIClient {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted for clarity..
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Server API for YYAPI service
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt; YYAPIServer &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;interface&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c0f&#34;&gt;APIGetMessages&lt;/span&gt;(context.Context, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;APIRequest) (&lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;APIFeedResponse, &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;error&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// RegisterYYAPIServer registers an implementation of the YYAPIServer with an
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// existing gRPC server instance.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;RegisterYYAPIServer&lt;/span&gt;(s &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;grpc.Server, srv YYAPIServer) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted for clarity..
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;grpc-gateway-generated-go-code-for-rest-reverse-proxy-of-yyapi-service&#34;&gt;Grpc-gateway Generated Go-code for REST Reverse Proxy of YYAPI Service&lt;/h3&gt;
&lt;p&gt;By using the google.api.http option in our IDL above, we tell the grpc-gateway system that it should route HTTP GETs for “/api/getMessages” to the APIGetMessages gRPC endpoint. In turn, it creates the HTTP to gRPC reverse proxy and allows you to set it up by calling the generated function below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// RegisterYYAPIHandler registers the http handlers for service YYAPI to “mux”.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The handlers forward requests to the grpc endpoint over “conn”.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;RegisterYYAPIHandler&lt;/span&gt;(ctx context.Context, mux &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;runtime.ServeMux, conn &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;grpc.ClientConn) &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Code omitted for clarity
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;So again, from a single gRPC IDL description you can obtain client and server interfaces and implementation stubs in your language of choice as well as REST reverse proxies for free.&lt;/p&gt;
&lt;h2 id=&#34;grpci-heard-there-were-some-rough-edges&#34;&gt;gRPC — I heard there were some rough edges?&lt;/h2&gt;
&lt;p&gt;We started working with gRPC for Go late in Q1 of 2016 and there were definitely some rough edges at the time.&lt;/p&gt;
&lt;h3 id=&#34;early-adopter-issues&#34;&gt;Early Adopter Issues&lt;/h3&gt;
&lt;p&gt;We ran into &lt;a href=&#34;https://github.com/grpc/grpc-go/issues/674&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Issue 674&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, a resource leak inside of the Go gRPC client code which could cause gRPC transports to hang when under heavy load. The gRPC team was very responsive and the fix was merged into the master branch within days.&lt;/p&gt;
&lt;p&gt;We ran into a resource leak in the generated code for grpc-gateway. However, by the time we found that issue, it had already been fixed by that team and merged into master.&lt;/p&gt;
&lt;p&gt;The last early-adopter type issue that we ran into was around the Go’s gRPC client not supporting the GOAWAY packet that was part of the gRPC protocol spec. Fortunately, this one did not impact us in production. It only manifested during the repo case we had put together for Issue 674.&lt;/p&gt;
&lt;p&gt;All in all this was fairly reasonable given how early we were.&lt;/p&gt;
&lt;h3 id=&#34;load-balancing&#34;&gt;Load Balancing&lt;/h3&gt;
&lt;p&gt;Now, if you are going to use gRPC this is definitely one area that you need to think through carefully. By default, gRPC uses HTTP2 instead of HTTP1. HTTP2 is able to open a connection to a server and reuse it for multiple requests among other things. If you use it in that mode, you won’t distribute requests amongst all of the servers in your load balancing pool. At the time that we executing the migration, existing load balancers didn’t handle HTTP2 traffic very well if at all.&lt;/p&gt;
&lt;p&gt;At the time the gRPC team didn’t have a &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/load-balancing.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Load Balancing Proposal&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, so we burned a lot of cycles trying to force our system to do some type of client-side load balancing. In the end, since most of our raw gRPC communications took place within the data center, and everything was deployed using Kubernetes, it was simpler to dial the remote server every time thereby forcing the system to spread the load out amongst the servers in the Kubernetes Service. Given our setup it only added about 1 ms to the overall response time, so it was a simple work around.&lt;/p&gt;
&lt;p&gt;So was that the end of the load balancing issues? Not exactly. Once we had our basic gRPC-based system up and running we started running load tests against it, and noticed some interesting behaviors. Below is the per gRPC server CPU load graph over time, do you notice anything curious about it?&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/yy-cpu-imbalance.png&#34;  id=&#34;yy-cpu-imbalance&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-yy-cpu-imbalance&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-yy-cpu-imbalance&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/yy-cpu-imbalance.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;The server with the heaviest load was running at around 50% CPU, while the most lightly loaded server was running at around 20% CPU even after several minutes of warmup. It turned out that even though we were dialing every time, we had an &lt;a href=&#34;https://nghttp2.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;nghttp2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; ingress as part of our network topology which would tend to send inbound requests to servers to whom it had already connected and thereby causing uneven distribution. After removing the nghttp2 ingress, our CPU graphs showed much less variance in the load distribution.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/yy-cpu-balanced.png&#34;  id=&#34;yy-cpu-balanced&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-yy-cpu-balanced&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-yy-cpu-balanced&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/yy-cpu-balanced.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;REST APIs have their issues, but they are not going away anytime soon. If you are up for trying something a little cleaner, then definitely consider using gRPC (along with grpc-gateway if you still need to expose a REST API). Even though we hit some issues early on, gRPC was a net gain for us. It gave us a path forward to more tightly defined APIs. It also allowed us to stand up new implementations of the legacy REST APIs in GCP which teed us up to seamlessly migrate traffic from the AWS implementations to the new GCP ones in a controlled manner.&lt;/p&gt;
&lt;p&gt;Having discussed our use of Go, gRPC and Google Cloud Platform, we are ready to discuss how we built a new geo store on top of Google Bigtable and the Google S2 Library — the subject of our next post.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Building gRPC services with bazel and rules_protobuf</title>
      <link>https://grpc.io/blog/bazel-rules-protobuf/</link>
      <pubDate>Thu, 13 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/bazel-rules-protobuf/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt; makes it easier to build high-performance
microservices by providing generated service entrypoints in a variety
of different languages.  &lt;a href=&#34;https://bazel.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; complements these
efforts with a capable and fast polyglot build environment.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pubref/rules_protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules_protobuf&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; extends
bazel and makes it easier develop gRPC services.&lt;/p&gt;
&lt;p&gt;It does this by:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Building &lt;code&gt;protoc&lt;/code&gt; (the protocol buffer compiler) and all the
necessary &lt;code&gt;protoc-gen-*&lt;/code&gt; plugins.&lt;/li&gt;
&lt;li&gt;Building the protobuf and gRPC libraries required for gRPC-related
code to compile.&lt;/li&gt;
&lt;li&gt;Abstracting away &lt;code&gt;protoc&lt;/code&gt; plugin invocation (you don&amp;rsquo;t have to
necessarily learn or remember how to call &lt;code&gt;protoc&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;Regenerating and recompiling outputs when protobuf source files
change.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In this post I&amp;rsquo;ll provide background about how bazel works
(&lt;a href=&#34;#about-bazel&#34;&gt;Part 1&lt;/a&gt;) and how to get started building gRPC
services with rules_protobuf
(&lt;a href=&#34;#building&#34;&gt;Part 2&lt;/a&gt;).  If
you&amp;rsquo;re already a bazel aficionado, you can skip directly to Part 2.&lt;/p&gt;
&lt;p&gt;To best follow along,
&lt;a href=&#34;https://www.bazel.io/versions/master/docs/install.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;install bazel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
and clone the rules_protobuf repository:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git clone https://github.com/pubref/rules_protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; rules_protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Great. Let&amp;rsquo;s get started!&lt;/p&gt;
&lt;h1 id=&#34;about-bazel&#34;&gt;1: About Bazel&lt;/h1&gt;
&lt;p&gt;&lt;a href=&#34;https://www.bazel.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is Google&amp;rsquo;s open-source version of
their internal build tool called &amp;ldquo;Blaze&amp;rdquo;.  Blaze originated from the
challenges of managing a large monorepo with code written in a variety
of languages.  Blaze was the inspiration for other capable and fast
build tools including &lt;a href=&#34;https://www.pantsbuild.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pants&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and
&lt;a href=&#34;https://buckbuild.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Buck&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  Bazel is conceptually simple but
there are some core concepts &amp;amp; terminology to understand:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Bazel command&lt;/strong&gt;: a function that does some type of work when
called from the command line. Common ones include &lt;code&gt;bazel build&lt;/code&gt;
(compile a libary), &lt;code&gt;bazel run&lt;/code&gt; (run a binary executable), &lt;code&gt;bazel test&lt;/code&gt; (execute tests), and &lt;code&gt;bazel query&lt;/code&gt; (tell me something about
the build dependency graph).  See all with &lt;code&gt;bazel help&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Build phases&lt;/strong&gt;: the three stages (loading, analysis, and
execution) that bazel goes through when calling a bazel command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The WORKSPACE file&lt;/strong&gt;: a required file that defines the project
root.  It is primarily used to declare external dependencies
(external workspaces).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;BUILD files&lt;/strong&gt;: the presence of a &lt;code&gt;BUILD&lt;/code&gt; file in a directory
defines it as a &lt;em&gt;package&lt;/em&gt;.  &lt;code&gt;BUILD&lt;/code&gt; files contain &lt;em&gt;rules&lt;/em&gt; that define
&lt;em&gt;targets&lt;/em&gt; which can be selected using the &lt;em&gt;target pattern syntax&lt;/em&gt;.
Rules are written in a python-like language called
&lt;a href=&#34;https://bazel.io/versions/master/docs/skylark/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;skylark&lt;/em&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
Syklark has stronger deterministic guarantees than python but is
intentionally minimal, excluding language features such as recursion,
classes, and lambdas.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;11-package-structure&#34;&gt;1.1: Package Structure&lt;/h2&gt;
&lt;p&gt;To illustrate these concepts, let&amp;rsquo;s look at the package structure of
the
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/tree/master/examples&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules_protobuf examples subdirectory&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
Let&amp;rsquo;s look at the file tree, showing only those folder having a
&lt;code&gt;BUILD&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;tree -P &amp;#39;BUILD|WORKSPACE&amp;#39; -I &amp;#39;third_party|bzl&amp;#39; examples/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;├── WORKSPACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;└── examples
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ├── helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   ├── cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   ├── go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   ├── client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   │   └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   ├── greeter_test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   │   └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   └── server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │       └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   ├── grpc_gateway
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   ├── java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │   └── org
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │       └── pubref
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │           └── rules_protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │               └── examples
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │                   └── helloworld
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │                       ├── client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │                       │   └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │                       └── server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   │                           └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │   └── proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    │       └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    └── proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        └── BUILD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;12-targets&#34;&gt;1.2: Targets&lt;/h2&gt;
&lt;p&gt;To get a list of targets within the &lt;code&gt;examples/&lt;/code&gt; folder, use a query.
This says &lt;em&gt;&amp;ldquo;Ok bazel, show me all the callable targets in all packages
within the examples folder, and say what kind of thing it is in
addition to its path label&amp;rdquo;&lt;/em&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel query //examples/... --output label_kind | sort | column -t
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_binary                   rule  //examples/helloworld/cpp:client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_binary                   rule  //examples/helloworld/cpp:server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library                  rule  //examples/helloworld/cpp:clientlib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library                  rule  //examples/helloworld/proto:cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library                  rule  //examples/proto:cpp
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_proto_compile            rule  //examples/helloworld/proto:cpp.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_proto_compile            rule  //examples/proto:cpp.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_test                     rule  //examples/helloworld/cpp:test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filegroup                   rule  //examples/helloworld/proto:protos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filegroup                   rule  //examples/proto:protos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_binary                   rule  //examples/helloworld/go/client:client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_binary                   rule  //examples/helloworld/go/server:server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_library                  rule  //examples/helloworld/go/server:greeter
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_library                  rule  //examples/helloworld/grpc_gateway:gateway
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_library                  rule  //examples/helloworld/proto:go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_library                  rule  //examples/proto:go_default_library
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_proto_compile            rule  //examples/helloworld/proto:go.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_proto_compile            rule  //examples/proto:go_default_library.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_test                     rule  //examples/helloworld/go/greeter_test:greeter_test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_test                     rule  //examples/helloworld/grpc_gateway:greeter_test
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpc_gateway_proto_compile  rule  //examples/helloworld/grpc_gateway:gateway.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_binary                 rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/client:netty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_binary                 rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:netty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_library                rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/client:client
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_library                rule  //examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_library                rule  //examples/helloworld/proto:java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_library                rule  //examples/proto:java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_proto_compile          rule  //examples/helloworld/proto:java.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_proto_compile          rule  //examples/proto:java.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;js_proto_compile            rule  //examples/helloworld/proto:js
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;js_proto_compile            rule  //examples/proto:js
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;py_proto_compile            rule  //examples/helloworld/proto:py.pb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ruby_proto_compile          rule  //examples/proto:rb.pb
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;We&amp;rsquo;re not limited to targets in our own workspace.  As it turns out,
the &lt;a href=&#34;https://github.com/google/protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Protobuf repo&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is
named as an external repository (more on this later) and we can also
address targets in that workspace in the same way.  Here&amp;rsquo;s a partial
list:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel query @com_github_google_protobuf//... --output label_kind | sort | column -t
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_binary       rule  @com_github_google_protobuf//:protoc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library      rule  @com_github_google_protobuf//:protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library      rule  @com_github_google_protobuf//:protobuf_lite
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library      rule  @com_github_google_protobuf//:protoc_lib
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;cc_library      rule  @com_github_google_protobuf//util/python:python_headers
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filegroup       rule  @com_github_google_protobuf//:well_known_protos
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_library    rule  @com_github_google_protobuf//:protobuf_java
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;objc_library    rule  @com_github_google_protobuf//:protobuf_objc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;py_library      rule  @com_github_google_protobuf//:protobuf_python
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This is possible because the protobuf team provides a
&lt;a href=&#34;https://github.com/google/protobuf/blob/master/BUILD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BUILD file&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; at
the root of their repository.  Thanks Protobuf team!  Later we&amp;rsquo;ll
learn how to &amp;ldquo;inject&amp;rdquo; our own BUILD files into repositories that don&amp;rsquo;t
already have one.&lt;/p&gt;
&lt;p&gt;Inspecting the list above, we see a &lt;code&gt;cc_binary&lt;/code&gt; rule named &lt;code&gt;protoc&lt;/code&gt;.
If we &lt;code&gt;bazel run&lt;/code&gt; that target, bazel will clone the protobuf repo,
build all the dependent libraries, build a pristine executable binary
from source, and call it (pass command line arguments to binary rules
after the double-dash):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run @com_github_google_protobuf//:protoc -- --help
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Usage: /private/var/tmp/_bazel_pcj/63330772b4917b139280caef8bb81867/execroot/rules_protobuf/bazel-out/local-fastbuild/bin/external/com_github_google_protobuf/protoc &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;OPTION&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; PROTO_FILES
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;Parse PROTO_FILES and generate output based on the options given:
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -IPATH, --proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;PATH   Specify the directory in which to search &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              imports.  May be specified multiple times;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              directories will be searched in order.  If not
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                              given, the current working directory is used.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  --version                   Show version info and exit.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  -h, --help                  Show this text and exit.
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;As we&amp;rsquo;ll see in a moment, &lt;em&gt;we name the protobuf external dependency
with a specific commit ID so there&amp;rsquo;s no ambiguity about which protoc
version we&amp;rsquo;re using&lt;/em&gt;.  In this way you can vendor in tools with your
project with reliable, repeable, secure precision without bloating
your repository by checking in binaries, resorting to git submodules,
or similar hacks.  Very clean!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the gRPC repository also has a BUILD file: &lt;code&gt;$ bazel query @com_github_grpc_grpc//... --output label_kind&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;13-target-pattern-syntax&#34;&gt;1.3: Target Pattern Syntax&lt;/h2&gt;
&lt;p&gt;With those examples under our belt, let&amp;rsquo;s examine the target syntax a
bit more.  When I first started working with bazel I found the
target-pattern syntax somewhat intimidating.  It&amp;rsquo;s actually not too
bad. Here&amp;rsquo;s a closer look:&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/target-pattern-syntax.png&#34;  id=&#34;target-pattern-syntax&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-target-pattern-syntax&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-target-pattern-syntax&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/target-pattern-syntax.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@&lt;/code&gt; (at-sign) selects an external workspace. These are
established by
&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#workspace-rules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;workspace rules&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that bind a name to something fetched over the network (or your
filesystem).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;//&lt;/code&gt; (double-slash) selects the workspace root.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;:&lt;/code&gt; (colon) selects a target (rule or file) within a &lt;em&gt;package&lt;/em&gt;.
Recall that a package is established by the presence of a &lt;code&gt;BUILD&lt;/code&gt;
file in a subfolder of the workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;/&lt;/code&gt; (single-slash) selects a folder within a workspace or
package.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;A common source of confusion is that the mere presence of a
BUILD file defines that filesystem subtree as a package and
therefore one must always account for that.  For example, if there
exists a file &lt;code&gt;qux.js&lt;/code&gt; in &lt;code&gt;foo/bar/baz/&lt;/code&gt; and there exists a BUILD
file in &lt;code&gt;baz/&lt;/code&gt; also, the file is selected with &lt;code&gt;foo/bar/baz:qux.js&lt;/code&gt;
and not &lt;code&gt;foo/bar/baz/quz.js&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;Common shortcut&lt;/em&gt;: if there exists a rule having the same name as the
package, this is the implied target and can be omitted.  For example,
there is a &lt;code&gt;:jar&lt;/code&gt; target in the &lt;code&gt;//jar&lt;/code&gt; package in the external
workspace &lt;code&gt;com_google_guava_guava&lt;/code&gt;, so the following are eqivalent:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@com_google_guava_guava//jar:jar&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;deps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@com_google_guava_guava//jar&amp;#34;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;14-external-dependencies-workspace-rules&#34;&gt;1.4: External Dependencies: Workspace Rules&lt;/h2&gt;
&lt;p&gt;Many large organizations check-in in all the required tools,
compilers, linkers, etc to guarantee correct, repeatable builds.  With
external workspaces, one can effectively accomplish the same thing
without bloating your repository.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: the bazel convention is to use a fully-namespaced identifier
for external dependency names (replacing special chars with
underscore).  For example, the remote repository URL is
&lt;a href=&#34;https://github.com/google/protobuf.git&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/google/protobuf.git&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  This is simplified to the
workspace identifier com_github_google_protobuf.  Similarly, by
convention the jar artifact &lt;code&gt;io.grpc:grpc-netty:jar:1.0.0-pre1&lt;/code&gt;
becomes &lt;code&gt;io_grpc_grpc_netty&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;141-workspace-rules-that-require-a-pre-existing-workspace&#34;&gt;1.4.1: Workspace Rules that require a pre-existing WORKSPACE&lt;/h3&gt;
&lt;p&gt;These rules assume that the remote resource or URL contains a
WORKSPACE file at the top of the file tree and BUILD files that define
rule targets.  These are referred to as &lt;em&gt;bazel repositories&lt;/em&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#git_repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;git_repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:
external bazel dependency from a git repository.  The rule requires
&lt;code&gt;commit&lt;/code&gt; (or &lt;code&gt;tag&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#http_archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http_archive&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:
an external zip or tar.gz dependency from a URL. It is highly
recommended to name a sha265 for security.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: although you don&amp;rsquo;t interact directly with the bazel
execution_root, you can peek at what these external dependencies
look like when unpacked at &lt;code&gt;$(bazel info execution_root)/external/WORKSPACE_NAME&lt;/code&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;142-workspace-rules-that-autogenerate-a-workspace-file-for-you&#34;&gt;1.4.2: Workspace Rules that autogenerate a WORKSPACE file for you&lt;/h3&gt;
&lt;p&gt;The implementation of these repository rules contain logic to
autogenerate a WORKSPACE file and BUILD file(s) to make resources
available. As always, it is recommended to provide a known sha265 for
security to prevent a malicious agent from slipping in tainted code
via a compromised network.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#http_jar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http_jar&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:
external jar from a URL. The jar file is available as a
&lt;code&gt;java_library&lt;/code&gt; dependency as &lt;code&gt;@WORKSPACE_NAME//jar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#maven_jar&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;maven_jar&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:
external jar from a URL. The jar file is available as a
&lt;code&gt;java_library&lt;/code&gt; dependency as &lt;code&gt;@WORKSPACE_NAME//jar&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#http_file&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;http_file&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;:
external file from a URL. The resource is available as a &lt;code&gt;filegroup&lt;/code&gt;
via &lt;code&gt;@WORKSPACE_NAME//file&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, we can peek at the generated BUILD file for the
&lt;code&gt;maven_jar&lt;/code&gt; guava dependency via:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ cat &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;$(&lt;/span&gt;bazel info execution_root&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;)&lt;/span&gt;/external/com_google_guava_guava/jar/BUILD
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# DO NOT EDIT: automatically generated BUILD file for maven_jar rule com_google_guava_guava&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_import(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;jar&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    jars &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;guava-19.0.jar&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    visibility &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;//visibility:public&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;filegroup(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;file&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;guava-19.0.jar&amp;#39;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    visibility &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;//visibility:public&amp;#39;&lt;/span&gt;]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Note: the external workspace directory won&amp;rsquo;t exist until you
actually need it, so you&amp;rsquo;ll have to have built a target that
requires it, such as &lt;code&gt;bazel build examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/client&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;143-workspace-rules-that-accept-a-build-file-as-an-argument&#34;&gt;1.4.3: Workspace Rules that accept a BUILD file as an argument&lt;/h3&gt;
&lt;p&gt;If a repository has no BUILD file(s), you can put one into its
filesystem root to adapt the external resource into bazel&amp;rsquo;s worldview
and make those resources available to your project.&lt;/p&gt;
&lt;p&gt;For example, consider
&lt;a href=&#34;https://github.com/madler/zlib&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mark Adler&amp;rsquo;s zlib library&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. To start,
let&amp;rsquo;s learn what depends on this code.  This query says &amp;ldquo;&lt;em&gt;Ok bazel,
for all targets in examples, find all dependencies (a transitive
closure set), then tell me which ones depend on the zlib target in the
root package of the external workspace com_github_madler_zlib.&lt;/em&gt;&amp;rdquo; Bazel
reports this reverse dependency set.  We request the output in
graphviz format and pipe this to dot to generate the figure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel query &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;rdeps(deps(//examples/...), @com_github_madler_zlib//:zlib)&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;                  --output graph | dot -Tpng -O
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/zlib-deps.png&#34;  id=&#34;zlib-deps&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-zlib-deps&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-zlib-deps&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/zlib-deps.png&#34; /&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;So we can see that all grpc-related C code ultimately depends on this
library.  But, there is no BUILD file in Mark&amp;rsquo;s repo&amp;hellip; where did it
come from?&lt;/p&gt;
&lt;p&gt;By using the variant workspace rule &lt;code&gt;new_git_repository&lt;/code&gt;, we can
provide our
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/blob/master/protobuf/build_file/com_github_madler_zlib.BUILD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;own BUILD file&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
(which defines the &lt;code&gt;cc_library&lt;/code&gt; target) as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;new_git_repository(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;com_github_madler_zlib&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  remote &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/madler/zlib&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  tag: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;v1.2.8&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  build_file: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//bzl:build_file/com_github_madler_zlib.BUILD&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This &lt;code&gt;new_*&lt;/code&gt; family of workspace rules keeps your repository lean and
allows you to vendor in pretty much any type of network-available
resource.  Awesome!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#new_git_repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new_git_repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#new_local_repository&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new_local_repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bazel.io/docs/be/workspace.html#new_http_archive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;new_http_archive&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;You can also
&lt;a href=&#34;https://bazel.io/docs/skylark/repository_rules.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;write your own repository rules&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that have custom logic to pull resources from the net and bind it
into bazel&amp;rsquo;s view of the universe.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;15-bazel-summary&#34;&gt;1.5: Bazel Summary&lt;/h2&gt;
&lt;p&gt;When presented with a command and a target-pattern, bazel goes through
the following three phases:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Loading: Read the WORKSPACE and required BUILD files. Generate a
dependency graph.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Analysis: for all nodes in the graph, which nodes are actually
required for this build? Do we have all the necessary
resources available?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execution: execute each required node in the dependency graph and
generate outputs.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Hopefully you now have enough conceptual knowledge of bazel to be
productive.&lt;/p&gt;
&lt;h2 id=&#34;16-rules_protobuf&#34;&gt;1.6: rules_protobuf&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pubref/rules_protobuf&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules_protobuf&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is an
extension to bazel that takes care of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Building the protocol buffer compiler &lt;code&gt;protoc&lt;/code&gt;,&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Downloading and/or building all the necessary protoc-gen plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Downloading and/or building all the necessary gRPC-related support
libraries.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoking protoc for you (on demand), smoothing out the
idiosyncracies of different protoc plugins.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;It works by passing one or more &lt;code&gt;proto_language&lt;/code&gt; specifications to the
&lt;code&gt;proto_compile&lt;/code&gt; rule.  A &lt;code&gt;proto_language&lt;/code&gt; rule contains the metadata
about how to invoke the plugin and the predicted file outputs, while
the &lt;code&gt;proto_compile&lt;/code&gt; rule interprets a &lt;code&gt;proto_language&lt;/code&gt; spec and builds
the appropriate command-line arguments to &lt;code&gt;protoc&lt;/code&gt;.  For example,
here&amp;rsquo;s how we can generate outputs for multiple languages
simultaneously:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; proto_compile(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;pluriproto&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   protos &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:protos&amp;#34;&lt;/span&gt;],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   langs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//cpp&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//csharp&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//closure&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//ruby&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//java&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//java:nano&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//python&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//objc&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;       &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//node&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   verbose &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   with_grpc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; )
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;bazel build :pluriproto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ************************************************************&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;$(&lt;/span&gt;bazel info execution_root&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; bazel-out/host/bin/external/com_github_google_protobuf/protoc &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-grpc-java&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-out/host/genfiles/third_party/protoc_gen_grpc_java/protoc_gen_grpc_java &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-grpc&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-out/host/bin/external/com_github_grpc_grpc/grpc_cpp_plugin &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-grpc-nano&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-out/host/genfiles/third_party/protoc_gen_grpc_java/protoc_gen_grpc_java &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-grpc-csharp&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-out/host/genfiles/external/nuget_grpc_tools/protoc-gen-grpc-csharp &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--plugin&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;protoc-gen-go&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-out/host/bin/external/com_github_golang_protobuf/protoc_gen_go &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--descriptor_set_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles/examples/proto/pluriproto.descriptor_set &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--ruby_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--python_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--cpp_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--grpc_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--objc_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--csharp_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles/examples/proto &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--java_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles/examples/proto/pluriproto_java.jar &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--javanano_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;ignore_services&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;true:bazel-genfiles/examples/proto/pluriproto_nano.jar &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--js_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;import_style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;closure,error_on_name_conflict,binary,library&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;examples/proto/pluriproto:bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--js_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;import_style&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;commonjs,error_on_name_conflict,binary:bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--go_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;plugins&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;grpc,Mexamples/proto/common.proto&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;github.com/pubref/rules_protobuf/examples/proto/pluriproto:bazel-genfiles &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--grpc-java_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles/examples/proto/pluriproto_java.jar &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--grpc-nano_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;ignore_services&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;true:bazel-genfiles/examples/proto/pluriproto_nano.jar &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--grpc-csharp_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;bazel-genfiles/examples/proto &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;--proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;. &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;examples/proto/common.proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ************************************************************&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common_pb.rb
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/pluriproto_java.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/pluriproto_nano.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common_pb2.py
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common.pb.h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common.pb.cc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common.grpc.pb.h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common.grpc.pb.cc
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/Common.pbobjc.h
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/Common.pbobjc.m
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/pluriproto.js
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/Common.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/CommonGrpc.cs
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common.pb.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/common_pb.js
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;examples/proto/pluriproto.descriptor_set
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The various &lt;code&gt;*_proto_library&lt;/code&gt; rules (that we&amp;rsquo;ll be using below)
internally invoke this &lt;code&gt;proto_compile&lt;/code&gt; rule, then consume the
generated outputs and compile them with the requisite libraries into
&lt;code&gt;.class&lt;/code&gt;, &lt;code&gt;.so&lt;/code&gt;, &lt;code&gt;.a&lt;/code&gt; (or whatever) objects.&lt;/p&gt;
&lt;p&gt;So let&amp;rsquo;s &lt;em&gt;make something&lt;/em&gt; already! We&amp;rsquo;ll use bazel and rules_protobuf
to build a gRPC application.&lt;/p&gt;
&lt;h1 id=&#34;building&#34;&gt;2: Building a gRPC service with rules_protobuf&lt;/h1&gt;
&lt;p&gt;The application will involve communication between two
different gRPC services:&lt;/p&gt;
&lt;h2 id=&#34;21-services&#34;&gt;2.1: Services&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The Greeter service&lt;/strong&gt;: This is the familiar &amp;ldquo;Hello World&amp;rdquo; starter
example that accepts a request with a &lt;code&gt;user&lt;/code&gt; argument and replies
back with the string &lt;code&gt;Hello {user}&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;The GreeterTimer service&lt;/strong&gt;: This gRPC service will repeatedly
call a Greeter service in batches and report back aggregate batch
times (in milliseconds).  In this way we can compare some average
rpc times for the different Greeter service implementations.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;This is an informal benchmark intended only for demonstration of
building gRPC applications.  For more formal performance testing,
consult the
&lt;a href=&#34;https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5760820306771968&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC performance dashboard&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;22-compiled-programs&#34;&gt;2.2: Compiled Programs&lt;/h2&gt;
&lt;p&gt;For the demo, we&amp;rsquo;ll use 6 different compiled programs written in 4
languages:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;GreeterTimer&lt;/code&gt; client (go).  This command-line interface requires
the &lt;code&gt;greetertimer.proto&lt;/code&gt; service definition defined locally in the
&lt;code&gt;//proto:greetertimer.proto&lt;/code&gt; file.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A &lt;code&gt;GreeterTimer&lt;/code&gt; server (java).  This netty-based server requires
both the &lt;code&gt;//proto/greetertimer.proto&lt;/code&gt; file and the proto definition
defined externally in
&lt;code&gt;@org_pubref_rules_protobuf//examples/helloworld/proto:helloworld.proto&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Four &lt;code&gt;Greeter&lt;/code&gt; server implementations (C++, java, go, and C#).
rules_protobuf already provides these example implementations, so
we&amp;rsquo;ll just use them directly.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;23-protobuf-definitions&#34;&gt;2.3: Protobuf Definitions&lt;/h2&gt;
&lt;p&gt;GreeterTimer accepts a unary &lt;code&gt;TimerRequest&lt;/code&gt; and streams back a
sequence of &lt;code&gt;BatchReponse&lt;/code&gt; until all messages have been processed, at
which point the remote procedure call is complete.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service GreeterTimer {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Unary request followed by multiple streamed responses.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Response granularity will be set by the request batch size.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  rpc timeHello(TimerRequest) returns (stream BatchResponse);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;TimerRequest&lt;/code&gt; includes metadata about where to contact the Greeter
service, how many total RPC calls to make, and how frequent to stream
back a BatchResponse (configured via the batch size).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message TimerRequest {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// the host where the grpc server is running
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  string host &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The port of the grpc server
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 port &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The total number of hellos
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 total &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The number of hellos before sending a BatchResponse.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 batchSize &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;BatchResponse&lt;/code&gt; reports the number of calls made in the batch, how
long the batch run took, and the number of remaining calls.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message BatchResponse {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The number of checks that are remaining, calculated relative to
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// totalChecks in the request.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 remaining &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The number of checks actually performed in this batch.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 batchCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The number of checks that failed.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int32 errCount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// The total time spent, expressed as a number of milliseconds per
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// request batch size (total time spent performing batchSize number
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// of health checks).
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  int64 batchTimeMillis &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The non-streaming &lt;code&gt;Greeter&lt;/code&gt; service takes a unary &lt;code&gt;HelloRequest&lt;/code&gt; and
responds with a single &lt;code&gt;HelloReply&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;service Greeter {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  rpc SayHello (HelloRequest) returns (HelloReply) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message HelloRequest {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  common.Config config &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;message HelloReply {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  string message &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;The &lt;code&gt;common.Config&lt;/code&gt; message type is not particularly functional here
but serves to demonstrate the use of imports.  rules_protobuf can
help with more complex setups having multiple proto → proto
dependencies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;24-build-the-grpc_greetertimer-example-application&#34;&gt;2.4: Build the grpc_greetertimer example application.&lt;/h2&gt;
&lt;p&gt;This demo application can be cloned at
&lt;a href=&#34;https://github.com/pubref/grpc_greetertimer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/pubref/grpc_greetertimer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;241-create-the-project-layout&#34;&gt;2.4.1: Create the Project Layout&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s the directory layout and relevant BUILD files we&amp;rsquo;ll be using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;mkdir grpc_greetertimer &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; grpc_greetertimer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ mkdir -p proto/ go/ java/org/pubref/grpc/greetertimer/
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch WORKSPACE
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch proto/BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch proto/greetertimer.proto
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch go/BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch go/main.go
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch java/org/pubref/grpc/greetertimer/BUILD
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ touch java/org/pubref/grpc/greetertimer/GreeterTimerServer.java
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;242-the-workspace&#34;&gt;2.4.2: The WORKSPACE&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;ll begin by creating the &lt;a href=&#34;https://github.com/pubref/grpc_greetertimer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WORKSPACE&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; file with a
reference to the rules_protobuf repository.  We load the main
entrypoint skylark file
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/blob/master/protobuf/rules.bzl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules.bzl&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
in the &lt;code&gt;//bzl&lt;/code&gt; package and call its &lt;code&gt;protobuf_repositories&lt;/code&gt; function
with the languages to we want to use (in this case &lt;code&gt;java&lt;/code&gt; and &lt;code&gt;go&lt;/code&gt;).
We also load &lt;a href=&#34;https://github.com/bazelbuild/rules_go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules_go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for go
compile support (not shown).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# File //:WORKSPACE&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;workspace(name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org_pubref_grpc_greetertimer&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;git_repository(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org_pubref_rules_protobuf&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    remote &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://github.com/pubref/rules_protobuf.git&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    tag &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;v0.6.0&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Load language-specific dependencies&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//java:rules.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;java_proto_repositories&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_proto_repositories()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//go:rules.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;go_proto_repositories&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_proto_repositories()
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Refer to the
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/protobuf/internal/repositories.bzl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repositories.bzl file&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
if you are interested in inspecting the dependencies.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Bazel won&amp;rsquo;t actually &lt;em&gt;fetch&lt;/em&gt; something unless we actually need it by
some other rule later, so let&amp;rsquo;s go ahead and write some code.  We&amp;rsquo;ll
store our protocol buffer sources in &lt;code&gt;//proto&lt;/code&gt;, our java sources in
&lt;code&gt;//java&lt;/code&gt;, and go source in &lt;code&gt;//go&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: go development within a bazel workspace is a little different
than vanilla go.  In particular, one does not have to adhere to a
typical &lt;code&gt;GOCODE&lt;/code&gt; layout having a &lt;code&gt;src/&lt;/code&gt;, &lt;code&gt;pkg/&lt;/code&gt;, &lt;code&gt;bin/&lt;/code&gt;
subdirectories.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;243-the-greetertimer-server&#34;&gt;2.4.3: The GreeterTimer Server&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/pubref/grpc_greetertimer/blob/master/java/org/pubref/grpc/greetertimer/GreeterTimerServer.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java server&amp;rsquo;s&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
main job is to accept requests and then connect to the requested
Greeter service as a client.  The implementation counts down the
number of remaining messages and does a blocking &lt;code&gt;sayHello(request)&lt;/code&gt;
for each one.  If the batchSize limit is met, the
&lt;code&gt;observer.onNext(response)&lt;/code&gt; message is invoked, streaming back a
response to the client.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;/* File //java/org/pubref/grpc/greetertimer:GreeterTimerServer.java */&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;remaining&lt;span style=&#34;color:#555&#34;&gt;--&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;batchCount&lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; batchSize&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      BatchResponse response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; BatchResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setRemaining&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setBatchCount&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;batchCount&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setBatchTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;batchTime&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setErrCount&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;errCount&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      observer&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;response&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    blockingStub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;sayHello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HelloRequest&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newBuilder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;#&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;244-the-greetertimer-client&#34;&gt;2.4.4: The GreeterTimer Client&lt;/h3&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/pubref/grpc_greetertimer/blob/master/go/main.go&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go client&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
prepares a &lt;code&gt;TimerRequest&lt;/code&gt; and gets back a stream interface from the
&lt;code&gt;client.TimeHello&lt;/code&gt; method.  We call its &lt;code&gt;Recv()&lt;/code&gt; method until EOF, at
which point the call is complete.  A summary of each BatchResponse is
simply printed out to the terminal.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// File: //go:main.go
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;submit&lt;/span&gt;(client greeterTimer.GreeterTimerClient, request &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;greeterTimer.TimerRequest) &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;error&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	stream, err &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; client.&lt;span style=&#34;color:#c0f&#34;&gt;TimeHello&lt;/span&gt;(context.&lt;span style=&#34;color:#c0f&#34;&gt;Background&lt;/span&gt;(), request)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		log.&lt;span style=&#34;color:#c0f&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;could not submit request: %v&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		batchResponse, err &lt;span style=&#34;color:#555&#34;&gt;:=&lt;/span&gt; stream.&lt;span style=&#34;color:#c0f&#34;&gt;Recv&lt;/span&gt;()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; io.EOF {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nil&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color:#555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;nil&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			log.&lt;span style=&#34;color:#c0f&#34;&gt;Fatalf&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;error during batch recv: %v&amp;#34;&lt;/span&gt;, err)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;			&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; err
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#c0f&#34;&gt;reportBatchResult&lt;/span&gt;(batchResponse)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;245-generate-the-go-protobufgrpc-code&#34;&gt;2.4.5: Generate the go protobuf+gRPC code&lt;/h3&gt;
&lt;p&gt;In our &lt;code&gt;//proto:BUILD&lt;/code&gt; file, we have a &lt;code&gt;go_proto_library&lt;/code&gt; rule loaded
from the rules_protobuf repository.  Internally, the rule declares to
bazel that it is responsible for creating &lt;code&gt;greetertimer.pb.go&lt;/code&gt; output
file. This rule won&amp;rsquo;t actually &lt;em&gt;do&lt;/em&gt; anything unless we depend on it
somewhere else.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# File: //proto:BUILD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//go:rules.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;go_proto_library&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_proto_library(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;go_default_library&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    protos &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;greetertimer.proto&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    with_grpc &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;True&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The go client implementation depends on the &lt;code&gt;go_proto_library&lt;/code&gt; as
source file provider to the &lt;code&gt;go_binary&lt;/code&gt; rule.  We also pass in some
compile-time dependencies named in the
&lt;code&gt;GRPC_COMPILE_DEPS&lt;/code&gt; list.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@io_bazel_rules_go//go:def.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;go_binary&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;load(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//go:rules.bzl&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;GRPC_COMPILE_DEPS&amp;#34;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go_binary(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello_client&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;main.go&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;//proto:go_default_library&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ] &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; GRPC_COMPILE_DEPS,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ bazel build //go:client
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here&amp;rsquo;s what happens when we invoke bazel to actually build the client
binary:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Bazel checks to see if the inputs (files) that the binary depends
on have changed (by content hash and filestamps).  Bazel recognizes
that the output files for the &lt;code&gt;//proto:go_default_library&lt;/code&gt; have not
been built.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bazel checks to see if all the necessary inputs (including tools)
for the &lt;code&gt;go_proto_library&lt;/code&gt; are available.  If not, download and
build all the necessary tools.  Then, invoke the rule.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Fetch the &lt;code&gt;google/protobuf&lt;/code&gt; repository and build &lt;code&gt;protoc&lt;/code&gt; from
source (via a cc_binary rule).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build the &lt;code&gt;protoc-gen-go&lt;/code&gt; plugin from source (via a go_binary
rule).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Invoke &lt;code&gt;protoc&lt;/code&gt; with the &lt;code&gt;protoc-gen-go&lt;/code&gt; plugin with the
appropriate options and arguments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Confirm that all the declared outputs of the &lt;code&gt;go_proto_library&lt;/code&gt;
where actually built (should be in &lt;code&gt;bazel-bin/proto/greetertimer.pb.go&lt;/code&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Compile the generated &lt;code&gt;greetertimer.pb.go&lt;/code&gt; with the client
&lt;code&gt;main.go&lt;/code&gt; file, creating the &lt;code&gt;bazel-bin/go/client&lt;/code&gt; executable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;246-generate-the-java-protobuf-libraries&#34;&gt;2.4.6: Generate the java protobuf libraries&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;java_proto_library&lt;/code&gt; rule is functionally identical to the
&lt;code&gt;go_proto_library&lt;/code&gt; rule.  However, instead of providing a &lt;code&gt;*.pb.go&lt;/code&gt;
file, it bundles up all the generated outputs into a &lt;code&gt;*.srcjar&lt;/code&gt; file
(which is then used as an input to the &lt;code&gt;java_library&lt;/code&gt; rule).  This an
implementation detail of the java rule.  Here is how we build the
final java binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;java_binary(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    name &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;server&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    main_class &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;org.pubref.grpc.greetertimer.GreeterTimerServer&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    srcs &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;GreeterTimerServer.java&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    deps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;:timer_protos&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//examples/helloworld/proto:java&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//java:grpc_compiletime_deps&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    runtime_deps &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;@org_pubref_rules_protobuf//java:netty_runtime_deps&amp;#34;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;:timer_protos&lt;/code&gt; is a locally defined &lt;code&gt;java_proto_library&lt;/code&gt; rule.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The &lt;code&gt;@org_pubref_rules_protobuf//examples/helloworld/proto:java&lt;/code&gt; is
an external &lt;code&gt;java_proto_library&lt;/code&gt; rule that generates the greeter service
client stub in our own workspace.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Finally, we name the compile-time and run-time dependencies for the
executable jar.  If these jar files have not yet been downloaded from
maven central, they will be fetch as soon as we need them:&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ bazel build java/org/pubref/grpc/greetertimer:server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ bazel build java/org/pubref/grpc/greetertimer:server_deploy.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This last form (having the extra &lt;code&gt;_deploy.jar&lt;/code&gt;) is called an &lt;em&gt;implicit
target&lt;/em&gt; of the &lt;code&gt;:server&lt;/code&gt; rule.  When invoked this way, bazel will pack
up all the required classes and generate a standalone executable jar
that can be run independently in a jvm.&lt;/p&gt;
&lt;h3 id=&#34;247-run-it&#34;&gt;2.4.7: Run it!&lt;/h3&gt;
&lt;p&gt;First, we&amp;rsquo;ll start a greeter server (one at a time):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ &lt;span style=&#34;color:#366&#34;&gt;cd&lt;/span&gt; ~/rules_protobuf
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/go/server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/cpp/server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:netty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/csharp/GreeterServer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;INFO: Server started, listening on &lt;span style=&#34;color:#f60&#34;&gt;50051&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In a separate terminal, start the greetertimer server:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ bazel build //java/org/pubref/grpc/greetertimer:server_deploy.jar
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greetertimer$ java -jar bazel-bin/java/org/pubref/grpc/greetertimer/server_deploy.jar
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Finally, in a third terminal, invoke the greetertimer client:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Timings for the java server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/java/org/pubref/rules_protobuf/examples/helloworld/server:netty
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greeterclient$ bazel run //go:client -- -total_size &lt;span style=&#34;color:#f60&#34;&gt;10000&lt;/span&gt; -batch_size &lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:04 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;8999&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 1.7 hellos/ms or ~590µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# ... plus a few runs to warm up the jvm...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;8999&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~149µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;7998&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;6997&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 8.9 hellos/ms or ~112µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;5996&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.2 hellos/ms or ~109µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;4995&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.4 hellos/ms or ~106µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;3994&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;2993&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.4 hellos/ms or ~107µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;1992&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.4 hellos/ms or ~107µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:13 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.1 hellos/ms or ~110µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:31:14 &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, -1 remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello&lt;span style=&#34;color:#c30&#34;&gt;```&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#c30&#34;&gt;```&lt;/span&gt;sh
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Timings for the go server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/go/server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greeterclient$ bazel run //go:client -- -total_size &lt;span style=&#34;color:#f60&#34;&gt;10000&lt;/span&gt; -batch_size &lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:33 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;8999&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.5 hellos/ms or ~134µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:33 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;7998&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.9 hellos/ms or ~127µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;6997&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.8 hellos/ms or ~128µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;5996&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.7 hellos/ms or ~130µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;4995&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.9 hellos/ms or ~126µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;3994&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 8.0 hellos/ms or ~125µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;2993&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.6 hellos/ms or ~132µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;1992&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.9 hellos/ms or ~126µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.9 hellos/ms or ~127µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:32:34 &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, -1 remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 7.8 hellos/ms or ~128µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Timings for the C++ server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/cpp:server
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greeterclient$ bazel run //go:client -- -total_size &lt;span style=&#34;color:#f60&#34;&gt;10000&lt;/span&gt; -batch_size &lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;8999&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.1 hellos/ms or ~110µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;7998&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;6997&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.1 hellos/ms or ~110µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;5996&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 8.6 hellos/ms or ~116µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;4995&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;3994&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;2993&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.1 hellos/ms or ~110µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;1992&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:10 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:33:11 &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, -1 remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 9.0 hellos/ms or ~111µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Timings for the C# server&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/rules_protobuf$ bazel run examples/helloworld/csharp/GreeterServer
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;~/grpc_greeterclient$ bazel run //go:client -- -total_size &lt;span style=&#34;color:#f60&#34;&gt;10000&lt;/span&gt; -batch_size &lt;span style=&#34;color:#f60&#34;&gt;1000&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:37 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;8999&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.0 hellos/ms or ~166µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:37 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;7998&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~150µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:37 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;6997&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.8 hellos/ms or ~148µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:37 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;5996&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.8 hellos/ms or ~147µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:37 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;4995&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~150µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:38 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;3994&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~150µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:38 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;2993&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~149µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:38 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;1992&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.7 hellos/ms or ~149µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:38 &lt;span style=&#34;color:#f60&#34;&gt;1001&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.8 hellos/ms or ~148µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;17:34:38 &lt;span style=&#34;color:#f60&#34;&gt;991&lt;/span&gt; hellos &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; errs, -1 remaining&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;: 6.8 hellos/ms or ~147µs per hello
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The informal analysis demonstrated comparable timings for c++, go, and
java greeter service implementations.  The c++ server had the overall
fastest and most consistent performance.  The go implementation was
also very consistent, but slightly slower than C++.  Java demonstrated
some initial relative slowness likely due to the JVM warming up but
soon converged on timings similar to the C++ implementation.  C# has
consistent performance but marginally slower.&lt;/p&gt;
&lt;h2 id=&#34;25-summary&#34;&gt;2.5: Summary&lt;/h2&gt;
&lt;p&gt;Bazel assists in the construction of gRPC applications by providing a
capable build environment for services built in a multitude of
languages.  &lt;a href=&#34;https://github.com/pubref/rules_protobuf/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rules_protobuf&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; complements bazel by packaging up all the
dependencies needed and abstracting away the need to call protoc
directly.&lt;/p&gt;
&lt;p&gt;In this workflow one does not need to check in the generated source code
(it is always generated on-demand within your workspace).  For
projects that &lt;em&gt;do&lt;/em&gt; require this, one can use the &lt;code&gt;output_to_workspace&lt;/code&gt; option to place the generated
files alongside the protobuf definitions.&lt;/p&gt;
&lt;p&gt;Finally, rules_protobuf has full support for the
&lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-gateway&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; project
via the
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/tree/master/grpc_gateway#grpc_gateway_proto_library&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc_gateway_proto_library&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
and
&lt;a href=&#34;https://github.com/pubref/rules_protobuf/tree/master/grpc_gateway#grpc_gateway_binary&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc_gateway_binary&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; rules, so you can easily bridge your gRPC apps with HTTP/1.1 gateways.&lt;/p&gt;
&lt;p&gt;Refer to the &lt;a href=&#34;https://github.com/pubref/rules_protobuf/#rules&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;complete list of supported languages and gRPC versions&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for more information.&lt;/p&gt;
&lt;p&gt;And&amp;hellip; that&amp;rsquo;s a wrap.  Happy procedure calling!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Paul Johnston is the principal at &lt;a href=&#34;https://pubref.org&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PubRef&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
(&lt;a href=&#34;https://twitter.com/pub_ref&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@pub_ref&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;), a solutions provider for
scientific communications workflows.  If you have an organizational
need for assistance with Bazel, gRPC, or related technologies,
please contact &lt;a href=&#34;mailto:pcj@pubref.org&#34;&gt;pcj@pubref.org&lt;/a&gt;.  Thanks!&lt;/p&gt;
&lt;/blockquote&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC at VSCO</title>
      <link>https://grpc.io/blog/vsco/</link>
      <pubDate>Tue, 06 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/vsco/</guid>
      <description>
        
        
        &lt;p&gt;Our guest post today comes from Robert Sayre and Melinda Lu of VSCO.&lt;/p&gt;
&lt;p&gt;Founded in 2011, &lt;a href=&#34;https://vsco.co&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;VSCO&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a community for expression—empowering people to create, discover and connect through images and words. VSCO is in the process of migrating their stack to gRPC.&lt;/p&gt;
&lt;p&gt;In 2015, user growth forced VSCO down a familiar path. A monolithic PHP application in existence since the early days of the company was exhibiting performance problems and becoming difficult to maintain. We experimented with some smaller services in node.js, Go, and Java. At the same time, a larger messaging service for email, push messages, and in-app notifications was built in Go. Taking a first step away from JSON, we chose &lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Protocol Buffers&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; as the serialization format for this system.&lt;/p&gt;
&lt;p&gt;Today, VSCO has largely settled on Go for new services. There are exceptions, particularly where a mature JVM solution is available for a given problem. Additionally, VSCO uses node.js for web applications, often with server-side &lt;a href=&#34;https://facebook.github.io/react/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;React&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Given that mix of languages, services, and some future data pipeline work detailed below, VSCO settled on gRPC and Protocol Buffers as the most practical solution for interprocess communication. A gradual migration from JSON over HTTP/1.1 APIs to gRPC over HTTP/2 is underway and going well. That said, there have been issues with the maturity of the PHP implementation relative to other languages.&lt;/p&gt;
&lt;p&gt;Protocol buffers have been particularly valuable in building out our data ecosystem, where we rely on them to standardize and allow safe evolution of our data schemas in a language-agnostic way. As one example, we’ve built a Go service that feeds off our MySQL and MongoDB database replication logs and transforms backend database changes into a stream of immutable events in Kafka, with each row- or document-change event encoded as a protocol buffer. This database event stream allows us to add real-time data consumers as desired, without impacting production traffic and without having to coordinate with other systems. By processing all database events into protocol buffers en-route to Kafka, we can ensure that data is encoded in a uniform way that makes it easy to consume and use from multiple languages. Our implementation of &lt;a href=&#34;https://github.com/vsco/autobahn-binlog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MySQL-binary-log&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/vsco/autobahn-oplog&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Mongo-oplog&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; tailers are available on GitHub.&lt;/p&gt;
&lt;p&gt;Elsewhere in our data pipeline, we’ve begun using gRPC and protocol buffers to deliver behavioral events from our iOS and Android clients to a Go ingestion service, which then publishes these events to Kafka. To support this high-volume use case, we needed (1) a performant, fault-tolerant, language-agnostic RPC framework, (2) a way to ensure data compatibility as our product evolves, and (3) horizontally-scalable infrastructure. We’ve found gRPC, protocol buffers, and Go services running in Kubernetes a good fit for all three. As this was our first client-facing Go gRPC service, we did experience some new points of friction — in particular, load-balancer support and amenities like curl-like debugging have been lagging due to the youth of the HTTP/2 ecosystem. However, the ease of defining services with the gRPC IDL, using built-in architecture like interceptors, and scaling with Go have made the tradeoffs worthwhile.&lt;/p&gt;
&lt;p&gt;As a first step in bringing gRPC to our mobile clients, we’ve shipped telemetry code in our iOS and Android apps. As of gRPC 1.0, this process is relatively straightforward. They only post events to our servers so far, and don’t do much with gRPC responses. The previous implementation was based on JSON, and our move to a single protocol buffer definition of our events uncovered a bunch of subtle bugs and differences between the clients.&lt;/p&gt;
&lt;p&gt;One slight roadblock we ran into was the need for our clients to maintain compatibility with our JSON implementation as we ramp up, and for integration with vendor SDKs. This required a little bit of key-value coding on iOS, but it got more difficult on Android. We ended up having to write a protobuf compiler plugin to get the reflection features we needed while maintaining adequate performance. Drawing from that experience, we’ve made a concise &lt;a href=&#34;https://github.com/vsco/protoc-demo&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;example protoc plugin&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; built with &lt;a href=&#34;https://bazel.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Bazel&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; available on GitHub.&lt;/p&gt;
&lt;p&gt;As more and more of our data becomes available in protocol buffer form, we plan to build upon this unified schema to expand our machine-learning and analytics systems. For example, we write our Kafka database replication streams to Amazon S3 as &lt;a href=&#34;https://parquet.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache Parquet&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, an efficient columnar disk-storage format. Parquet has low-level support for protocol buffers, so we can use our existing data definitions to write optimized tables and do partial deserializations where desired.&lt;/p&gt;
&lt;p&gt;From S3, we run computations on our data using Apache Spark, which can use our protocol buffer definitions to define types. We’re also building new machine-learning applications with &lt;a href=&#34;https://www.tensorflow.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorFlow&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. It uses protocol buffers natively and allows us to serve our models as gRPC services with &lt;a href=&#34;https://tensorflow.github.io/serving/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TensorFlow Serving&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;So far, we’ve had good luck with gRPC and Protocol Buffers. They don’t eliminate every integration headache. However it’s easy to see how they help our engineers avoid writing a lot of boilerplate RPC code, while side-stepping the endless data-quality papercuts that come with looser serialization formats.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Why we have decided to move our APIs to gRPC</title>
      <link>https://grpc.io/blog/vendasta/</link>
      <pubDate>Mon, 29 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/vendasta/</guid>
      <description>
        
        
        &lt;p&gt;Vendasta started out 8 years ago as a point solution provider of products for small business. From the beginning we partnered with media companies and agencies who have armies of salespeople and existing relationships with those businesses to sell our software. It is estimated that over 30 million small businesses exist in the United States alone, so scalability of our SaaS solution was considered one of our top concerns from the beginning and it was the reason we started with &lt;a href=&#34;https://cloud.google.com/appengine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google App Engine&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and Datastore. This solution worked really well for us as our system scaled from hundreds to hundreds of thousands of end users. We also scaled our offering from a point solution to an entire platform with multiple products and the tools for partners to manage their sales of those products during this time.&lt;/p&gt;
&lt;p&gt;All throughout this journey Python GAE served our needs well. We exposed a number of APIs via HTTP + JSON for our partners to automate tasks and integrate their other systems with our products and platform. However, in 2016 we introduced the Vendasta Marketplace. This marked a major change to our offering, which depended heavily on having 3rd party vendors use our APIs to deliver their own products in our platform. This was a major change because our public APIs provide an upper-bound on 3rd-party applications, and made us realize that we really needed to make APIs that were amazing, not just good.&lt;/p&gt;
&lt;p&gt;The first optimization that we started with was to use the Go programming language to build endpoints that handled higher throughput with lower latency than we could get with Python. On some APIs this made an incredible difference: we saw 50th percentile response times to drop from 1200 ms to 4 ms, and even more spectacularly 99th percentile response times drop from 30,000 ms to 12 ms! On other APIs we saw a much smaller, but still significant difference.&lt;/p&gt;
&lt;p&gt;The second optimization we used was to replicate large portions of our Datastore data into ElasticSearch. ElasticSearch is a fundamentally different storage technology to Datastore, and is not a managed service, so it was a big leap for us. But this change allowed us to migrate almost all of our overnight batch-processing APIs to real-time APIs.   We had tried BigQuery, but it&amp;rsquo;s query processing times meant that we couldn&amp;rsquo;t display things in real time.  We had tried cloudSQL, but there was too much data for it to easily scale.  We had tried the appengine Search API, but it has limitations with result sets over 10,000.  We instead scaled up our ElasticSearch cluster using &lt;a href=&#34;https://cloud.google.com/container-engine/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Container Engine&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and with it&amp;rsquo;s powerful aggregations and facet processing our needs were easily met.  So with these first two solutions in place, we had made meaningful changes to the performance of our APIs.&lt;/p&gt;
&lt;p&gt;The last optimization we made was to move our APIs to &lt;a href=&#34;https://grpc.io/&#34;&gt;gRPC&lt;/a&gt;. This change was much more extensive than the others as it affected our clients. Like ElasticSearch, it represents a fundamentally different model with differing performance characteristics, but unlike ElasticSearch we found it to be a true superset: all of our usage scenarios were impacted positively by it.&lt;/p&gt;
&lt;p&gt;The first benefit we saw from gRPC was the ability to move from publishing APIs and asking developers to integrate with them, to releasing SDKs and asking developers to copy-paste example code written in their language. This represents a really big benefit for people looking to integrate with our products, while not requiring us to hand-roll entire SDKs in the 5+ languages our partners and vendors use. It is important to note that we still write light wrappers over the generated gRPC SDKs to make them package-manager friendly, and to provide wrappers over the generated protobuf structures.&lt;/p&gt;
&lt;p&gt;The second benefit we saw from gRPC was the ability to break free from the call-and-response architecture necessitated by HTTP + JSON. gRPC is built on top of HTTP/2, which allows for client-side and/or server-side streaming. In our use cases, this means we can lower the time to first display by streaming results as they become ready on the server (server-side streaming).  We have also been investigating the potential to offer very flexible create endpoints that easily support bulk ingestion with bi-directional streaming, this would mean we would allow the client to asynchronously stream results, while the server would stream back statuses allowing for easy checkpoint operations while not slowing upload speeds to wait for confirmations. We feel that we are just starting to see the benefits from this feature as it opens up a totally new model for client-server interactions that just wasn&amp;rsquo;t possible with HTTP.&lt;/p&gt;
&lt;p&gt;The third benefit was the switch from JSON to protocol buffers, which works very well with gRPC. This improves serialization and deserialization times; which is very significant to some of our APIs, but appreciated on all of them. The more important benefit comes from the explicit format specification of proto, meaning that clients receive typed objects rather than free-form JSON. Because of this, our clients can reap the benefits of auto-completion in their IDEs, type-safety if their language supports it, and enforced compatibility between clients and servers with differing versions.&lt;/p&gt;
&lt;p&gt;The final benefit of gRPC was our ability to quickly spec endpoints. The proto format for both data and service definition greatly simplifies defining new endpoints and finally allows the succinct definition of endpoint contracts.  This means we are much better able to communicate endpoint specifications between our development teams.  gRPC means that for the first time at our company we are able to simultaneously develop the client and the server side of our APIs!  This means our latency to produce new APIs with the accompanying SDKs has dropped dramatically.  Combined with code generation, it allows us to truly develop clients and servers in parallel.&lt;/p&gt;
&lt;p&gt;Our experience with gRPC has been positive, even though it does not eliminate the difficulty of providing endpoints to partners and vendors, and address all of our performance issues. However, it does make improvements to our endpoint performance, integration with those endpoints, and even in delivery of SDKs.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: gRPC Project is now 1.0 and ready for production deployments</title>
      <link>https://grpc.io/blog/ga-announcement/</link>
      <pubDate>Tue, 23 Aug 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/ga-announcement/</guid>
      <description>
        
        
        &lt;p&gt;Today, the gRPC project has reached a significant milestone with its &lt;a href=&#34;https://github.com/grpc/grpc/releases&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;1.0 release&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
Languages moving to 1.0 include C++, Java, Go, Node, Ruby, Python and C# across Linux, Windows, and Mac. Objective-C and Android Java support on iOS and Android is also moving to 1.0. The 1.0 release means that the core protocol and API surface are now stable with measured performance, stress tested and developers can rely on these APIs and deploy in production, they will follow semantic versioning from here.&lt;/p&gt;
&lt;p&gt;We are very excited about the progress we have made so far and would like to thank all our users and contributors. First announced in March 2015 with &lt;a href=&#34;https://corner.squareup.com/2015/02/grpc.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Square&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, gRPC is already being used in many open source projects like &lt;a href=&#34;https://github.com/coreos/etcd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etcd&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from CoreOS, &lt;a href=&#34;https://github.com/docker/containerd&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;containerd&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from Docker, &lt;a href=&#34;https://github.com/cockroachdb/cockroach&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;cockroachdb&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from Cockroach Labs, and by many other companies like &lt;a href=&#34;https://vendasta.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Vendasta&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/Netflix/ribbon&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Netflix&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;http://yikyakapp.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;YikYak&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;http://carbon3d.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Carbon 3d&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  Outside of microservices, telecom giants like &lt;a href=&#34;https://github.com/CiscoDevNet/grpc-getting-started&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Cisco&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/Juniper/open-nti&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Juniper&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/aristanetworks/goarista&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Arista&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, and Ciena, are building support for streaming telemetry and network configuration from their network devices using gRPC, as part of &lt;a href=&#34;http://www.openconfig.net/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenConfig&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; effort.&lt;/p&gt;
&lt;p&gt;From the beta release, we have made significant strides in the areas of usability, interoperability, and performance measurement on the &lt;a href=&#34;https://www.youtube.com/watch?v=_vfbVJ_u5mE&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;road to 1.0&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. In most of the languages, the &lt;a href=&#34;https://grpc.io/blog/installation/&#34;&gt;installation of the gRPC runtime&lt;/a&gt; as well as setup of a development environment is a single command. Beyond installation, we have set up automated tests for gRPC across languages and RPC types in order to stress test our APIs and ensure interoperability. There is now a &lt;a href=&#34;https://goo.gl/tHPEfD&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;performance dashboard&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; available in the open to see latency and throughput for unary and streaming ping pong for various languages. Other measurements have shown significant gains from using gRPC/Protobuf instead of HTTP/JSON such as in &lt;a href=&#34;https://blog.gopheracademy.com/advent-2015/etcd-distributed-key-value-store-with-grpc-http2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreOS blogpost&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and in &lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/03/announcing-grpc-alpha-for-google-cloud-pubsub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud PubSub testing&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. In the coming months, we will invest a lot more in performance tuning.&lt;/p&gt;
&lt;p&gt;Even within Google, we have seen Google cloud APIs like &lt;a href=&#34;https://cloudplatform.googleblog.com/2015/07/A-Go-client-for-Google-Cloud-Bigtable.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BigTable&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, PubSub, &lt;a href=&#34;https://github.com/GoogleCloudPlatform/java-docs-samples/tree/master/speech/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Speech&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, launch of a gRPC-based API surface leading to ease of use and performance benefits. Products like &lt;a href=&#34;https://research.googleblog.com/2016/02/running-your-models-in-production-with.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Tensorflow&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; have effectively used gRPC for inter-process communication as well.
Beyond usage, we are keen to see the contributor community grow with gRPC. We are already starting to see contributions around gRPC in meaningful ways in the &lt;a href=&#34;https://github.com/grpc-ecosystem&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-ecosystem&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; organization. We are very happy to see projects like &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-gateway&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to enable users to serve REST clients with gRPC based services, &lt;a href=&#34;https://github.com/grpc-ecosystem/polyglot&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Polyglot&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to have a CLI for gRPC, &lt;a href=&#34;https://github.com/grpc-ecosystem/go-grpc-prometheus&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Prometheus monitoring&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; of gRPC Services and work with &lt;a href=&#34;https://github.com/grpc-ecosystem/grpc-opentracing&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTracing&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. You can suggest and contribute projects to this organization &lt;a href=&#34;https://docs.google.com/a/google.com/forms/d/119zb79XRovQYafE9XKjz9sstwynCWcMpoJwHgZJvK74/edit&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. We look forward to working with the community to take the gRPC project to new heights.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Blog: Mobile Benchmarks</title>
      <link>https://grpc.io/blog/mobile-benchmarks/</link>
      <pubDate>Tue, 26 Jul 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/mobile-benchmarks/</guid>
      <description>
        
        
        &lt;p&gt;As gRPC has become a better and faster RPC framework, we&amp;rsquo;ve consistently gotten the question, &amp;ldquo;How &lt;em&gt;much&lt;/em&gt; faster is gRPC?&amp;rdquo; We already have comprehensive server-side benchmarks, but we don&amp;rsquo;t have mobile benchmarks. Benchmarking a client is a bit different than benchmarking a server. We care more about things such as latency and request size and less about things like queries per second (QPS) and number of concurrent threads. Thus we built an Android app in order to quantify these factors and provide solid numbers behind them.&lt;/p&gt;
&lt;p&gt;Specifically what we want to benchmark is client side protobuf vs. JSON serialization/deserialization and gRPC vs. a RESTful HTTP JSON service. For the serialization benchmarks, we want to measure the size of messages and speed at which we serialize and deserialize. For the RPC benchmarks, we want to measure the latency of end-to-end requests and packet size.&lt;/p&gt;
&lt;h2 id=&#34;protobuf-vs-json&#34;&gt;Protobuf vs. JSON&lt;/h2&gt;
&lt;p&gt;In order to benchmark protobuf and JSON, we ran serializations and deserializations over and over on randomly generated protos, which can be seen &lt;a href=&#34;https://github.com/david-cao/gRPCBenchmarks/tree/master/protolite_app/app/src/main/proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. These protos varied quite a bit in size and complexity, from just a few bytes to over 100kb. JSON equivalents were created and then also benchmarked. For the protobuf messages, we had three main methods of serializing and deserializing: simply using a byte array, &lt;code&gt;CodedOutputStream&lt;/code&gt;/&lt;code&gt;CodedInputStream&lt;/code&gt; which is protobuf&amp;rsquo;s own implementation of input and output streams, and Java&amp;rsquo;s &lt;code&gt;ByteArrayOutputStream&lt;/code&gt; and &lt;code&gt;ByteArrayInputStream&lt;/code&gt;. For JSON we used &lt;code&gt;org.json&lt;/code&gt;&amp;rsquo;s &lt;a href=&#34;https://developer.android.com/reference/org/json/JSONObject.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;JSONObject&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. This only had one method to serialize and deserialize, &lt;code&gt;toString()&lt;/code&gt; and &lt;code&gt;new JSONObject()&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;In order to keep benchmarks as accurate as possible, we wrapped the code to be benchmarked in an interface and simply looped it for a set number of iterations. This way we discounted any time spent checking the system time.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Action&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Sample benchmark of multiplication
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;Action a &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Action&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; x &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 1000 &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; 123456&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 0&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt; i &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; 100&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;++&lt;/span&gt;i&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    a&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;execute&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Before running a benchmark, we ran a warmup in order to clean out any erratic behaviour by the JVM, and then calculated the number of iterations needed to run for a set time (10 seconds in the protobuf vs. JSON case). To do this, we started with 1 iteration, measured the time it took for that run, and compared it to a minimum sample time (2 seconds in our case). If the number of iterations took long enough, we estimated the number of iterations needed to run for 10 seconds by doing some math. Otherwise, we multiplied the number of iterations by 2 and repeated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// This can be found in ProtobufBenchmarker.java benchmark()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; iterations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 1&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Time action simply reports the time it takes to run a certain action for that number of iterations
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;long&lt;/span&gt; elapsed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; timeAction&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;action&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; iterations&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;elapsed &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt; MIN_SAMPLE_TIME_MS&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    iterations &lt;span style=&#34;color:#555&#34;&gt;*=&lt;/span&gt; 2&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    elapsed &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; timeAction&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;action&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; iterations&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Estimate number of iterations to run for 10 seconds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;iterations &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;((&lt;/span&gt;TARGET_TIME_MS &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;double&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; elapsed&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt; iterations&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;results&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;Benchmarks were run on protobuf, JSON, and gzipped JSON.&lt;/p&gt;
&lt;p&gt;We found that regardless of the serialization/deserialization method used for protobuf, it was consistently about 3x faster for serializing than JSON. For deserialization, JSON is actually a bit faster for small messages (&amp;lt;1kb), around 1.5x, but for larger messages (&amp;gt;15kb) protobuf is 2x faster. For gzipped JSON, protobuf is well over 5x faster in serialization, regardless of size. For deserialization, both are about the same at small messages, but protobuf is about 3x faster for larger messages. Results can be explored in more depth and replicated &lt;a href=&#34;https://github.com/david-cao/gRPCBenchmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;in the README&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;grpc-vs-http-json&#34;&gt;gRPC vs. HTTP JSON&lt;/h2&gt;
&lt;p&gt;To benchmark RPC calls, we want to measure end-to-end latency and bandwidth. To do this, we ping pong with a server for 60 seconds, using the same message each time, and measure the latency and message size. The message consists of some fields for the server to read, and a payload of bytes. We compared gRPC&amp;rsquo;s unary call to a simple RESTful HTTP JSON service. The gRPC benchmark creates a channel, and starts a unary call that repeats when it recieves a response until 60 seconds have passed. The response contains a proto with the same payload sent.&lt;/p&gt;
&lt;p&gt;Similarly for the HTTP JSON benchmarks, it sends a POST request to the server with an equivalent JSON object, and the server sends back a JSON object with the same payload.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// This can be found in AsyncClient.java doUnaryCalls()
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Make stub to send unary call
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; BenchmarkServiceStub stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; BenchmarkServiceGrpc&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;newStub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;channel&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;unaryCall&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; StreamObserver&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;SimpleResponse&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;long&lt;/span&gt; lastCall &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;nanoTime&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Do nothing on next
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;onNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;SimpleResponse value&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;onError&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Throwable t&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Status status &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Status&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;fromThrowable&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;t&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;err&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Encountered an error in unaryCall. Status is &amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt; status&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        t&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;printStackTrace&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        future&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;cancel&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Repeat if time isn&amp;#39;t reached
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;onCompleted&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;long&lt;/span&gt; now &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;nanoTime&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Record the latencies in microseconds
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;        histogram&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;recordValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;((&lt;/span&gt;now &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt; lastCall&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;/&lt;/span&gt; 1000&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        lastCall &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; now&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        Context prevCtx &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Context&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;ROOT&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;attach&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;endTime &lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; now&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                stub&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;unaryCall&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;                future&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;done&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;            Context&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;current&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;detach&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;prevCtx&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;});&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Both &lt;code&gt;HttpUrlConnection&lt;/code&gt; and the &lt;a href=&#34;https://square.github.io/okhttp/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OkHttp library&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; were used.&lt;/p&gt;
&lt;p&gt;Only gRPC&amp;rsquo;s unary calls were benchmarked against HTTP, since streaming calls were over 2x faster than the unary calls. Moreover, HTTP has no equivalent of streaming, which is an HTTP/2 specific feature.&lt;/p&gt;
&lt;h2 id=&#34;results-1&#34;&gt;Results&lt;/h2&gt;
&lt;p&gt;In terms of latency, gRPC is &lt;strong&gt;5x-10x&lt;/strong&gt; faster up to the 95th percentile, with averages of around 2 milliseconds for an end-to-end request. For bandwidth, gRPC is about 3x faster for small requests (100-1000 byte payload), and consistently 2x faster for large requests (10kb-100kb payload). To replicate these results or explore in more depth, check out our &lt;a href=&#34;https://github.com/david-cao/gRPCBenchmarks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC with REST and Open APIs</title>
      <link>https://grpc.io/blog/coreos/</link>
      <pubDate>Mon, 09 May 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/coreos/</guid>
      <description>
        
        
        &lt;p&gt;Our guest post today comes from Brandon Phillips of &lt;a href=&#34;https://coreos.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CoreOS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. CoreOS builds open source projects and products for Linux Containers. Their flagship product for consensus and discovery &lt;a href=&#34;https://coreos.com/etcd/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etcd&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and their container engine &lt;a href=&#34;https://coreos.com/rkt/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;rkt&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; are early adopters of gRPC.&lt;/p&gt;
&lt;p&gt;One of the key reasons CoreOS chose gRPC is because it uses HTTP/2, enabling applications to present both a HTTP 1.1 REST/JSON API and an efficient gRPC interface on a single TCP port (available for Go). This provides developers with compatibility with the REST web ecosystem, while advancing a new, high-efficiency RPC protocol. With the recent release of Go 1.6, Go ships with a stable &lt;code&gt;net/http2&lt;/code&gt; package by default.&lt;/p&gt;
&lt;p&gt;Since many CoreOS clients speak HTTP 1.1 with JSON, gRPC&amp;rsquo;s easy interoperability with JSON and the &lt;a href=&#34;https://github.com/OAI/OpenAPI-Specification&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Open API Specification&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (formerly Swagger) was extremely valuable. For their users who are more comfortable with HTTP/1.1+JSON-based and Open API Spec APIs they used a combination of open source libraries to make their gRPC services available in both gRPC and HTTP REST flavors, using API multiplexers to give users the best of both worlds. Let&amp;rsquo;s dive into the details and find out how they did it!&lt;/p&gt;
&lt;h2 id=&#34;a-grpc-application-called-echoservice&#34;&gt;A gRPC application called EchoService&lt;/h2&gt;
&lt;p&gt;In this post we will build a small proof-of-concept gRPC application from a gRPC API definition, add a REST service gateway, and finally serve it all on a single TLS port. The application is called EchoService, and is the web equivalent of the shell command echo: the service returns, or &amp;ldquo;echoes&amp;rdquo;, whatever text is sent to it.&lt;/p&gt;
&lt;p&gt;First, let’s define the arguments to EchoService in a protobuf message called EchoMessage, which includes a single field called value. We will define this message in a protobuf &amp;ldquo;.proto&amp;rdquo; file called &lt;code&gt;service.proto&lt;/code&gt;. Here is our EchoMessage:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;message&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;EchoMessage&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;string&lt;/span&gt; value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;In this same .proto file, we define a gRPC service that takes this data structure and returns it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; EchoService {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; Echo(EchoMessage) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (EchoMessage) {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Running this &lt;code&gt;service.proto&lt;/code&gt; file &amp;ldquo;as is&amp;rdquo; through the Protocol Buffer compiler &lt;code&gt;protoc&lt;/code&gt; generates a stub gRPC service in Go, along with clients in various languages. But gRPC alone isn’t as useful as a service that also exposes a REST interface, so we won’t stop with the gRPC service stub.&lt;/p&gt;
&lt;p&gt;Next, we add the gRPC REST Gateway. This library will build a RESTful proxy on top of the gRPC EchoService. To build this gateway, we add metadata to the EchoService .proto to indicate that the Echo RPC maps to a RESTful POST method with all RPC parameters mapped to a JSON body. The gateway can map RPC parameters to URL paths and query parameters, but we omit those complications here for brevity.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-proto&#34; data-lang=&#34;proto&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;service&lt;/span&gt; EchoService {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rpc&lt;/span&gt; Echo(EchoMessage) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;returns&lt;/span&gt; (EchoMessage) {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;option&lt;/span&gt; (google.api.http) &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;      post&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/v1/echo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;      body&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;*&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;    };&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;  }&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;}&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This means the gateway, once generated by &lt;code&gt;protoc&lt;/code&gt;, can now accept a HTTP request from &lt;code&gt;curl&lt;/code&gt; like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST -k https://localhost:10000/v1/echo -d &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;value&amp;#34;: &amp;#34;CoreOS is hiring!&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The whole system so far looks like this, with a single &lt;code&gt;service.proto&lt;/code&gt; file generating both a gRPC server and a REST proxy:&lt;/p&gt;
&lt;img src=&#34;https://grpc.io/img/grpc-rest-gateway.png&#34; class=&#34;img-responsive&#34; alt=&#34;gRPC API with REST gateway&#34;&gt;
&lt;p&gt;To bring this all together, the echo service creates a Go &lt;code&gt;http.Handler&lt;/code&gt; to detect if the protocol is HTTP/2 and the Content-Type is &amp;ldquo;application/grpc&amp;rdquo;, and sends such requests to the gRPC server. Everything else is routed to the REST gateway. The code looks something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; r.ProtoMajor &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; strings.&lt;span style=&#34;color:#c0f&#34;&gt;Contains&lt;/span&gt;(r.Header.&lt;span style=&#34;color:#c0f&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Content-Type&amp;#34;&lt;/span&gt;), &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;application/grpc&amp;#34;&lt;/span&gt;) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	grpcServer.&lt;span style=&#34;color:#c0f&#34;&gt;ServeHTTP&lt;/span&gt;(w, r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;else&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	otherHandler.&lt;span style=&#34;color:#c0f&#34;&gt;ServeHTTP&lt;/span&gt;(w, r)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To try it out, all you need is a working Go 1.6 development environment and the following simple commands:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;go get -u github.com/philips/grpc-gateway-example
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpc-gateway-example serve
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;With the server running you can try requests on both HTTP 1.1 and gRPC interfaces:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpc-gateway-example &lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; Take a REST from REST with gRPC
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;curl -X POST -k https://localhost:10000/v1/echo -d &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;value&amp;#34;: &amp;#34;CoreOS is hiring!&amp;#34;}&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;One last bonus: because we have an Open API specification, you can browse the Open API UI running at &lt;code&gt;https://localhost:10000/swagger-ui/#!/EchoService/Echo&lt;/code&gt; if you have the server above running on your laptop.&lt;/p&gt;
&lt;img src=&#34;https://grpc.io/img/grpc-swaggerscreen.png&#34; class=&#34;img-responsive&#34; alt=&#34;gRPC/REST Open API document&#34;&gt;
&lt;p&gt;We’ve taken a look at how to use gRPC to bridge to the world of REST. If you want to take a look at the complete project, check out the &lt;a href=&#34;https://github.com/philips/grpc-gateway-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;repo on GitHub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. We think this pattern of using a single protobuf to describe an API leads to an easy to consume, flexible API framework, and we’re excited to leverage it in more of our projects.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC - now with easy installation</title>
      <link>https://grpc.io/blog/installation/</link>
      <pubDate>Mon, 04 Apr 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/installation/</guid>
      <description>
        
        
        &lt;p&gt;Today we are happy to provide an update that significantly simplifies the getting started experience for gRPC.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;For most languages, &lt;strong&gt;the gRPC runtime can now be installed in a single step via native package managers&lt;/strong&gt; such as &lt;code&gt;npm&lt;/code&gt; for Node.js, &lt;code&gt;gem&lt;/code&gt; for Ruby and &lt;code&gt;pip&lt;/code&gt; for Python. Even though our Node, Ruby and Python runtimes are wrapped on gRPC&amp;rsquo;s C core, users now don&amp;rsquo;t need to explicitly pre-install the C core library as a package in most Linux distributions. We autofetch it for you :-).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;For Java, we have simplified the steps needed to add gRPC support to your build tools&lt;/strong&gt; by providing plugins for Maven and Gradle. These let you easily depend on the core runtime to deploy or ship generated libraries into production environments.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You can also use our Dockerfiles to use these updated packages - deploying microservices built on gRPC should now be a very simple experience.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The installation story is not yet complete: we are now focused on improving your development experience by packaging our protocol buffer plugins in the same way as the gRPC runtime. This will simplify code generation and setting up your development environment.&lt;/p&gt;
&lt;h3 id=&#34;want-to-try-it&#34;&gt;Want to try it?&lt;/h3&gt;
&lt;p&gt;Here&amp;rsquo;s how to install the gRPC runtime today in all our supported languages:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Platform&lt;/th&gt;
&lt;th&gt;Command&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Node.js&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;npm install grpc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pip install grpcio&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;gem install grpc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PHP&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;pecl install grpc-beta&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;&lt;code&gt;go get google.golang.org/grpc&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Objective-C&lt;/td&gt;
&lt;td&gt;Mac&lt;/td&gt;
&lt;td&gt;Runtime source fetched automatically from GitHub by CocoaPods&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C#&lt;/td&gt;
&lt;td&gt;Windows&lt;/td&gt;
&lt;td&gt;Install &lt;a href=&#34;https://www.nuget.org/packages/Grpc/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC NuGet package&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; from your IDE (Visual Studio, Monodevelop, Xamarin Studio)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;Use our &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Maven and Gradle plugins&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; that provide gRPC with &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/SECURITY.md#openssl-statically-linked-netty-tcnative-boringssl-static&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;statically linked &lt;code&gt;boringssl&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;Linux, Mac, Windows&lt;/td&gt;
&lt;td&gt;Currently requires &lt;a href=&#34;https://github.com/grpc/grpc/blob/v1.66.0/src/cpp/README.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;manual build and install&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;You can find out more about installation in our &lt;a href=&#34;https://grpc.io/docs/languages/&#34;&gt;quick start pages&lt;/a&gt; and GitHub repositories. Do send us your feedback on our &lt;a href=&#34;https://groups.google.com/g/grpc-io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;mailing list&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or file issues on our issue tracker if you run into any problems.&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: Google Cloud PubSub - with the power of gRPC!</title>
      <link>https://grpc.io/blog/pubsub/</link>
      <pubDate>Thu, 24 Mar 2016 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/pubsub/</guid>
      <description>
        
        
        &lt;p&gt;&lt;a href=&#34;https://cloud.google.com/pubsub/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Cloud PubSub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is Google&amp;rsquo;s scalable real-time messaging service that lets users send and receive messages between independent applications. It&amp;rsquo;s an important part of Google Cloud Platform&amp;rsquo;s big data offering, and is used by customers worldwide to build their own robust, global services. However, until now, the only way to use the Cloud PubSub API was via JSON over HTTP. That&amp;rsquo;s all changed with the release of &lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/03/announcing-grpc-alpha-for-google-cloud-pubsub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PubSub gRPC alpha&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. Now &lt;strong&gt;users can access PubSub via gRPC&lt;/strong&gt; and benefit from all the advantages it brings.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/pubsub/grpc-overview&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alpha instructions and gRPC code&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; are now available for gRPC PubSub in Python and Java.&lt;/p&gt;
&lt;p&gt;But what if you want to use this service now with gRPC in another language - C#, say, or Ruby? Once you have a Google account, with a little bit of extra work you can do that too! You can use the tools and the instructions on &lt;a href=&#34;https://grpc.io/docs/&#34;&gt;our site&lt;/a&gt; to generate and use your own gRPC client code from the PubSub service&amp;rsquo;s &lt;code&gt;.proto&lt;/code&gt; file, available from &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/master/google/pubsub/v1/pubsub.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/blog/big-data/2016/03/announcing-grpc-alpha-for-google-cloud-pubsub&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Read the full Google Cloud PubSub announcement&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/pubsub/docs&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Find out more about using Google Cloud PubSub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/p&gt;
      </description>
    </item>
    
    <item>
      <title>Blog: gRPC releases Beta, opening door for use in production environments</title>
      <link>https://grpc.io/blog/beta-release/</link>
      <pubDate>Mon, 26 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/blog/beta-release/</guid>
      <description>
        
        
        &lt;p&gt;The gRPC team is excited to announce the immediate availability of gRPC Beta. This release marks an important point in API stability and going forward most API changes are expected to be additive in nature. This milestone opens the door for gRPC use in production environments.&lt;/p&gt;
&lt;p&gt;We’re also taking a big step forward in improving the installation process. Over the past few weeks we’ve rolled out gRPC packages to &lt;a href=&#34;https://packages.debian.org/jessie-backports/libgrpc0&#34;&gt;Debian Stable/Backports&lt;/a&gt;. Installation in most cases is now a two line install using the Debian package and available language specific package managers (&lt;a href=&#34;https://search.maven.org/#artifactdetails%7Cio.grpc%7Cgrpc-core%7C0.9.0%7Cjar&#34;&gt;maven&lt;/a&gt;, &lt;a href=&#34;https://pypi.python.org/pypi/grpcio&#34;&gt;pip&lt;/a&gt;, &lt;a href=&#34;https://rubygems.org/gems/grpc&#34;&gt;gem&lt;/a&gt;, &lt;a href=&#34;https://packagist.org/packages/grpc/grpc&#34;&gt;composer&lt;/a&gt;, &lt;a href=&#34;https://pecl.php.net/package/gRPC&#34;&gt;pecl&lt;/a&gt;, &lt;a href=&#34;https://www.npmjs.com/package/grpc&#34;&gt;npm&lt;/a&gt;, &lt;a href=&#34;https://www.nuget.org/packages/Grpc/&#34;&gt;nuget&lt;/a&gt;, &lt;a href=&#34;https://cocoapods.org/pods/gRPC&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pod&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;). In addition &lt;a href=&#34;https://hub.docker.com/r/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC docker images&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; are now available on Docker Hub.&lt;/p&gt;
&lt;p&gt;We’ve updated the &lt;a href=&#34;https://grpc.io/docs/&#34;&gt;documentation&lt;/a&gt; on grpc.io to reflect the latest changes and released additional language-specific &lt;a href=&#34;https://grpc.io/docs/languages/&#34;&gt;reference docs&lt;/a&gt;. See what’s changed with the Beta release in the release notes on GitHub for &lt;a href=&#34;https://github.com/grpc/grpc-java/releases/tag/v0.9.0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://godoc.org/google.golang.org/grpc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/grpc/grpc/releases/tag/release-0_11_0&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;all other&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; languages.&lt;/p&gt;
&lt;p&gt;In keeping in line with our &lt;a href=&#34;../principles/&#34;&gt;principles&lt;/a&gt; and goal to enable highly performant and scalable APIs and microservices on top of HTTP/2, in the coming months, the focus of the gRPC project will be to keep improving performance and stability and adding carefully chosen features for production use cases. Documentation will also be clarified and will continue to improve with new examples and guides.&lt;/p&gt;
&lt;p&gt;We’ve been very excited to see the community response to gRPC and the various projects starting to use it (&lt;a href=&#34;https://coreos.com/blog/etcd-2.2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;etcd v3 experimental API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/gengo/grpc-gateway&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-gateway&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for RESTful APIs and others).&lt;/p&gt;
&lt;p&gt;We really want to thank everyone who contributed code, gave presentations, adopted the technology and engaged in the community. With your help support we look forward to the 1.0!&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
