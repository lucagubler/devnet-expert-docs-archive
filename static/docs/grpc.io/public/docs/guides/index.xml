<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>gRPC â€“ Guides</title>
    <link>https://grpc.io/docs/guides/</link>
    <description>Recent content in Guides on gRPC</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://grpc.io/docs/guides/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Authentication</title>
      <link>https://grpc.io/docs/guides/auth/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/auth/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;gRPC is designed to work with a variety of authentication mechanisms, making it
easy to safely use gRPC to talk to other systems. You can use our supported
mechanisms - SSL/TLS with or without Google token-based authentication - or you
can plug in your own authentication system by extending our provided code.&lt;/p&gt;
&lt;p&gt;gRPC also provides a simple authentication API that lets you provide all the
necessary authentication information as &lt;code&gt;Credentials&lt;/code&gt; when creating a channel or
making a call.&lt;/p&gt;
&lt;h3 id=&#34;supported-auth-mechanisms&#34;&gt;Supported auth mechanisms&lt;/h3&gt;
&lt;p&gt;The following authentication mechanisms are built-in to gRPC:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SSL/TLS&lt;/strong&gt;: gRPC has SSL/TLS integration and promotes the use of SSL/TLS
to authenticate the server, and to encrypt all the data exchanged between
the client and the server. Optional mechanisms are available for clients to
provide certificates for mutual authentication.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ALTS&lt;/strong&gt;: gRPC supports
&lt;a href=&#34;https://cloud.google.com/security/encryption-in-transit/application-layer-transport-security&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ALTS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
as a transport security mechanism, if the application is running on
&lt;a href=&#34;https://cloud.google.com/compute&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Compute Engine&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; or
&lt;a href=&#34;https://cloud.google.com/kubernetes-engine&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Kubernetes Engine (GKE)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
For details, see one of the following
language-specific pages:
&lt;a href=&#34;https://grpc.io/docs/languages/cpp/alts/&#34;&gt;ALTS in C++&lt;/a&gt;,
&lt;a href=&#34;https://grpc.io/docs/languages/go/alts/&#34;&gt;ALTS in Go&lt;/a&gt;,
&lt;a href=&#34;https://grpc.io/docs/languages/java/alts/&#34;&gt;ALTS in Java&lt;/a&gt;,
&lt;a href=&#34;https://grpc.io/docs/languages/python/alts/&#34;&gt;ALTS in Python&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Token-based authentication with Google&lt;/strong&gt;: gRPC provides a generic
mechanism (described below) to attach metadata based credentials to requests
and responses. Additional support for acquiring access tokens
(typically OAuth2 tokens) while accessing Google APIs through gRPC is
provided for certain auth flows: you can see how this works in our code
examples below. In general this mechanism must be used &lt;em&gt;as well as&lt;/em&gt; SSL/TLS
on the channel - Google will not allow connections without SSL/TLS, and
most gRPC language implementations will not let you send credentials on an
unencrypted channel.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    Google credentials should only be used to connect to Google services. Sending
a Google issued OAuth2 token to a non-Google service could result in this
token being stolen and used to impersonate the client to Google services.

&lt;/div&gt;

&lt;h3 id=&#34;authentication-api&#34;&gt;Authentication API&lt;/h3&gt;
&lt;p&gt;gRPC provides a simple authentication API based around the unified concept of
Credentials objects, which can be used when creating an entire gRPC channel or
an individual call.&lt;/p&gt;
&lt;h4 id=&#34;credential-types&#34;&gt;Credential types&lt;/h4&gt;
&lt;p&gt;Credentials can be of two types:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Channel credentials&lt;/strong&gt;, which are attached to a &lt;code&gt;Channel&lt;/code&gt;, such as SSL
credentials.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Call credentials&lt;/strong&gt;, which are attached to a call (or &lt;code&gt;ClientContext&lt;/code&gt; in
C++).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also combine these in a &lt;code&gt;CompositeChannelCredentials&lt;/code&gt;, allowing you to
specify, for example, SSL details for the channel along with call credentials
for each call made on the channel. A &lt;code&gt;CompositeChannelCredentials&lt;/code&gt; associates a
&lt;code&gt;ChannelCredentials&lt;/code&gt; and a &lt;code&gt;CallCredentials&lt;/code&gt; to create a new
&lt;code&gt;ChannelCredentials&lt;/code&gt;. The result will send the authentication data associated
with the composed &lt;code&gt;CallCredentials&lt;/code&gt; with every call made on the channel.&lt;/p&gt;
&lt;p&gt;For example, you could create a &lt;code&gt;ChannelCredentials&lt;/code&gt; from an &lt;code&gt;SslCredentials&lt;/code&gt;
and an &lt;code&gt;AccessTokenCredentials&lt;/code&gt;. The result when applied to a &lt;code&gt;Channel&lt;/code&gt; would
send the appropriate access token for each call on this channel.&lt;/p&gt;
&lt;p&gt;Individual &lt;code&gt;CallCredentials&lt;/code&gt; can also be composed using
&lt;code&gt;CompositeCallCredentials&lt;/code&gt;. The resulting &lt;code&gt;CallCredentials&lt;/code&gt; when used in a call
will trigger the sending of the authentication data associated with the two
&lt;code&gt;CallCredentials&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;using-client-side-ssltls&#34;&gt;Using client-side SSL/TLS&lt;/h4&gt;
&lt;p&gt;Now let&amp;rsquo;s look at how &lt;code&gt;Credentials&lt;/code&gt; work with one of our supported auth
mechanisms. This is the simplest authentication scenario, where a client just
wants to authenticate the server and encrypt all data. The example is in C++,
but the API is similar for all languages: you can see how to enable SSL/TLS in
more languages in our Examples section below.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a default SSL ChannelCredentials object.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentials(grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;SslCredentialsOptions());
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a channel using the credentials created in the previous step.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(server_name, channel_creds);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a stub on the channel.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Make actual RPC calls on the stub.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;sayHello(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;context, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;request, response);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;For advanced use cases such as modifying the root CA or using client certs,
the corresponding options can be set in the &lt;code&gt;SslCredentialsOptions&lt;/code&gt; parameter
passed to the factory method.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Non-POSIX-compliant systems (such as Windows) need to specify the root
certificates in &lt;code&gt;SslCredentialsOptions&lt;/code&gt;, since the defaults are only
configured for POSIX filesystems.

&lt;/div&gt;

&lt;h4 id=&#34;using-oauth-token-based-authentication&#34;&gt;Using OAuth token-based authentication&lt;/h4&gt;
&lt;p&gt;OAuth 2.0 Protocol is the industry-standard protocol for authorization. It enables
websites or applications to obtain limited access to user accounts using OAuth tokens.&lt;/p&gt;
&lt;p&gt;gRPC offers a set of simple APIs to integrate OAuth 2.0 into applications, streamlining authentication.&lt;/p&gt;
&lt;p&gt;At a high level, using OAuth token-based authentication includes 3 steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Get or generate an OAuth token on client side.
&lt;ul&gt;
&lt;li&gt;You can generate Google-specific tokens following instructions below.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Create credentials with the OAuth token.
&lt;ul&gt;
&lt;li&gt;OAuth token is always part of per-call credentials, you can also attach the per-call credentials
to some channel credentials.&lt;/li&gt;
&lt;li&gt;The token will be sent to server, normally as part of HTTP Authorization header.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Server side verifies the token.
&lt;ul&gt;
&lt;li&gt;In most implementations, the validation is done using a server side interceptor.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;For details of how to use OAuth token in different languages, please refer to our examples below.&lt;/p&gt;
&lt;h4 id=&#34;using-google-token-based-authentication&#34;&gt;Using Google token-based authentication&lt;/h4&gt;
&lt;p&gt;gRPC applications can use a simple API to create a credential that works for
authentication with Google in various deployment scenarios. Again, our example
is in C++ but you can find examples in other languages in our Examples section.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;GoogleDefaultCredentials();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Create a channel, stub and make RPC calls (same as in the previous example)
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;CreateChannel(server_name, creds);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Stub&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; stub(Greeter&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;NewStub(channel));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status s &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; stub&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;sayHello(&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt;context, &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;request, response);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This channel credentials object works for applications using Service Accounts as
well as for applications running in &lt;a href=&#34;https://cloud.google.com/compute/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Compute Engine
(GCE)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.  In the former case, the service
accountâ€™s private keys are loaded from the file named in the environment
variable &lt;code&gt;GOOGLE_APPLICATION_CREDENTIALS&lt;/code&gt;. The keys are used to generate bearer
tokens that are attached to each outgoing RPC on the corresponding channel.&lt;/p&gt;
&lt;p&gt;For applications running in GCE, a default service account and corresponding
OAuth2 scopes can be configured during VM setup. At run-time, this credential
handles communication with the authentication systems to obtain OAuth2 access
tokens and attaches them to each outgoing RPC on the corresponding channel.&lt;/p&gt;
&lt;h4 id=&#34;extending-grpc-to-support-other-authentication-mechanisms&#34;&gt;Extending gRPC to support other authentication mechanisms&lt;/h4&gt;
&lt;p&gt;The Credentials plugin API allows developers to plug in their own type of
credentials. This consists of:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;MetadataCredentialsPlugin&lt;/code&gt; abstract class, which contains the pure virtual
&lt;code&gt;GetMetadata&lt;/code&gt; method that needs to be implemented by a sub-class created by
the developer.&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;MetadataCredentialsFromPlugin&lt;/code&gt; function, which creates a &lt;code&gt;CallCredentials&lt;/code&gt;
from the &lt;code&gt;MetadataCredentialsPlugin&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is example of a simple credentials plugin which sets an authentication
ticket in a custom header.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-cpp&#34; data-lang=&#34;cpp&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MyCustomAuthenticator&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsPlugin {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  MyCustomAuthenticator(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; ticket) &lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; ticket_(ticket) {}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status GetMetadata(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string_ref service_url, grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string_ref method_name,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;AuthContext&lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&lt;/span&gt; channel_auth_context,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;multimap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string, grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;*&lt;/span&gt; metadata) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;override&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    metadata&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;insert(std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;make_pair(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;x-custom-auth-ticket&amp;#34;&lt;/span&gt;, ticket_));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;Status&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;OK;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;string ticket_;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;auto&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsFromPlugin(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    std&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;unique_ptr&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;grpc&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;MetadataCredentialsPlugin&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MyCustomAuthenticator(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;super-secret-ticket&amp;#34;&lt;/span&gt;)));
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;A deeper integration can be achieved by plugging in a gRPC credentials
implementation at the core level. gRPC internals also allow switching out
SSL/TLS with other encryption mechanisms.&lt;/p&gt;
&lt;h3 id=&#34;language-guides-and-examples&#34;&gt;Language guides and examples&lt;/h3&gt;
&lt;p&gt;These authentication mechanisms will be available in all gRPC&amp;rsquo;s supported
languages. The following table links to examples demonstrating authentication
and authorization in various languages.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/encryption&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/encryption#encryption&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-tls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example TLS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; (&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-alts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example ATLS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-tls#hello-world-example-with-tls&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/auth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/auth#authentication-extension-example-in-grpc-python&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;language-guides-and-examples-for-oauth-token-based-authentication&#34;&gt;Language guides and examples for OAuth token-based authentication&lt;/h3&gt;
&lt;p&gt;The following table links to examples demonstrating OAuth token-based
authentication and authorization in various languages.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/authentication#authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go OAuth Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/authentication#oauth2&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go OAuth Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-oauth#authentication-example&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java OAuth Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-oauth&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java OAuth Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/examples/python/auth/token_based_auth_client.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python OAuth Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/auth#token-based-authentication&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python OAuth Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;additional-examples&#34;&gt;Additional Examples&lt;/h3&gt;
&lt;p&gt;The following sections demonstrate how authentication and authorization features
described above appear in other languages not listed above.&lt;/p&gt;
&lt;h4 id=&#34;ruby&#34;&gt;Ruby&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#fc3&#34;&gt;:this_channel_is_insecure&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;ChannelCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(load_certs)  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# load_certs typically loads a CA roots file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, creds)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-ruby&#34; data-lang=&#34;ruby&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#366&#34;&gt;require&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;googleauth&amp;#39;&lt;/span&gt;  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# from http://www.rubydoc.info/gems/googleauth/0.1.0&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#555&#34;&gt;...&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;ChannelCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(load_certs)  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# load_certs typically loads a CA roots file&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;authentication &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Google&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Auth&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;get_application_default()
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;GRPC&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Core&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;CallCredentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(authentication&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;updater_proc)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ssl_creds&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;compose(call_creds)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#360&#34;&gt;Helloworld&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Greeter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#360&#34;&gt;Stub&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;new(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_creds)
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;nodejs&#34;&gt;Node.js&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryptionauthentication&#34;&gt;Base case - No encryption/authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, grpc.credentials.createInsecure());
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-1&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; root_cert &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/root-cert&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(root_cert);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, ssl_creds);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-1&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Authenticating with Google
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; GoogleAuth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;google-auth-library&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// from https://www.npmjs.com/package/google-auth-library
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(root_certs);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GoogleAuth()).getApplicationDefault(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(err, auth) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromGoogleCredential(auth);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_credentials);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-oauth2-token-legacy-approach&#34;&gt;Authenticate with Google using OAuth2 token (legacy approach)&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; GoogleAuth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; require(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;google-auth-library&amp;#39;&lt;/span&gt;); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// from https://www.npmjs.com/package/google-auth-library
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; ssl_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.Credentials.createSsl(root_certs); &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// load_certs typically loads a CA roots file
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; scope &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;https://www.googleapis.com/auth/grpc-testing&amp;#39;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GoogleAuth()).getApplicationDefault(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt;(err, auth) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; (auth.createScopeRequired()) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    auth &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; auth.createScoped(scope);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; call_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromGoogleCredential(auth);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; combined_creds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(ssl_creds, call_creds);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;var&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, combined_credentials);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;});
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-and-a-custom-header-with-token&#34;&gt;With server authentication SSL/TLS and a custom header with token&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; rootCert &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; fs.readFileSync(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;path/to/root-cert&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; channelCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createSsl(rootCert);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; metaCallback &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; (_params, callback) =&amp;gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; meta &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; grpc.Metadata();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    meta.add(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;custom-auth-header&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;token&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    callback(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;, meta);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; callCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.createFromMetadataGenerator(metaCallback);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; combCreds &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; grpc.credentials.combineChannelCredentials(channelCreds, callCreds);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld.Greeter(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, combCreds);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;php&#34;&gt;PHP&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryptionauthorization&#34;&gt;Base case - No encryption/authorization&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost:50051&amp;#39;&lt;/span&gt;, [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createInsecure&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-2&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;, [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createSsl&lt;/span&gt;(file_get_contents(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;]);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-2&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;function&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;updateAuthMetadataCallback&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$context&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#033&#34;&gt;$auth_credentials&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; ApplicationDefaultCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCredentials&lt;/span&gt;();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$auth_credentials&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;updateMetadata&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$metadata&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [], &lt;span style=&#34;color:#033&#34;&gt;$context&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;service_url&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$channel_credentials&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createComposite&lt;/span&gt;(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Grpc\ChannelCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createSsl&lt;/span&gt;(file_get_contents(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;)),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    Grpc\CallCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createFromPlugin&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;updateAuthMetadataCallback&amp;#39;&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$channel_credentials&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-using-oauth2-token-legacy-approach-1&#34;&gt;Authenticate with Google using OAuth2 token (legacy approach)&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-php&#34; data-lang=&#34;php&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// the environment variable &amp;#34;GOOGLE_APPLICATION_CREDENTIALS&amp;#34; needs to be set
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$scope&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://www.googleapis.com/auth/grpc-testing&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$auth&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Google\Auth\ApplicationDefaultCredentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCredentials&lt;/span&gt;(&lt;span style=&#34;color:#033&#34;&gt;$scope&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;credentials&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; Grpc\Credentials&lt;span style=&#34;color:#555&#34;&gt;::&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;createSsl&lt;/span&gt;(file_get_contents(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;update_metadata&amp;#39;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#033&#34;&gt;$auth&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getUpdateMetadataFunc&lt;/span&gt;(),
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;];
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#033&#34;&gt;$client&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; helloworld\GreeterClient(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#033&#34;&gt;$opts&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;dart&#34;&gt;Dart&lt;/h4&gt;
&lt;h5 id=&#34;base-case---no-encryption-or-authentication-1&#34;&gt;Base case - no encryption or authentication&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;localhost&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#99f&#34;&gt;port:&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;50051&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ChannelOptions(
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;          &lt;span style=&#34;color:#99f&#34;&gt;credentials:&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;const&lt;/span&gt; ChannelCredentials.insecure()));
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; stub &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;with-server-authentication-ssltls-3&#34;&gt;With server authentication SSL/TLS&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Load a custom roots file.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; trustedRoot &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;roots.pem&amp;#39;&lt;/span&gt;).readAsBytesSync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channelCredentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ChannelCredentials.secure(&lt;span style=&#34;color:#99f&#34;&gt;certificates:&lt;/span&gt; trustedRoot);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channelOptions &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ChannelOptions(&lt;span style=&#34;color:#99f&#34;&gt;credentials:&lt;/span&gt; channelCredentials);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;myservice.example.com&amp;#39;&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; channelOptions);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-with-google-3&#34;&gt;Authenticate with Google&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Uses publicly trusted roots by default.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; serviceAccountJson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;service-account.json&amp;#39;&lt;/span&gt;).readAsStringSync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; JwtServiceAccountAuthenticator(serviceAccountJson);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel, &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; credentials.toCallOptions);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;authenticate-a-single-rpc-call&#34;&gt;Authenticate a single RPC call&lt;/h5&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-dart&#34; data-lang=&#34;dart&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// Uses publicly trusted roots by default.
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; channel &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ClientChannel(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;greeter.googleapis.com&amp;#39;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; client &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; GreeterClient(channel);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; serviceAccountJson &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; File(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;service-account.json&amp;#39;&lt;/span&gt;).readAsStringSync();
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; credentials &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; JwtServiceAccountAuthenticator(serviceAccountJson);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; response &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;await&lt;/span&gt; client.sayHello(request, &lt;span style=&#34;color:#99f&#34;&gt;options:&lt;/span&gt; credentials.toCallOptions);
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Benchmarking</title>
      <link>https://grpc.io/docs/guides/benchmarking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/benchmarking/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;gRPC is designed for both high-performance and high-productivity design of
distributed applications. Continuous performance benchmarking is a critical part
of the gRPC development workflow. Multi-language performance tests run every few
hours against the master branch, and these numbers are reported to a dashboard
for visualization.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grafana-dot-grpc-testing.appspot.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Multi-language performance dashboard @master (latest dev version)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://performance-dot-grpc-testing.appspot.com/explore?dashboard=5180705743044608&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Legacy dashboard (same data as above)&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;performance-testing-design&#34;&gt;Performance testing design&lt;/h3&gt;
&lt;p&gt;Each language implements a performance testing worker that implements a gRPC
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/worker_service.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;WorkerService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
This service directs the worker to act as either a client or a server for the
actual benchmark test, represented as
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/testing/benchmark_service.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BenchmarkService&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
That service has two methods:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;UnaryCall â€“ a unary RPC of a simple request that specifies the number of bytes
to return in the response.&lt;/li&gt;
&lt;li&gt;StreamingCall â€“ a streaming RPC that allows repeated ping-pongs of request and
response messages akin to the UnaryCall.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/testing_framework.png&#34; alt=&#34;gRPC performance testing worker diagram&#34; id=&#34;testing_framework&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-testing_framework&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-testing_framework&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/testing_framework.png&#34; alt=&#34;gRPC performance testing worker diagram&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;These workers are controlled by a
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/test/cpp/qps/qps_json_driver.cc&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;driver&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that takes as input a scenario description (in JSON format) and an environment
variable specifying the host:port of each worker process.&lt;/p&gt;
&lt;h3 id=&#34;languages-under-test&#34;&gt;Languages under test&lt;/h3&gt;
&lt;p&gt;The following languages have continuous performance testing as both clients and
servers at master:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C++&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;Node.js&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;In addition to running as both the client-side and server-side of performance
tests, all languages are tested as clients against a C++ server, and as servers
against a C++ client. This test aims to provide the current upper bound of
performance for a given language&amp;rsquo;s client or server implementation without
testing the other side.&lt;/p&gt;
&lt;p&gt;Although PHP or mobile environments do not support a gRPC server (which is
needed for our performance tests), their client-side performance can be
benchmarked using a proxy WorkerService written in another language. This code
is implemented for PHP but is not yet in continuous testing mode.&lt;/p&gt;
&lt;h3 id=&#34;scenarios-under-test&#34;&gt;Scenarios under test&lt;/h3&gt;
&lt;p&gt;There are several important scenarios under test and displayed in the dashboards
above, including the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Contentionless latency â€“ the median and tail response latencies seen with only
1 client sending a single message at a time using StreamingCall.&lt;/li&gt;
&lt;li&gt;QPS â€“ the messages/second rate when there are 2 clients and a total of 64
channels, each of which has 100 outstanding messages at a time sent using
StreamingCall.&lt;/li&gt;
&lt;li&gt;Scalability (for selected languages) â€“ the number of messages/second per
server core.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most performance testing is using secure communication and protobufs. Some C++
tests additionally use insecure communication and the generic (non-protobuf) API
to display peak performance. Additional scenarios may be added in the future.&lt;/p&gt;
&lt;h3 id=&#34;testing-infrastructure&#34;&gt;Testing infrastructure&lt;/h3&gt;
&lt;p&gt;All performance benchmarks are run in our dedicated GKE cluster, where each
benchmark worker (a client or a server) gets scheduled to different GKE node
(and each GKE node is a separate GCE VM) in one of our worker pools. The source
code for the benchmarking framework we use is publicly available in the
&lt;a href=&#34;https://github.com/grpc/test-infra&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;test-infra github repository&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Most test instances are 8-core systems, and these are used for both latency and
QPS measurement. For C++ and Java, we additionally support QPS testing on
32-core systems. All QPS tests use 2 identical client machines for each server,
to make sure that QPS measurement is not client-limited.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Cancellation</title>
      <link>https://grpc.io/docs/guides/cancellation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/cancellation/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;When a gRPC client is no longer interested in the result of an RPC call, it may
&lt;em&gt;cancel&lt;/em&gt; to signal this discontinuation of interest to the server.
&lt;a href=&#34;https://grpc.io/docs/guides/deadlines/&#34;&gt;Deadline&lt;/a&gt; expiration and I/O errors
also trigger cancellation.  When an RPC is cancelled, the server should stop
any ongoing computation and end its side of the stream. Often, servers are also
clients to upstream servers, so that cancellation operation should ideally
propagate to all ongoing computation in the system that was initiated due to
the original client RPC call.&lt;/p&gt;
&lt;p&gt;A client may cancel an RPC for several reasons. The data it requested may have
been made irrelevant or the author of the client may want to be a good citizen
of the server and conserve compute resources.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
  Client -&amp;gt;&amp;gt; Server 1: Cancel
  Server 1 -&amp;gt;&amp;gt; Server 2: Cancel
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;cancelling-an-rpc-call-on-the-client-side&#34;&gt;Cancelling an RPC Call on the Client Side&lt;/h3&gt;
&lt;p&gt;A client cancels an RPC call by calling a method on the call object or, in some
languages, on the accompanying context object. While gRPC clients do not
provide additional details to the server about the reason for the cancellation,
the cancel API call takes a string describing the reason, which will result in
a client-side exception and/or log containing the provided reason. When a
server is notified of the cancellation of an RPC, the application-provided
server handler may be busy processing the request. The gRPC library in general
does not have a mechanism to interrupt the application-provided server handler,
so the server handler must coordinate with the gRPC library to ensure that
local processing of the request ceases.  Therefore, if an RPC is long-lived,
its server handler must periodically check if the RPC it is servicing has been
cancelled and if it has, cease processing.  Some languages will also
support automatic cancellation of anyoutgoing RPCs, while in others, the author
of the server handler is responsible for this.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart LR
  subgraph Client
  end
  subgraph Server1
    direction TB
    cancelled{cancelled?} --&amp;gt;|false| perform(&amp;#34;perform some work&amp;#34;)
    perform --&amp;gt; cancelled
    cancelled --&amp;gt;|true| cleanup(&amp;#34;cancel upstream RPCs&amp;#34;)
    cleanup --&amp;gt; exit(&amp;#34;exit RPC handler&amp;#34;)
  end
  subgraph Server2
  end

  Client --&amp;gt;|CANCEL| Server1
  Server1 --&amp;gt;|CANCEL| Server2
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/cancellation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Automatically cancels outgoing RPCs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/cancellation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Automatically cancels outgoing RPCs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/cancellation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;Automatically cancels outgoing RPCs&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/cancellation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Compression</title>
      <link>https://grpc.io/docs/guides/compression/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/compression/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Compression is used to reduce the amount of bandwidth used when communicating between peers and can be enabled or disabled based on call or message level for all languages. For some languages, it is also possible to control compression settings at the channel level. Different languages also support different compression algorithms, including a customized compressor.&lt;/p&gt;
&lt;h3 id=&#34;compression-method-asymmetry-between-peers&#34;&gt;Compression Method Asymmetry Between Peers&lt;/h3&gt;
&lt;p&gt;gRPC allows asymmetrically compressed communication, whereby a response may be compressed differently with the request, or not compressed at all. A gRPC peer may choose to respond using a different compression method to that of the request, including not performing any compression, regardless of channel and RPC settings (for example, if compression would result in small or negative gains).&lt;/p&gt;
&lt;p&gt;If a client message is compressed by an algorithm that is not supported by a server, the message will result in an &lt;code&gt;UNIMPLEMENTED&lt;/code&gt; error status on the server. The server will include a &lt;code&gt;grpc-accept-encoding&lt;/code&gt; header to the response which specifies the algorithms that the server accepts.&lt;/p&gt;
&lt;p&gt;If the client message is compressed using one of the algorithms from the &lt;code&gt;grpc-accept-encoding&lt;/code&gt; header and an &lt;code&gt;UNIMPLEMENTED&lt;/code&gt; error status is returned from the server, the cause of the error won&amp;rsquo;t be related to compression.&lt;/p&gt;
&lt;p&gt;Note that a peer may choose to not disclose all the encodings it supports. However, if it receives a message compressed in an undisclosed but supported encoding, it will include said encoding in the response&amp;rsquo;s &lt;code&gt;grpc-accept-encoding&lt;/code&gt; header.&lt;/p&gt;
&lt;p&gt;For every message a server is requested to compress using an algorithm it knows the client doesn&amp;rsquo;t support (as indicated by the last &lt;code&gt;grpc-accept-encoding&lt;/code&gt; header received from the client), it will send the message uncompressed.&lt;/p&gt;
&lt;h3 id=&#34;specific-disabling-of-compression&#34;&gt;Specific Disabling of Compression&lt;/h3&gt;
&lt;p&gt;If the user requests to disable compression, the next message will be sent uncompressed. This is instrumental in preventing &lt;a href=&#34;https://en.wikipedia.org/wiki/Transport_Layer_Security#BEAST_attack&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;BEAST&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/CRIME&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CRIME&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; attacks. This applies to both the unary and streaming cases.&lt;/p&gt;
&lt;h3 id=&#34;language-guides-and-examples&#34;&gt;Language guides and examples&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/compression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/compression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/compression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/Documentation/compression.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/experimental&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://grpc.github.io/grpc-java/javadoc/io/grpc/CallOptions.html#withCompression-java.lang.String-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/compression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/compression&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/compression.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Compression&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/compression_cookbook.md#per-call-settings&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC (Core) Compression Cookbook&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/L46-python-compression-api.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for Python Compression API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Custom Backend Metrics</title>
      <link>https://grpc.io/docs/guides/custom-backend-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/custom-backend-metrics/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Simple load balancing decisions can be made by taking into account local or
global knowledge of a backendâ€™s load, for example CPU. More sophisticated
load balancing decisions are possible with application specific knowledge, e.g.
queue depth, or by combining multiple metrics.&lt;/p&gt;
&lt;p&gt;The custom backend metrics feature exposes APIs to allow users to implement
the metrics feedback in their LB policies.&lt;/p&gt;
&lt;h3 id=&#34;use-cases&#34;&gt;Use Cases&lt;/h3&gt;
&lt;p&gt;The feature is mainly for advanced use cases where a custom LB policy is used
to route traffic more intelligently to a list of backend servers to improve the
routing performance, e.g. a weighted round robin LB policy.&lt;/p&gt;
&lt;p&gt;gRPC traditionally allows users to plug in their own load balancing policies,
see &lt;a href=&#34;https://grpc.io/docs/guides/custom-load-balancing/&#34;&gt;guide&lt;/a&gt;. For xDS users, &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A52-xds-custom-lb-policies.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;custom load balancer&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
can be configured to select the custom LB policy.&lt;/p&gt;
&lt;h3 id=&#34;metrics-reporting&#34;&gt;Metrics Reporting&lt;/h3&gt;
&lt;p&gt;Open Request Cost Aggregation (&lt;a href=&#34;https://github.com/cncf/xds/blob/main/xds/data/orca/v3/orca_load_report.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;ORCA&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;) is an open standard for conveying backend
metrics information. gRPC uses ORCA service and metrics standards
and supports two metrics reporting mechanisms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Per-query metrics reporting: the backend server attaches the injected custom
metrics in the trailing metadata when the corresponding RPC finishes. This is
typically useful for short RPCs like unary calls.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Out-of-band metrics reporting: the backend server periodically pushes metrics
data, e.g. cpu and memory utilization, to the client. This is useful for all
situations: unary calls, long RPCs in streaming calls, or no RPCs. However,
out-of-band metrics reporting does not send query cost metrics. The metrics
emission frequency is user-configurable, and this configuration resides in the
custom load balancing policy.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The diagram shows the architecture where a user creates their own LB policy
that implements backend metrics feedback.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/backend_metrics.svg&#34; alt=&#34;gRPC backend metrics diagram&#34; id=&#34;backend_metrics.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-backend_metrics.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-backend_metrics.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/backend_metrics.svg&#34; alt=&#34;gRPC backend metrics diagram&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;
&lt;p&gt;For more details, please see gRPC &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A51-custom-backend-metrics.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal A51&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-orca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/orca&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;Example upcoming&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Custom Load Balancing Policies</title>
      <link>https://grpc.io/docs/guides/custom-load-balancing/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/custom-load-balancing/</guid>
      <description>
        
        
        
&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/G6PRjmXuBG8&#34; allowfullscreen title=&#34;Load Balancing in gRPC&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;One of the key features of gRPC is load balancing, which allows requests from
clients to be distributed across multiple servers. This helps prevent any
one server from becoming overloaded and allows the system to scale up by adding
more servers.&lt;/p&gt;
&lt;p&gt;A gRPC load balancing policy is given a list of server IP addresses by the name
resolver. The policy is responsible for maintaining connections (subchannels)
to the servers and picking a connection to use when an RPC is sent.&lt;/p&gt;
&lt;h3 id=&#34;implementing-your-own-policy&#34;&gt;Implementing Your Own Policy&lt;/h3&gt;
&lt;p&gt;By default the &lt;code&gt;pick_first&lt;/code&gt; policy will be used. This policy actually does no
load balancing but just tries each address it gets from the name resolver and
uses the first one it can connect to. By updating the gRPC service config you
can also switch to using &lt;code&gt;round_robin&lt;/code&gt; that connects to every address it gets
and rotates through the connected backends for each RPC. There are also some
other load balancing policies available, but the exact set varies by language.
If the built-in policies do not meet your needs you can also implement your own
custom policy.&lt;/p&gt;
&lt;p&gt;This involves implementing a load balancer interface in the language you are
using. At a high level, you will have to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Register your implementation in the load balancer registry so that it can
be referred to from the service config&lt;/li&gt;
&lt;li&gt;Parse the JSON configuration object of your implementation. This allows your
load balancer to be configured in the service config with any arbitrary JSON
you choose to support&lt;/li&gt;
&lt;li&gt;Manage what backends to maintain a connection with&lt;/li&gt;
&lt;li&gt;Implement a &lt;code&gt;picker&lt;/code&gt; that will choose which backend to connect to when an
RPC is made. Note that this needs to be a fast operation as it is on the RPC
call path&lt;/li&gt;
&lt;li&gt;To enable your load balancer, configure it in your service config&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The exact steps vary by language, see the language support section for some
concrete examples in your language.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart TD
NR(Name Resolver) --&amp;gt;|Provides addresses &amp;amp;\nLB config| LB(Load Balancer)
LB --&amp;gt; |Provides a picker| C(Channel)
C --&amp;gt;|Requests\na subchannel| P(Picker)
LB --&amp;gt; |Manages subchannels\nto backends| SC(Subchannel 1..n)
LB -. Creates .-&amp;gt; P
P --&amp;gt; |Picks one| SC
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;backend-metrics&#34;&gt;Backend Metrics&lt;/h3&gt;
&lt;p&gt;What if your load balancing policy needs real-time information about the
backend servers? For this you can rely on backend metrics. You can
have metrics provided to you either in-band, in the backend RPC responses, or
out-of-band as separate RPCs from the backends. Standard metrics like
CPU and memory utilization are provided, but you can also implement
your own custom metrics.&lt;/p&gt;
&lt;p&gt;For more information on this, please see the custom backend metrics &lt;a href=&#34;https://grpc.io/docs/guides/custom-backend-metrics/&#34;&gt;guide&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;service-mesh&#34;&gt;Service Mesh&lt;/h3&gt;
&lt;p&gt;If you have a service mesh setup where a central control plane is coordinating
the configuration of your microservices, you cannot configure your custom load
balancer directly via the service config. But support is provided to do this
with the xDS protocol that your control plane uses to communicate with your
gRPC clients. Please refer to your control plane documentation to determine how
custom load balancing configuration is supported.&lt;/p&gt;
&lt;p&gt;For more details, please see gRPC &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A52-xds-custom-lb-policies.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal A52&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/customloadbalance&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/customloadbalancer&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Not yet supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Custom Name Resolution</title>
      <link>https://grpc.io/docs/guides/custom-name-resolution/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/custom-name-resolution/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Name resolution is fundamentally about service discovery. When sending a
gRPC request, the client must determine the IP address of the service name.
Name resolution is often thought to be the same as
&lt;a href=&#34;https://www.ietf.org/rfc/rfc1035.txt&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DNS&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. In practice however, DNS is usually
augmented with extensions or completely replaced to enable name resolution.&lt;/p&gt;
&lt;p&gt;When making a request with a gRPC client, by default, DNS name resolution is
used. However, various other name resolution mechanisms may be used:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Resolver&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;DNS&lt;/td&gt;
&lt;td&gt;&lt;code&gt;grpc.io:50051&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;By default, DNS is assumed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DNS&lt;/td&gt;
&lt;td&gt;&lt;code&gt;dns:///grpc.io:50051&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The extra slash is used to provide an authority&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unix Domain Socket&lt;/td&gt;
&lt;td&gt;&lt;code&gt;uds:///run/containerd/containerd.sock&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;xDS&lt;/td&gt;
&lt;td&gt;&lt;code&gt;xds:///wallet.grpcwallet.io&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IPv4&lt;/td&gt;
&lt;td&gt;&lt;code&gt;ipv4:198.51.100.123:50051&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Only supported in some languages&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The triple slashes above (&lt;code&gt;///&lt;/code&gt;) may look unfamiliar if you are used to the
double slashes of HTTP, such as &lt;code&gt;https://grpc.io&lt;/code&gt;. These &lt;em&gt;target strings&lt;/em&gt; follow
the format for &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc3986&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;RFC-3986&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; URIs.
The string following the first two slashes and preceding the third (if there is
a third at all) is the &lt;em&gt;authority&lt;/em&gt;. The authority string identifies a server
which contains the URIs of all resources. In the case of a conventional
HTTP request, the authority over the URI is the server to which the request will
be sent. In other cases, the authority will be the identity of the name
resolution server, while the resource itself lives on some other server. Some
name resolvers have no need for an authority. In this case, the authority string
is left empty, resulting in three slashes in a row.

&lt;/div&gt;

&lt;p&gt;Several languages support an interface to allow the user to define their own
name resolvers, so that you may define how to resolve any given name. Once
registered, a name resolver with the &lt;em&gt;scheme&lt;/em&gt; &lt;code&gt;my-resolver&lt;/code&gt; will be picked up
when a target string begins with &lt;code&gt;my-resolver:&lt;/code&gt;. For example, requests to
&lt;code&gt;my-resolver:///my-service&lt;/code&gt; would now use the &lt;code&gt;my-resolver&lt;/code&gt; name resolver
implementation.&lt;/p&gt;
&lt;h3 id=&#34;custom-name-resolvers&#34;&gt;Custom Name Resolvers&lt;/h3&gt;
&lt;p&gt;You might consider using a custom name resolver whenever you would like to
augment or replace DNS for service discovery. For example, this interface has
been used in the past to use &lt;a href=&#34;https://zookeeper.apache.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Apache Zookeeper&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
to look up service names.  It has also been used to directly interface with the
Kubernetes API server for service lookup based on headless Service resources.&lt;/p&gt;
&lt;p&gt;One reason why it might be particularly useful to use a custom name resolver
rather than standard DNS is that this interface is &lt;em&gt;reactive&lt;/em&gt;. Within standard
DNS, a client looks up the address for a particular service at the beginning of
the connection and maintains its connection to that address for the lifetime of
the connection. However, custom name resolvers may be watch-based. That is, they
can receive updates from the name server over time and therefore respond
intelligently to backend failure as well as backend scale-ups and backend
scale-downs.&lt;/p&gt;
&lt;p&gt;In addition, a custom name resolver may provide the client connection with a
&lt;em&gt;service config&lt;/em&gt;. A service config is a JSON object that defines
arbitrary configuration specifying how traffic should be routed to and load
balanced across a particular service. At its most basic, this can be used to
specify things like that a particular service should use the round robin load
balancing policy vs. pick first. However, when a custom name resolver is used in
conjunction with arbitrary service config and a &lt;a href=&#34;https://grpc.io/docs/guides/custom-load-balancing/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;em&gt;custom load balancing
policy&lt;/em&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, very complex
traffic management systems such as xDS may be constructed.&lt;/p&gt;
&lt;h4 id=&#34;life-of-a-target-string&#34;&gt;Life of a Target String&lt;/h4&gt;
&lt;p&gt;While the exact interface for custom name resolvers differs from language to
language, the general structure is the same. The client registers an
implementation of a &lt;em&gt;name resolver provider&lt;/em&gt; to a process-global registry close
to the start of the process. The name resolver provider will be called by the
gRPC library with a target strings intended for the custom name resolver. Given
that target string, the name resolver provider will return an instance of a name
resolver, which will interact with the client connection to direct the request
according to the target string.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
  Client -&amp;gt;&amp;gt; gRPC: Request to my-resolver:///my-service
  gRPC -&amp;gt;&amp;gt; NameResolverProvider: requests NameResolver
  NameResolverProvider --&amp;gt;&amp;gt; gRPC: returns NameResolver
  gRPC -&amp;gt;&amp;gt; NameResolver: delegates resolution
  NameResolver --&amp;gt;&amp;gt; gRPC: addresses
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/nameresolve&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/name_resolving&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;Not supported&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;Not supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Deadlines</title>
      <link>https://grpc.io/docs/guides/deadlines/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/deadlines/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;A deadline is used to specify a point in time past which a client is unwilling
to wait for a response from a server. This simple idea is very important in
building robust distributed systems. Clients that do not wait around
unnecessarily and servers that know when to give up processing requests will
improve the resource utilization and latency of your system.&lt;/p&gt;
&lt;p&gt;Note that while some language APIs have the concept of a &lt;strong&gt;deadline&lt;/strong&gt;, others
use the idea of a &lt;strong&gt;timeout&lt;/strong&gt;. When an API asks for a deadline, you provide a
point in time which the call should not go past. A timeout is the max duration
of time that the call can take. A timeout can be converted to a deadline by
adding the timeout to the current time when the application starts a call. For
simplicity, we will only refer to deadline in this document.&lt;/p&gt;
&lt;h3 id=&#34;deadlines-on-the-client&#34;&gt;Deadlines on the Client&lt;/h3&gt;
&lt;p&gt;By default, gRPC does not set a deadline which means it is possible for a
client to end up waiting for a response effectively forever. To avoid this you
should always explicitly set a realistic deadline in your clients. To determine
the appropriate deadline you would ideally start with an educated guess based on
what you know about your system (network latency, server processing time, etc.),
validated by some load testing.&lt;/p&gt;
&lt;p&gt;If a server has gone past the deadline when processing a request, the client
will give up and fail the RPC with the &lt;code&gt;DEADLINE_EXCEEDED&lt;/code&gt; status.&lt;/p&gt;
&lt;h3 id=&#34;deadlines-on-the-server&#34;&gt;Deadlines on the Server&lt;/h3&gt;
&lt;p&gt;A server might receive RPCs from a client with an unrealistically short
deadline that would not give the server enough time to ever respond in time.
This would result in the server just wasting valuable resources and in the worst
case scenario, crash the server. A gRPC server deals with this situation by
automatically cancelling a call (&lt;code&gt;CANCELLED&lt;/code&gt; status) once a deadline set by the
client has passed.&lt;/p&gt;
&lt;p&gt;Please note that the server application is responsible for stopping any activity
it has spawned to service the RPC. If your application is running a
long-running process you should periodically check if the RPC that initiated
it has been cancelled and if so, stop the processing.&lt;/p&gt;
&lt;h4 id=&#34;deadline-propagation&#34;&gt;Deadline Propagation&lt;/h4&gt;
&lt;p&gt;Your server might need to call another server to produce a response. In these
cases where your server also acts as a client you would want to honor the
deadline set by the original client. Automatically propagating the deadline from
an incoming RPC to an outgoing one is supported by some gRPC
implementations. In some languages this behavior needs to be explicitly
enabled (e.g. C++) and in others it is enabled by default (e.g. Java and Go).
Using this capability lets you avoid the error-prone approach of manually
including the deadline for each outgoing RPC.&lt;/p&gt;
&lt;p&gt;Since a deadline is set point in time, propagating it as-is to a server can be
problematic as the clocks on the two servers might not be synchronized. To
address this gRPC converts the deadline to a timeout from which the already
elapsed time is already deducted. This shields your system from any clock skew
issues.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;%%{init: { &amp;#34;sequence&amp;#34;: { &amp;#34;mirrorActors&amp;#34;: false }}}%%
sequenceDiagram
  participant c as Client
  participant us as User Server
  participant bs as Billing Server
  note right of c: Request at 13:00:00&amp;lt;br&amp;gt;Should complete in 2s
  activate c
  c -&amp;gt;&amp;gt; us: GetUserProfile&amp;lt;br&amp;gt;(deadline: 13:00:02)
  activate us
  note right of us: 0.5s spent before&amp;lt;br&amp;gt;calling billing server
  us -&amp;gt;&amp;gt; bs: GetTransactionHistory&amp;lt;br&amp;gt;(timeout: 1.5s)
  activate bs
  bs -&amp;gt;&amp;gt; bs: Retrieve transactions
  note left of bs: It&amp;#39;s 13:00:02&amp;lt;br&amp;gt;Time&amp;#39;s up!
  note right of c: Stop waiting for server
  c -&amp;gt;&amp;gt; c: Stop waiting for server&amp;lt;br&amp;gt;DEADLINE_EXCEEDED
  deactivate c
  us -&amp;gt;&amp;gt; us: Stop waiting for server
  us --&amp;gt;&amp;gt; c: Cancel
  deactivate us
  bs --&amp;gt;&amp;gt; us: Cancel
  bs -&amp;gt;&amp;gt; bs: Clean up resources&amp;lt;br&amp;gt;(after noticing that the&amp;lt;br&amp;gt;call was cancelled)
  deactivate bs
 
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/deadline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/deadline&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/timeout&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;other-resources&#34;&gt;Other Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/blog/deadlines/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Deadlines blogpost&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Debugging</title>
      <link>https://grpc.io/docs/guides/debugging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/debugging/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpcdebug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpcdebug&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a command line tool within the gRPC ecosystem designed to assist developers in debugging and troubleshooting gRPC services. grpcdebug fetches the internal states of the gRPC library from the application via gRPC protocol and provides a human-friendly UX to browse them. Currently, it supports &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A14-channelz.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Channelz&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;/&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/proto/grpc/health/v1/health.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Health&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; Checking/CSDS (aka. &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A38-admin-interface-api.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;admin services&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;). In other words, it can fetch statistics about how many RPCs have being sent or failed on a given gRPC channel, it can inspect address resolution results, it can dump the active xDS configuration that directs the routing of RPCs.&lt;/p&gt;
&lt;h3 id=&#34;language-examples&#34;&gt;Language examples&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/debugging#using-grpcdebug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpcdebug?tab=readme-ov-file#quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpcdebug/tree/main/internal/testing/testserver&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go test server implementing admin services from grpcdebug docs&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-debug#using-grpcdebug&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;references&#34;&gt;References&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpcdebug?tab=readme-ov-file#installation&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpcdebug installation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc-ecosystem/grpcdebug?tab=readme-ov-file#quick-start&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpcdebug quick start&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Error handling</title>
      <link>https://grpc.io/docs/guides/error/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/error/</guid>
      <description>
        
        
        &lt;h3 id=&#34;standard-error-model&#34;&gt;Standard error model&lt;/h3&gt;
&lt;p&gt;As you&amp;rsquo;ll have seen in our concepts document and examples, when a gRPC call
completes successfully the server returns an &lt;code&gt;OK&lt;/code&gt; status to the client
(depending on the language the &lt;code&gt;OK&lt;/code&gt; status may or may not be directly used in
your code). But what happens if the call isn&amp;rsquo;t successful?&lt;/p&gt;
&lt;p&gt;If an error occurs, gRPC returns one of its error status codes instead, with an
optional string error message that provides further details about what happened.
Error information is available to gRPC clients in all supported languages.&lt;/p&gt;
&lt;h3 id=&#34;richer-error-model&#34;&gt;Richer error model&lt;/h3&gt;
&lt;p&gt;The error model described above is the official gRPC error model,
is supported by all gRPC client/server libraries, and is independent of
the gRPC data format (whether protocol buffers or something else). You
may have noticed that it&amp;rsquo;s quite limited and doesn&amp;rsquo;t include the
ability to communicate error details.&lt;/p&gt;
&lt;p&gt;If you&amp;rsquo;re using protocol buffers as your data format, however, you may
wish to consider using the richer error model developed and used
by Google as described
&lt;a href=&#34;https://cloud.google.com/apis/design/errors#error_model&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;. This
model enables servers to return and clients to consume additional
error details expressed as one or more protobuf messages. It further
specifies a &lt;a href=&#34;https://github.com/googleapis/googleapis/blob/master/google/rpc/error_details.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;standard set of error message
types&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
to cover the most common needs (such as invalid parameters, quota
violations, and stack traces). The protobuf binary encoding of this
extra error information is provided as trailing metadata in the
response.&lt;/p&gt;
&lt;p&gt;This richer error model is already supported in the C++, Go, Java,
Python, and Ruby libraries, and at least the grpc-web and Node.js
libraries have open issues requesting it. Other language libraries may
add support in the future if there&amp;rsquo;s demand, so check their github
repos if interested. Note however that the grpc-core library written
in C will not likely ever support it since it is purposely data format
agnostic.&lt;/p&gt;
&lt;p&gt;You could use a similar approach (put error details in trailing
response metadata) if you&amp;rsquo;re not using protocol buffers, but you&amp;rsquo;d
likely need to find or develop library support for accessing this data
in order to make practical use of it in your APIs.&lt;/p&gt;
&lt;p&gt;There are important considerations to be aware of when deciding whether to
use such an extended error model, however, including:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Library implementations of the extended error model may not be consistent
across languages in terms of requirements for and expectations of the error
details payload&lt;/li&gt;
&lt;li&gt;Existing proxies, loggers, and other standard HTTP request
processors don&amp;rsquo;t have visibility into the error details and thus
wouldn&amp;rsquo;t be able to leverage them for monitoring or other purposes&lt;/li&gt;
&lt;li&gt;Additional error detail in the trailers interferes with head-of-line
blocking, and will decrease HTTP/2 header compression efficiency due to
more frequent cache misses&lt;/li&gt;
&lt;li&gt;Larger error detail payloads may run into protocol limits (like
max headers size), effectively losing the original error&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;error-status-codes&#34;&gt;Error status codes&lt;/h3&gt;
&lt;p&gt;Errors are raised by gRPC under various circumstances, from network failures to
unauthenticated connections, each of which is associated with a particular
status code. The following error status codes are supported in all gRPC
languages.&lt;/p&gt;
&lt;h4 id=&#34;general-errors&#34;&gt;General errors&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Client application cancelled the request&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_CANCELLED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Deadline expired before server returned status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_DEADLINE_EXCEEDED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Method not found on server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNIMPLEMENTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server shutting down&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAVAILABLE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Server threw an exception (or did something other than returning a status code to terminate the RPC)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;network-failures&#34;&gt;Network failures&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;No data transmitted before deadline expires. Also applies to cases where some data is transmitted and no other failures are detected before the deadline expires&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_DEADLINE_EXCEEDED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Some data transmitted (for example, the request metadata has been written to the TCP connection) before the connection breaks&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAVAILABLE&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;protocol-errors&#34;&gt;Protocol errors&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Case&lt;/th&gt;
&lt;th&gt;Status code&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Could not decompress but compression algorithm supported&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Compression mechanism used by client not supported by the server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNIMPLEMENTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flow-control resource limits reached&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_RESOURCE_EXHAUSTED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Flow-control protocol violation&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing returned status&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNKNOWN&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Unauthenticated: credentials failed to get metadata&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAUTHENTICATED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Invalid host set in authority metadata&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_UNAUTHENTICATED&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing response protocol buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Error parsing request protocol buffer&lt;/td&gt;
&lt;td&gt;&lt;code&gt;GRPC_STATUS_INTERNAL&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;p&gt;Examples code is avilable for multiple languages on how to deal with standard
errors as well as with the richer error details.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/error_handling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ error handling example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/error_details&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ error details example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/error_handling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go error handling example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/error_details&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go error details example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/errorhandling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java error handling example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/errordetails&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java error details example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-node/tree/master/examples/error_handling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node error handling example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/errors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python error details example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The &lt;a href=&#34;https://github.com/avinassh/grpc-errors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc-errors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; repo also contains additional error handling examples.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Flow Control</title>
      <link>https://grpc.io/docs/guides/flow-control/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/flow-control/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Flow control is a mechanism to ensure that a receiver of messages does not get
overwhelmed by a fast sender.  Flow control prevents data loss, improves
performance and increases reliability.  It applies to streaming
RPCs and is not relevant for unary RPCs.  By default, gRPC handles the
interactions with flow control for you, though some languages allow you to
override the default behavior and take explicit control.&lt;/p&gt;
&lt;p&gt;gRPC utilizes the underlying transport to detect when it is safe to send more
data. As data is read on the receiving side, an acknowledgement
is returned to the sender letting it know that the receiver has more capacity.&lt;/p&gt;
&lt;p&gt;As needed, the gRPC framework will wait before returning from a write call.  In
gRPC, when a value is written to a stream, that does not mean that it has
gone out over the network. Rather, that it has been passed to the framework
which will now take care of the nitty gritty details of buffering it and sending
it to the OS on its way over the network.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The flow is the same for writing from a Server to a Client as when a Client
writes to a Server

&lt;/div&gt;

&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
    participant SA as Sender Application
    participant SG as Sender gRPC Framework
    participant RG as Receiver gRPC Framework
    participant RA as Receiver Application
  
  SA-)+SG: Stream Write
  alt sending too fast
    SG--)SG: Wait
  end
  alt allowed to send
    SG--)-SA: Write call returns
    SG-&amp;gt;&amp;gt;RG:Send Msg
  end
  RA-&amp;gt;&amp;gt;RG: Request message
  Note right of RA:  Request can be done either&amp;lt;br&amp;gt;after or before message arrives
  RG-&amp;gt;&amp;gt;RA: Provide message
  RG-&amp;gt;&amp;gt;SG: Send Ack w/ msg size
  opt waiting messages
    SG-&amp;gt;&amp;gt;RG: Send Next Msg
  end
&lt;/code&gt;&lt;/pre&gt;

&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    There is the potential for a deadlock if both the client and server are
doing synchronous reads or using manual flow control and both try to do a lot
of writing without doing any reads.

&lt;/div&gt;

&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/manualflowcontrol&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Health Checking</title>
      <link>https://grpc.io/docs/guides/health-checking/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/health-checking/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;gRPC specifies a standard service API (&lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/master/grpc/health/v1/health.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;health/v1&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;) for performing health check
calls against gRPC servers. An implementation of this service is provided, but
you are responsible for updating the health status of your services.&lt;/p&gt;
&lt;p&gt;On the client side you can have the client automatically communicate with the
health services of your backends. This allows the client to avoid services that
are considered unhealthy.&lt;/p&gt;
&lt;h3 id=&#34;the-server-side-health-service&#34;&gt;The Server Side Health Service&lt;/h3&gt;
&lt;p&gt;The health check service on a gRPC server supports two modes of operation:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unary calls to the &lt;code&gt;Check&lt;/code&gt; rpc endpoint
&lt;ul&gt;
&lt;li&gt;Useful for centralized monitoring or load balancing solutions, but does
not scale to support a fleet of gRPC client constantly making health
checks&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Streaming health updates by using the &lt;code&gt;Watch&lt;/code&gt; rpc endpoint
&lt;ul&gt;
&lt;li&gt;Used by the client side health check feature in gRPC clients&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Enabling the health check service on your server involves the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Use the provided health check library to create a health check service&lt;/li&gt;
&lt;li&gt;Add the health check service to your server.&lt;/li&gt;
&lt;li&gt;Notify the health check library when the health of one of your services
changes.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;NOT_SERVING&lt;/code&gt; if your service cannot accept requests at the moment&lt;/li&gt;
&lt;li&gt;&lt;code&gt;SERVING&lt;/code&gt; if your service is open for business&lt;/li&gt;
&lt;li&gt;If you don&amp;rsquo;t care about the health of individual services, you can use
an empty string (&amp;quot;&amp;quot;) to represent the health of your whole server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Make sure you inform the health check library about server shutdown so
that it can notify all the connected clients.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The exact details vary by language, see the &lt;strong&gt;Language Support&lt;/strong&gt; section below.&lt;/p&gt;
&lt;h3 id=&#34;enabling-client-health-checking&#34;&gt;Enabling Client Health Checking&lt;/h3&gt;
&lt;p&gt;A gRPC client can be configured to perform health checks against the servers
it connects to by modifying the &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/service_config.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;service config&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; of the channel. E.g. to monitor
the health of the &lt;code&gt;foo&lt;/code&gt; service you would use (in JSON format):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;healthCheckConfig&amp;#34;&lt;/span&gt;: {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;serviceName&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Note that if your server reports health for the empty string (&amp;quot;&amp;quot;) service,
signifying the health of the whole server, you can also use an empty string
here.&lt;/p&gt;
&lt;p&gt;Enabling health checking changes some behavior around calling a server:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The client will additionally call the &lt;code&gt;Watch&lt;/code&gt; RPC on the health check
service when a connection is established
&lt;ul&gt;
&lt;li&gt;If the call fails, retries will be made (with exponential backoff), unless
the call fails with the status UNIMPLEMENTED, in which case health checking
will be disabled.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Requests won&amp;rsquo;t be sent until the health check service sends a healthy
status for the service being called&lt;/li&gt;
&lt;li&gt;If a healthy service becomes unhealthy the client will no longer send
requests for that service&lt;/li&gt;
&lt;li&gt;The calls will resume if the service later becomes healthy&lt;/li&gt;
&lt;li&gt;Some load balancing policies can choose to disable health checking if
the feature does not make sense with the policy (e.g. &lt;code&gt;pick_first&lt;/code&gt; does
this)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;More specifically, the state of the subchannel (that represents the physical
connection to the server) goes through these states based on the health of
the service it is connecting to.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;stateDiagram-v2
    [*] --&amp;gt; IDLE
    IDLE --&amp;gt; CONNECTING : Connection requested
    CONNECTING --&amp;gt; READY : Health check#colon;\nSERVING
    CONNECTING --&amp;gt; TRANSIENT_FAILURE : Health check#colon;\nNOT_SERVING\nor call fails
    READY --&amp;gt; TRANSIENT_FAILURE : Health check#colon;\nNOT_SERVING
    READY --&amp;gt; IDLE : Connection breaks\nor times out
    TRANSIENT_FAILURE --&amp;gt; READY : Health check#colon;\nSERVING
    note right of TRANSIENT_FAILURE : Allows the load balancer to choose\nanother, working subchannel 
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Again, the specifics on how to enable client side health checking varies by
language, see the examples in the &lt;strong&gt;Language Support&lt;/strong&gt; section.&lt;/p&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/healthservice&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/health&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/health_checking&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/health&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Interceptors</title>
      <link>https://grpc.io/docs/guides/interceptors/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/interceptors/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The core of making gRPC services is implementing RPC methods. But some
functionality is independent of the method being run and should apply to all or
most RPCs. Interceptors are well suited to this task.&lt;/p&gt;
&lt;h3 id=&#34;when-to-use-interceptors&#34;&gt;When to Use Interceptors&lt;/h3&gt;
&lt;p&gt;You may already be familiar with the concept of interceptors, but may be used to
calling them &amp;ldquo;filters&amp;rdquo; or &amp;ldquo;middleware.&amp;rdquo; Interceptors are very well suited to
implementing logic that is not specific to a single RPC method. They are also
easy to share across different clients or servers. Interceptors are an important
and frequently-used way to extend gRPC. You might find some functionality you
want is already available as an interceptor in the wider gRPC ecosystem.&lt;/p&gt;
&lt;p&gt;Some example use cases for interceptors are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/guides/metadata/&#34;&gt;Metadata&lt;/a&gt; handling&lt;/li&gt;
&lt;li&gt;Logging&lt;/li&gt;
&lt;li&gt;Fault injection&lt;/li&gt;
&lt;li&gt;Caching&lt;/li&gt;
&lt;li&gt;Metrics&lt;/li&gt;
&lt;li&gt;Policy enforcement&lt;/li&gt;
&lt;li&gt;Server-side Authentication&lt;/li&gt;
&lt;li&gt;Server-side Authorization&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    While &lt;em&gt;client-side&lt;/em&gt; authentication could be done via an interceptor, gRPC
provides a specialized &amp;ldquo;call credentials&amp;rdquo; API that is better suited to the task.
See the &lt;a href=&#34;https://grpc.io/docs/guides/auth/&#34;&gt;Authentication Guide&lt;/a&gt; for details about client-side
authentication.

&lt;/div&gt;

&lt;h3 id=&#34;how-to-use-interceptors&#34;&gt;How to Use Interceptors&lt;/h3&gt;
&lt;p&gt;Interceptors can be added when building a gRPC channel or server. The
interceptor is then called for every RPC on that channel or server. The
interceptor APIs are different for client-side than server-side, so an
interceptor will either be a &amp;ldquo;client interceptor&amp;rdquo; or a &amp;ldquo;server interceptor.&amp;rdquo;&lt;/p&gt;
&lt;p&gt;Interceptors are inherently per-call; they are not useful for managing TCP
connections, configuring the TCP port, or configuring TLS. While the proper tool
for most customization, they can&amp;rsquo;t be used for everything.&lt;/p&gt;
&lt;h4 id=&#34;interceptor-order&#34;&gt;Interceptor Order&lt;/h4&gt;
&lt;p&gt;When using multiple interceptors, their order is significant. You&amp;rsquo;ll want to
make sure to understand the order your gRPC implementation will execute them. It
is useful to think about the interceptors as being in a line between the
application and the network. Some interceptors will be &amp;ldquo;closer to the network&amp;rdquo;
and have more control over what is sent and others will be &amp;ldquo;closer to the
application&amp;rdquo; which have a better view into the application&amp;rsquo;s behavior.&lt;/p&gt;
&lt;p&gt;Suppose you have two client interceptors: a caching interceptor and a logging
interceptor. What order should they be in? You might want the logging
interceptor closer to the network to better monitor your application&amp;rsquo;s
communication and ignore cached RPCs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart LR
APP(Application) --&amp;gt; INT1
INT1(Caching\nInterceptor) --&amp;gt;|Cache miss| INT2
INT2(Logging\nInterceptor) --&amp;gt; NET
NET(Network)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Or you might want it closer to the application to understand your app&amp;rsquo;s behavior
and see what information it is loading:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;flowchart LR
APP(Application) --&amp;gt; INT2
INT1(Caching\nInterceptor) --&amp;gt;|Cache miss| NET
INT2(Logging\nInterceptor) --&amp;gt; INT1
NET(Network)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You can choose between these options by just changing the order of the
interceptors.&lt;/p&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/interceptors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/interceptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/header&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/interceptors&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Keepalive</title>
      <link>https://grpc.io/docs/guides/keepalive/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/keepalive/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;HTTP/2 PING-based keepalives are a way to keep an HTTP/2 connection alive even when there is no data being transferred. This is done by periodically sending a &lt;a href=&#34;https://httpwg.org/specs/rfc7540.html#PING&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PING frame&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to the other end of the connection. HTTP/2 keepalives can improve performance and reliability of HTTP/2 connections, but it is important to configure the keepalive interval carefully.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    There is a related but separate concern called [Health Checking]. Health checking allows a server to signal whether a &lt;em&gt;service&lt;/em&gt; is healthy while keepalive is only about the &lt;em&gt;connection&lt;/em&gt;.

&lt;/div&gt;


&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/yPNHn6lXndo&#34; allowfullscreen title=&#34;gRPC Keepalive&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;background&#34;&gt;Background&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Keepalive#TCP_keepalive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;TCP keepalive&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; is a well-known method of maintaining connections and detecting broken connections. When TCP keepalive was enabled, either side of the connection can send redundant packets. Once ACKed by the other side, the connection will be considered as good. If no ACK is received after repeated attempts, the connection is deemed broken.&lt;/p&gt;
&lt;p&gt;Unlike TCP keepalive, gRPC uses HTTP/2 which provides a mandatory &lt;a href=&#34;https://httpwg.org/specs/rfc7540.html#PING&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PING frame&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; which can be used to estimate round-trip time, bandwidth-delay product, or test the connection. The interval and retry in TCP keepalive don&amp;rsquo;t quite apply to PING because the transport is reliable, so they&amp;rsquo;re replaced with timeout (equivalent to interval * retry) in gRPC PING-based keepalive implementation.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    It&amp;rsquo;s not required for service owners to support keepalive. &lt;strong&gt;Client authors must coordinate with service owners&lt;/strong&gt; for whether a particular client-side setting is acceptable. Service owners decide what they are willing to support, including whether they are willing to receive keepalives at all (If the service does not support keepalive, the first few keepalive pings will be ignored, and the server will eventually send a &lt;code&gt;GOAWAY&lt;/code&gt; message with debug data equal to the ASCII code for &lt;code&gt;too_many_pings&lt;/code&gt;).

&lt;/div&gt;

&lt;h3 id=&#34;how-configuring-keepalive-affects-a-call&#34;&gt;How configuring keepalive affects a call&lt;/h3&gt;
&lt;p&gt;Keepalive is less likely to be triggered for unary RPCs with quick replies. Keepalive is primarily triggered when there is a long-lived RPC, which will fail if the keepalive check fails and the connection is closed.&lt;/p&gt;
&lt;p&gt;For streaming RPCs, if the connection is closed, any in-progress RPCs will fail. If a call is streaming data, the stream will also be closed and any data that has not yet been sent will be lost.&lt;/p&gt;


&lt;div class=&#34;alert alert-warning&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Warning&lt;/h4&gt;

    To avoid DDoSing, it&amp;rsquo;s important to take caution when setting the keepalive configurations. Thus, it is recommended to avoid enabling keepalive without calls and for clients to avoid configuring their keepalive much below one minute.

&lt;/div&gt;

&lt;h3 id=&#34;common-situations-where-keepalives-can-be-useful&#34;&gt;Common situations where keepalives can be useful&lt;/h3&gt;
&lt;p&gt;gRPC HTTP/2 keepalives can be useful in a variety of situations, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;When sending data over a long-lived connection which might be considered as idle by proxy or load balancers.&lt;/li&gt;
&lt;li&gt;When the network is less reliable (For example, mobile applications).&lt;/li&gt;
&lt;li&gt;When using a connection after a long period of inactivity.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;keepalive-configuration-specification&#34;&gt;Keepalive configuration specification&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Options&lt;/th&gt;
&lt;th&gt;Availability&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;th&gt;Client Default&lt;/th&gt;
&lt;th&gt;Server Default&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KEEPALIVE_TIME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Client and Server&lt;/td&gt;
&lt;td&gt;The interval in milliseconds between PING frames.&lt;/td&gt;
&lt;td&gt;INT_MAX (Disabled)&lt;/td&gt;
&lt;td&gt;7200000 (2 hours)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KEEPALIVE_TIMEOUT&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Client and Server&lt;/td&gt;
&lt;td&gt;The timeout in milliseconds for a PING frame to be acknowledged. If sender does not receive an acknowledgment within this time, it will close the connection.&lt;/td&gt;
&lt;td&gt;20000 (20 seconds)&lt;/td&gt;
&lt;td&gt;20000 (20 seconds)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;KEEPALIVE_WITHOUT_CALLS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Client&lt;/td&gt;
&lt;td&gt;Is it permissible to send keepalive pings from the client without any outstanding streams.&lt;/td&gt;
&lt;td&gt;0 (false)&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PERMIT_KEEPALIVE_WITHOUT_CALLS&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Is it permissible to send keepalive pings from the client without any outstanding streams.&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;0 (false)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;PERMIT_KEEPALIVE_TIME&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Minimum allowed time between a server receiving successive ping frames without sending any data/header frame.&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;300000 (5 minutes)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MAX_CONNECTION_IDLE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Maximum time that a channel may have no outstanding rpcs, after which the server will close the connection.&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;INT_MAX (Infinite)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MAX_CONNECTION_AGE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Maximum time that a channel may exist.&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;INT_MAX (Infinite)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;MAX_CONNECTION_AGE_GRACE&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;Grace period after the channel reaches its max age.&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;INT_MAX (Infinite)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Some languages may provide additional options, please refer to language examples and additional resource for more details.

&lt;/div&gt;

&lt;h3 id=&#34;language-guides-and-examples&#34;&gt;Language guides and examples&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/keepalive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/keepalive.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/keepalive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/Documentation/keepalive.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/keepalive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://grpc.github.io/grpc-java/javadoc/io/grpc/ManagedChannelBuilder.html#keepAliveTime-long-java.util.concurrent.TimeUnit-&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/keep_alive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/keepalive.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A8-client-side-keepalive.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for Client-side Keepalive&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A9-server-side-conn-mgt.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for Server-side Connection Management&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Naonb2XD_2Q&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Using gRPC for Long-lived and Streaming RPCs&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Metadata</title>
      <link>https://grpc.io/docs/guides/metadata/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/metadata/</guid>
      <description>
        
        
        
&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/psYQFbPgIOI&#34; allowfullscreen title=&#34;gRPC metadata limits:The Good, The Bad and The Ugly&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Metadata is a side channel that allows clients and servers to provide
information to each other that is associated with an RPC.&lt;/p&gt;
&lt;p&gt;gRPC metadata is a key-value pair of data that is sent with initial or final
gRPC requests or responses. It is used to provide additional information about
the call, such as authentication credentials, tracing information, or custom
headers.&lt;/p&gt;
&lt;p&gt;gRPC metadata is implemented using HTTP/2 headers. The keys are ASCII
strings, while the values can be either ASCII strings or binary data. The keys
are case insensitive
and must not start with the prefix &lt;code&gt;grpc-&lt;/code&gt;, which is reserved for gRPC itself.&lt;/p&gt;
&lt;p&gt;gRPC metadata can be sent and received by both the client and the server.
Headers are sent from the client to the server before the initial request and
from the server to the client before the initial response of an RPC call.
Trailers are sent by the server when it closes an RPC.&lt;/p&gt;
&lt;p&gt;gRPC metadata is useful for a variety of purposes, such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Authentication&lt;/strong&gt;: gRPC metadata can be used to send authentication
credentials to the server.
This can be used to implement different authentication schemes, such as &lt;code&gt;OAuth2&lt;/code&gt;
or &lt;code&gt;JWT&lt;/code&gt; using the standard HTTP Authorization header.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Tracing&lt;/strong&gt;: gRPC metadata can be used to send tracing information to the
server.
This can be used to track the progress of a request through a distributed
system.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Custom headers&lt;/strong&gt;: gRPC metadata can be used to send custom headers to the
server or from the server to the client.
This can be used to implement application-specific features, such as load
balancing, rate limiting or providing detailed error messages from the server
to the client.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Internal usages&lt;/strong&gt;: gRPC uses HTTP/2 headers and trailers, which will be
integrated with the metadata specified by your application.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;See &lt;a href=&#34;https://grpc.io/docs/what-is-grpc/core-concepts/#metadata&#34;&gt;Core Concepts&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;be-aware&#34;&gt;Be Aware&lt;/h4&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;WARNING: Servers may limit the size of Request-Headers, with a default of 8 KiB suggested.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Custom metadata must follow the &amp;ldquo;Custom-Metadata&amp;rdquo; format listed in
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/PROTOCOL-HTTP2.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PROTOCOL-HTTP2&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
, with the exception of binary headers not needing to be base64 encoded.&lt;/p&gt;
&lt;h4 id=&#34;headers&#34;&gt;Headers&lt;/h4&gt;
&lt;p&gt;Headers are sent before the initial request data message from the client to the
server and similarly before the initial response data from the server to the
client. The header includes things like authentication credentials and how to
handle the RPC. Some of the headers, such as authorization, are generated by
gRPC for you.&lt;/p&gt;
&lt;p&gt;Custom header handling is language dependent, generally through
&lt;a href=&#34;https://grpc.io/docs/guides/interceptors/&#34;&gt;interceptors&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;trailers&#34;&gt;Trailers&lt;/h4&gt;
&lt;p&gt;Trailers are a special kind of header that is sent after the message data. They
are used internally to communicate the outcome of an RPC. At the application
level, custom trailers can be used to communicate things not directly part of
the data, such as server utilization and query cost.  Trailers are sent only by
the server.&lt;/p&gt;
&lt;h3 id=&#34;for-more-details-please-see-the-following-grfcs&#34;&gt;For more details, please see the following gRFCs&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/7c05212d14f4abef5f74f71695f95ba8dd3f7dd3/G1-true-binary-metadata.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal: G1 true binary metadata&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/7c05212d14f4abef5f74f71695f95ba8dd3f7dd3/L7-go-metadata-api.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal: L7 go metadata api&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/7c05212d14f4abef5f74f71695f95ba8dd3f7dd3/L48-node-metadata-options.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal: L48 node metadata options&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/7c05212d14f4abef5f74f71695f95ba8dd3f7dd3/L42-python-metadata-flags.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal: L42 python metadata flags&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/7c05212d14f4abef5f74f71695f95ba8dd3f7dd3/L11-ruby-interceptors.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;proposal: L11 ruby interceptors&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Examples&lt;/th&gt;
&lt;th&gt;Notes&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/header&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Header&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/errorhandling&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Error Handling&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Metadata&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/metadata_interceptor&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Metadata Interceptor&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/blob/master/Documentation/grpc-metadata.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Metadata&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Node&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-node/tree/master/examples/metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Node Metadata&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/metadata&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Metadata&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Ruby&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Example upcoming&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: OpenTelemetry Metrics</title>
      <link>https://grpc.io/docs/guides/opentelemetry-metrics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/opentelemetry-metrics/</guid>
      <description>
        
        
        &lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;p&gt;gRPC provides support for an OpenTelemetry plugin that provides metrics that can help you -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Troubleshoot your system&lt;/li&gt;
&lt;li&gt;Iterate on improving system performance&lt;/li&gt;
&lt;li&gt;Setup continuous monitoring and alerting.&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/L6FAtc8N8Vk&#34; allowfullscreen title=&#34;OpenTelemetry - The future of Observability&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;background&#34;&gt;Background&lt;/h2&gt;
&lt;p&gt;OpenTelemetry is an observability framework to create and manage telemetry data. gRPC previously provided observability support through OpenCensus which has been &lt;a href=&#34;https://opentelemetry.io/blog/2023/sunsetting-opencensus/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sunsetted&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; in the favor of OpenTelemetry.&lt;/p&gt;
&lt;h2 id=&#34;instruments&#34;&gt;Instruments&lt;/h2&gt;
&lt;p&gt;The gRPC OpenTelemetry plugin accepts a &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/metrics/api/#meterprovider&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MeterProvider&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and depends on the &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/overview/#api&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to create a &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/metrics/api/#get-a-meter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Meter&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; that identifies the gRPC library being used, for example, &lt;code&gt;grpc-c++&lt;/code&gt; at version &lt;code&gt;1.57.1&lt;/code&gt;. The following listed instruments are created using this meter. Users should employ the &lt;a href=&#34;https://opentelemetry.io/docs/specs/otel/overview/#sdk&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;OpenTelemetry SDK&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; to customize the views exported by OpenTelemetry.&lt;/p&gt;
&lt;p&gt;More and more gRPC components are being instrumented for observability. Currently, we have the following components instrumented -&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Per-call (stable, on by default) : Observe RPCs themselves (for example, latency.)
&lt;ul&gt;
&lt;li&gt;Client Per-Call : Observe a client call&lt;/li&gt;
&lt;li&gt;Client Per-Attempt : Observe attempts for a client call, since a call can have multiple attempts due to retry or hedging.&lt;/li&gt;
&lt;li&gt;Server : Observe a call received at the server.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;LB Policy : Observe various load-balancing policies
&lt;ul&gt;
&lt;li&gt;Weighted Round Robin (experimental)&lt;/li&gt;
&lt;li&gt;Pick-First (experimental)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;XdsClient (experimental)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/strong&gt;
Some instruments are off by default and need to be explicitly enabled from the gRPC OpenTelemetry plugin API. Experimental metrics are always off by default. (&lt;a href=&#34;https://github.com/grpc/grpc/blob/ccfc163607a15faa16aea179e0a0ea673c2353c6/include/grpcpp/ext/otel_plugin.h#L139&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reference C++ API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;per-call-metrics&#34;&gt;Per-Call Metrics&lt;/h3&gt;
&lt;h4 id=&#34;client-per-call-instruments&#34;&gt;Client Per-Call Instruments&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (required)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.client.call.duration&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;grpc.method, grpc.target , grpc.status&lt;/td&gt;
&lt;td&gt;This metric aims to measure the end-to-end time the gRPC library takes to complete an RPC from the applicationâ€™s perspective.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A66: OpenTelemetry Metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 id=&#34;client-per-attempt-instruments&#34;&gt;Client Per-Attempt Instruments&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (disposition)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.client.attempt.&lt;br&gt;started&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{attempt}&lt;/td&gt;
&lt;td&gt;grpc.method (required), grpc.target (required)&lt;/td&gt;
&lt;td&gt;The total number of RPC attempts started, including those that have not completed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.client.attempt.&lt;br&gt;duration&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;grpc.method (required), grpc.target (required), grpc.status (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;End-to-end time taken to complete an RPC attempt including the time it takes to pick a subchannel.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.client.attempt.&lt;br&gt;sent_total_compressed_message_size&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;By&lt;/td&gt;
&lt;td&gt;grpc.method (required), grpc.target (required), grpc.status (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;Total bytes (compressed but not encrypted) sent across all request messages (metadata excluded) per RPC attempt; does not include grpc or transport framing bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.client.attempt.&lt;br&gt;rcvd_total_compressed_message_size&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;By&lt;/td&gt;
&lt;td&gt;grpc.method (required), grpc.target (required), grpc.status (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;Total bytes (compressed but not encrypted) received across all response messages (metadata excluded) per RPC attempt; does not include grpc or transport framing bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A66: OpenTelemetry Metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 id=&#34;server-instruments&#34;&gt;Server Instruments&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (required)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.server.call.&lt;br&gt;started&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{call}&lt;/td&gt;
&lt;td&gt;grpc.method&lt;/td&gt;
&lt;td&gt;The total number of RPCs started, including those that have not completed.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.server.call.&lt;br&gt;sent_total_compressed_message_size&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;By&lt;/td&gt;
&lt;td&gt;grpc.method, grpc.status&lt;/td&gt;
&lt;td&gt;Total bytes (compressed but not encrypted) sent across all response messages (metadata excluded) per RPC; does not include grpc or transport framing bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.server.call.&lt;br&gt;rcvd_total_compressed_message_size&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;By&lt;/td&gt;
&lt;td&gt;grpc.method, grpc.status&lt;/td&gt;
&lt;td&gt;Total bytes (compressed but not encrypted) received across all request messages (metadata excluded) per RPC; does not include grpc or transport framing bytes.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.server.call.&lt;br&gt;duration&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;s&lt;/td&gt;
&lt;td&gt;grpc.method, grpc.status&lt;/td&gt;
&lt;td&gt;This metric aims to measure the end2end time an RPC takes from the server transportâ€™s (HTTP2/ inproc) perspective.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A66: OpenTelemetry Metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&#34;lb-policy-instruments&#34;&gt;LB Policy Instruments&lt;/h3&gt;
&lt;h4 id=&#34;weighted-round-robin-lb-policy-instruments&#34;&gt;Weighted Round Robin LB Policy Instruments&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (disposition)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.wrr.&lt;br&gt;rr_fallback&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{update}&lt;/td&gt;
&lt;td&gt;grpc.target (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of scheduler updates in which there were not enough endpoints with valid weight, which caused the WRR policy to fall back to RR behavior.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.wrr.&lt;br&gt;endpoint_weight_not_yet_usable&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{endpoint}&lt;/td&gt;
&lt;td&gt;grpc.target (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of endpoints from each scheduler update that don&amp;rsquo;t yet have usable weight information (i.e., either the load report has not yet been received, or it is within the blackout period).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.wrr.&lt;br&gt;endpoint_weight_stale&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{endpoint}&lt;/td&gt;
&lt;td&gt;grpc.target (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of endpoints from each scheduler update whose latest weight is older than the expiration period.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.wrr.&lt;br&gt;endpoint_weights&lt;/td&gt;
&lt;td&gt;Histogram&lt;/td&gt;
&lt;td&gt;{weight}&lt;/td&gt;
&lt;td&gt;grpc.target (required), grpc.lb.locality (optional)&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Weight of an endpoint recorded every scheduler update.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A78-grpc-metrics-wrr-pf-xds.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A78: gRPC OTel Metrics for WRR, Pick First, and XdsClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h4 id=&#34;pick-first-lb-policy-instruments&#34;&gt;Pick First LB Policy Instruments&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (required)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.pick_first.&lt;br&gt;disconnections&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{disconnection}&lt;/td&gt;
&lt;td&gt;grpc.target&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of times the selected subchannel becomes disconnected.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.pick_first.&lt;br&gt;connection_attempts_succeeded&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{attempt}&lt;/td&gt;
&lt;td&gt;grpc.target&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of successful connection attempts.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.pick_first.&lt;br&gt;connection_attempts_failed&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{attempt}&lt;/td&gt;
&lt;td&gt;grpc.target&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of failed connection attempts.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A78-grpc-metrics-wrr-pf-xds.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A78: gRPC OTel Metrics for WRR, Pick First, and XdsClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&#34;xdsclient-instruments&#34;&gt;XdsClient Instruments&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Type&lt;/th&gt;
&lt;th&gt;Unit&lt;/th&gt;
&lt;th&gt;Labels (required)&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds_client.&lt;br&gt;connected&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;{bool}&lt;/td&gt;
&lt;td&gt;grpc.target, grpc.xds.server&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Whether or not the xDS client currently has a working ADS stream to the xDS server.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds_client.&lt;br&gt;server_failure&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{failure}&lt;/td&gt;
&lt;td&gt;grpc.target, grpc.xds.server&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: A counter of xDS servers going from healthy to unhealthy.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds_client.&lt;br&gt;resource_updates_valid&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{resource}&lt;/td&gt;
&lt;td&gt;grpc.target, grpc.xds.server, grpc.xds.resource_type&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: A counter of resources received that were considered valid, even if unchanged.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds_client.&lt;br&gt;resource_updates_invalid&lt;/td&gt;
&lt;td&gt;Counter&lt;/td&gt;
&lt;td&gt;{resource}&lt;/td&gt;
&lt;td&gt;grpc.target, grpc.xds.server, grpc.xds.resource_type&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: A counter of resources received that were considered invalid.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds_client.&lt;br&gt;resources&lt;/td&gt;
&lt;td&gt;Gauge&lt;/td&gt;
&lt;td&gt;{resource}&lt;/td&gt;
&lt;td&gt;grpc.target, grpc.xds.authority, grpc.xds.cache_state, grpc.xds.resource_type&lt;/td&gt;
&lt;td&gt;EXPERIMENTAL: Number of xDS resources.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Refer &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A78-grpc-metrics-wrr-pf-xds.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A78: gRPC OTel Metrics for WRR, Pick First, and XdsClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for details.&lt;/p&gt;
&lt;h3 id=&#34;labelsattributes&#34;&gt;Labels/Attributes&lt;/h3&gt;
&lt;p&gt;With a recorded measurement for an instrument, gRPC might provide some additional information as attributes or labels. For example, &lt;code&gt;grpc.client.attempt.started&lt;/code&gt; has the labels &lt;code&gt;grpc.method&lt;/code&gt; and &lt;code&gt;grpc.target&lt;/code&gt; along with each measurement that tell us the method and the target associated with the RPC attempt being observed.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;NOTE&lt;/strong&gt;&lt;/strong&gt;
Some attributes are marked as optional on the instruments. These need to be explicitly enabled from the gRPC OpenTelemetry Plugin API. (&lt;a href=&#34;https://github.com/grpc/grpc/blob/ccfc163607a15faa16aea179e0a0ea673c2353c6/include/grpcpp/ext/otel_plugin.h#L151&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Reference C++ API&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;grpc.method&lt;/td&gt;
&lt;td&gt;Full gRPC method name, including package, service and method, e.g. &amp;ldquo;google.bigtable.v2.Bigtable/CheckAndMutateRow&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.status&lt;/td&gt;
&lt;td&gt;gRPC server status code received, e.g. &amp;ldquo;OK&amp;rdquo;, &amp;ldquo;CANCELLED&amp;rdquo;, &amp;ldquo;DEADLINE_EXCEEDED&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.target&lt;/td&gt;
&lt;td&gt;Canonicalized target URI used when creating gRPC Channel, e.g. &amp;ldquo;dns:///pubsub.googleapis.com:443&amp;rdquo;, &amp;ldquo;xds:///helloworld-gke:8000&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.lb.locality&lt;/td&gt;
&lt;td&gt;The locality to which the traffic is being sent.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds.server&lt;/td&gt;
&lt;td&gt;For clients, indicates the target of the gRPC channel in which the XdsClient is used. For servers, will be the string &amp;ldquo;#server&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds.authority&lt;/td&gt;
&lt;td&gt;The xDS authority. The value will be &amp;ldquo;#old&amp;rdquo; for old-style non-xdstp resource names.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds.cache_state&lt;/td&gt;
&lt;td&gt;Indicates the cache state of an xDS resource (&amp;ldquo;requested&amp;rdquo;, &amp;ldquo;does_not_exist&amp;rdquo;, &amp;ldquo;acked&amp;rdquo;, &amp;ldquo;nacked&amp;rdquo;, &amp;ldquo;nacked_but_cached&amp;rdquo;).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;grpc.xds.resource_type&lt;/td&gt;
&lt;td&gt;xDS resource type, such as &amp;ldquo;envoy.config.listener.v3.Listener&amp;rdquo;.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;faq&#34;&gt;FAQ&lt;/h2&gt;
&lt;h4 id=&#34;q-how-do-i-get-throughput-or-qps-queries-per-second&#34;&gt;Q. How do I get throughput or QPS (queries per second)?&lt;/h4&gt;
&lt;p&gt;Use a count aggregation on the latency histogram metrics - &lt;code&gt;grpc.client.attempt.duration&lt;/code&gt; / &lt;code&gt;grpc.client.call.duration&lt;/code&gt; (for clients) or &lt;code&gt;grpc.server.call.duration&lt;/code&gt; (for servers).&lt;/p&gt;
&lt;h4 id=&#34;q-how-do-i-get-error-rate-for-rpcs&#34;&gt;Q. How do I get error rate for RPCs?&lt;/h4&gt;
&lt;p&gt;Error counts can be calculated by using a filter &lt;code&gt;grpc.status != OK&lt;/code&gt; value on the latency histogram metrics &lt;code&gt;grpc.client.attempt.duration&lt;/code&gt; / &lt;code&gt;grpc.client.call.duration&lt;/code&gt; (for clients) or &lt;code&gt;grpc.server.call.duration&lt;/code&gt; (for servers).&lt;/p&gt;
&lt;h2 id=&#34;language-examples&#34;&gt;Language examples&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/otel&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/opentelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-opentelemetry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/observability&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A66: OpenTelemetry Metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A78-grpc-metrics-wrr-pf-xds.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A78: gRPC OTel Metrics for WRR, Pick First, and XdsClient&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A79-non-per-call-metrics-architecture.md#a79-non-per-call-metrics-architecture&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;A79: Non-per-call Metrics Architecture&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Performance Best Practices</title>
      <link>https://grpc.io/docs/guides/performance/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/performance/</guid>
      <description>
        
        
        
&lt;div class=&#34;youtube-video&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/uQh9ZVGkrak&#34; allowfullscreen title=&#34;gRPC Performance and Testing: a Maintainer Perspective&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;general&#34;&gt;General&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Always &lt;strong&gt;re-use stubs and channels&lt;/strong&gt; when possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use keepalive pings&lt;/strong&gt; to keep HTTP/2 connections alive during periods of
inactivity to allow initial RPCs to be made quickly without a delay (i.e.
C++ channel arg GRPC_ARG_KEEPALIVE_TIME_MS).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use streaming RPCs&lt;/strong&gt; when handling
a long-lived logical flow of data from the client-to-server,
server-to-client, or in both directions. Streams can avoid continuous RPC initiation,
which includes connection load balancing at the client-side, starting a new
HTTP/2 request at the transport layer, and invoking a user-defined method
handler on the server side.&lt;/p&gt;
&lt;p&gt;Streams, however, cannot be load balanced once they have started and can be hard
to debug for stream failures. They also might increase performance at a small scale
but can reduce scalability due to load balancing and complexity, so they should
only be used when they provide substantial performance or simplicity benefit to
application logic. Use streams to optimize the application, not gRPC.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Side note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;This does not apply to Python (see Python section for
details).&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(Special topic)&lt;/em&gt; Each gRPC channel uses 0 or more HTTP/2 connections and each connection
usually has a limit on the number of concurrent streams. When the number of
active RPCs on the connection reaches this limit, additional RPCs are queued
in the client and must wait for active RPCs to finish before they are sent.
Applications with high load or long-lived streaming RPCs might see
performance issues because of this queueing. There are two possible
solutions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Create a separate channel for each area of high load&lt;/strong&gt; in the
application.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use a pool of gRPC channels&lt;/strong&gt; to distribute RPCs over
multiple connections (channels must have different channel args to
prevent re-use so define a use-specific channel arg such as channel
number).&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;&lt;strong&gt;Side note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;The gRPC team has plans to add a feature to fix these
performance issues (see &lt;a href=&#34;https://github.com/grpc/grpc/issues/21386&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;grpc/grpc#21386&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
for more info), so any solution involving creating multiple channels
is a temporary workaround that should eventually not be needed.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;c&#34;&gt;C++&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Do not use Sync API for performance sensitive servers.&lt;/strong&gt; If performance
and/or resource consumption are not concerns, use the Sync API as it is the
simplest to implement for low-QPS services.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Favor callback API over other APIs for most RPCs&lt;/strong&gt;, given that the
application can avoid all blocking operations or blocking operations can be
moved to a separate thread. The callback API is easier to use than the
completion-queue async API but is currently slower for truly high-QPS workloads.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If having to use the async completion-queue API, the &lt;strong&gt;best scalability
trade-off is having &lt;code&gt;numcpu&lt;/code&gt;â€™s threads.&lt;/strong&gt; The ideal number of completion queues
in relation to the number of threads can change over time (as gRPC C++ evolves),
but as of gRPC 1.41 (Sept 2021), using 2 threads per completion queue seems
to give the best performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;For the async completion-queue API, make sure to &lt;strong&gt;register enough server
requests for the desired level of concurrency&lt;/strong&gt; to avoid the server
continuously getting stuck in a slow path that results in essentially serial
request processing.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(Special topic)&lt;/em&gt;
&lt;a href=&#34;https://grpc.github.io/grpc/cpp/grpcpp_2generic_2generic__stub_8h.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC::GenericStub&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
can be useful in certain cases when there is high contention / CPU time
spent on proto serialization. This class allows the application to directly
send &lt;strong&gt;raw gRPC::ByteBuffer as data&lt;/strong&gt; rather than serializing from some
proto. This can also be helpful if the same data is being sent multiple
times, with one explicit proto-to-ByteBuffer serialization followed by
multiple ByteBuffer sends.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;java&#34;&gt;Java&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Use non-blocking stubs&lt;/strong&gt; to parallelize RPCs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Provide a custom executor that limits the number of threads, based on your workload&lt;/strong&gt; (cached (default), fixed, forkjoin, etc).&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;python&#34;&gt;Python&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Streaming RPCs create extra threads for receiving and possibly sending the
messages, which makes &lt;strong&gt;streaming RPCs much slower than unary RPCs&lt;/strong&gt; in
gRPC Python, unlike the other languages supported by gRPC.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Using &lt;a href=&#34;https://grpc.github.io/grpc/python/grpc_asyncio.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;asyncio&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/strong&gt; could improve performance.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Using the future API in the sync stack results in the creation of an extra
thread. &lt;strong&gt;Avoid the future API&lt;/strong&gt; if possible.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;(Experimental)&lt;/em&gt; An experimental &lt;strong&gt;single-threaded unary-stream
implementation&lt;/strong&gt; is available via the
&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/src/python/grpcio/grpc/experimental/__init__.py#L38&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SingleThreadedUnaryStream channel option&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;,
which can save up to 7% latency per message.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Reflection</title>
      <link>https://grpc.io/docs/guides/reflection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/reflection/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Reflection is &lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/master/grpc/reflection/v1/reflection.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;a
protocol&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;
that gRPC servers can use to declare the protobuf-defined APIs they export over
a standardized RPC service, including all types referenced by the request and
response messages. Clients can then use this information to encode requests and
decode responses in human-readable manner.&lt;/p&gt;
&lt;p&gt;Reflection is used heavily by debugging tools such as
&lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;code&gt;grpcurl&lt;/code&gt;&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; and
&lt;a href=&#34;https://learning.postman.com/docs/sending-requests/grpc/grpc-client-overview/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Postman&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.
One coming from the REST world might compare the gRPC reflection API to serving
an OpenAPI document on the HTTP server presenting the REST API being described.&lt;/p&gt;
&lt;h3 id=&#34;transparency-and-interpretability&#34;&gt;Transparency and Interpretability&lt;/h3&gt;
&lt;p&gt;A big contributor to gRPC&amp;rsquo;s stellar performance is the use of Protobuf for
serialization &amp;ndash; a &lt;em&gt;binary&lt;/em&gt; non-human-readable protocol. While this greatly
speeds up an RPC, it can also make it more difficult to manually interact with a
server. Hypothetically, in order to manually send a gRPC request to a server
over HTTP/2 using &lt;code&gt;curl&lt;/code&gt;, you would have to:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Know which RPC services the server exposed.&lt;/li&gt;
&lt;li&gt;Know the protobuf definition of the request message and all types it
references.&lt;/li&gt;
&lt;li&gt;Know the protobuf definition of the response message all the types &lt;em&gt;it&lt;/em&gt;
references.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Then, you&amp;rsquo;d have to use that knowledge to hand-craft your request message(s) into
binary and painstakingly decode the response message(s). This would be time
consuming, frustrating, and error prone. Instead, the reflection protocol
enables tools to automate this whole process, making it invisible.&lt;/p&gt;
&lt;h3 id=&#34;enabling-reflection-on-a-grpc-server&#34;&gt;Enabling Reflection on a gRPC Server&lt;/h3&gt;
&lt;p&gt;Reflection is &lt;em&gt;not&lt;/em&gt; automatically enabled on a gRPC server. The server author
must call a few additional functions to add a reflection service. These API calls
differ slightly from language to language and, in some languages, require adding
a dependency on a separate package, named something like &lt;code&gt;grpc-reflection&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Follow these links below for details on your specific language:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Guide&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/example-reflection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/reflection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/cpp/reflection&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;C++ example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/examples/python/helloworld/greeter_server_with_reflection.py&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Javascript&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-node/blob/master/examples/reflection/server.js&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Javascript example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;tips&#34;&gt;Tips&lt;/h3&gt;
&lt;p&gt;Reflection works so seamlessly with tools such as &lt;code&gt;grpcurl&lt;/code&gt; that oftentimes,
people aren&amp;rsquo;t even aware that it&amp;rsquo;s happening under the hood. However, if
reflection isn&amp;rsquo;t exposed, things won&amp;rsquo;t work seamlessly at all. Instead, the
client will fail with nasty errors. People often run into this when writing the
routing configuration for a gRPC service. The &lt;em&gt;reflection&lt;/em&gt; service must be
routed to the appropriate backend as well as the application&amp;rsquo;s main RPC service.&lt;/p&gt;
&lt;p&gt;If your gRPC API is accessible to public users, you may &lt;em&gt;not&lt;/em&gt; want to expose the
reflection service, as you may consider this a security issue. Ultimately, you
will need to make a call here that strikes the best balance between security and
ease-of-use for you and your users.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Request Hedging</title>
      <link>https://grpc.io/docs/guides/request-hedging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/request-hedging/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Hedging is one of two configurable retry policies supported by gRPC. With
hedging, a gRPC client sends multiple copies of the same request to different
backends and uses the first response it receives. Subsequently, the client
cancels any outstanding requests and forwards the response to the application.&lt;/p&gt;
&lt;p&gt;

&lt;figure class=&#34;text-center&#34;&gt;
  &lt;img class=&#34;modal-trigger&#34; src=&#34;https://grpc.io/img/basic_hedge.svg&#34; alt=&#34;Basic hedging diagram&#34; id=&#34;basic_hedge.svg&#34; data-toggle=&#34;modal&#34; data-target=&#34;#modal-basic_hedge.svg&#34;/&gt;

  &lt;div class=&#34;modal&#34; id=&#34;modal-basic_hedge.svg&#34;&gt;
    &lt;div class=&#34;modal-dialog modal-lg modal-dialog-centered&#34;&gt;
      &lt;div class=&#34;modal-body&#34;&gt;
        &lt;img src=&#34;https://grpc.io/img/basic_hedge.svg&#34; alt=&#34;Basic hedging diagram&#34;/&gt;
      &lt;/div&gt;
  &lt;/div&gt;
&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;use-cases&#34;&gt;Use cases&lt;/h3&gt;
&lt;p&gt;Hedging is a technique to reduce tail latency in large scale distributed
systems. While naive implementations could add significant load to the backend
servers, it is possible to get most of the latency reduction effects while
increasing load only modestly.&lt;/p&gt;
&lt;p&gt;For an in-depth discussion on tail latencies, see the seminal article, &lt;a href=&#34;https://research.google/pubs/pub40801/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Tail
At Scale&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, by Jeff Dean and Luiz AndrÃ©
Barroso.&lt;/p&gt;
&lt;h4 id=&#34;configuring-hedging-in-grpc&#34;&gt;Configuring hedging in gRPC&lt;/h4&gt;
&lt;p&gt;Hedging is configurable via &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/service_config.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Service Config&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, at a per-method granularity.
The configuration contains the following knobs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;hedgingPolicy&amp;#34;: {
  &amp;#34;maxAttempts&amp;#34;: INTEGER,
  &amp;#34;hedgingDelay&amp;#34;: JSON proto3 Duration type,
  &amp;#34;nonFatalStatusCodes&amp;#34;: JSON array of grpc status codes (int or string)
}
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;maxAttempts&lt;/code&gt;: maximum number of in-flight requests while waiting for a
successful response. This is a mandatory field, and must be specified. If the
specified value is greater than &lt;code&gt;5&lt;/code&gt;, gRPC uses a value of &lt;code&gt;5&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hedgingDelay&lt;/code&gt;: amount of time that needs to elapse before the client sends out
the next request while waiting for a successful response. This field is
optional, and if left unspecified, results in &lt;code&gt;maxAttempts&lt;/code&gt; number of requests
all sent out at the same time.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nonFatalStatusCodes&lt;/code&gt;: an optional list of grpc status codes. If any of hedged
requests fails with a status code that is not present in this list, all
outstanding requests are canceled and the response is returned to the
application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;hedging-policy&#34;&gt;Hedging policy&lt;/h4&gt;
&lt;p&gt;When the application makes an RPC call that contains a &lt;code&gt;hedgingPolicy&lt;/code&gt;
configuration in the Service Config, the original RPC is sent immediately, as
with a standard non-hedged call. After &lt;code&gt;hedgingDelay&lt;/code&gt; has elapsed without a
successful response, the second RPC will be issued. If neither RPC has received
a response after &lt;code&gt;hedgingDelay&lt;/code&gt; has elapsed again, a third RPC is sent, and so
on, up to &lt;code&gt;maxAttempts&lt;/code&gt;. gRPC call deadlines apply to the entire chain of hedged
requests. Once the deadline has passed, the operation fails regardless of
in-flight RPCS, and regardless of the hedging configuration.&lt;/p&gt;
&lt;p&gt;When a successful response is received (in response to any of the hedged
requests), all outstanding hedged requests are canceled and the response is
returned to the client application layer.&lt;/p&gt;
&lt;p&gt;If an error response with a non-fatal status code (controlled by the
&lt;code&gt;nonFatalStatusCodes&lt;/code&gt; field) is received from a hedged request, then the next
hedged request in line is sent immediately, shortcutting its hedging delay. If
any other status code is received, all outstanding RPCs are canceled and the
error is returned to the client application layer.&lt;/p&gt;
&lt;p&gt;If all instances of a hedged RPC fail, there are no additional retry attempts.
Essentially, hedging can be seen as retrying the original RPC before a failure
is even received.&lt;/p&gt;
&lt;p&gt;If server pushback that specifies not to retry is received in response to a
hedged request, no further hedged requests should be issued for the call.&lt;/p&gt;
&lt;h4 id=&#34;throttling-hedged-rpcs&#34;&gt;Throttling Hedged RPCs&lt;/h4&gt;
&lt;p&gt;gRPC provides a way to throttle hedged RPCs to prevent server overload.
Throttling can be configured via the Service Config as well using the
&lt;code&gt;RetryThrottlingPolicy&lt;/code&gt; message. The throttling configuration contains the
following:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;retryThrottling&amp;#34;: {
  &amp;#34;maxTokens&amp;#34;: 10,
  &amp;#34;tokenRatio&amp;#34;: 0.1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For each server name, the gRPC client maintains a &lt;code&gt;token_count&lt;/code&gt; which is
initially set to &lt;code&gt;max_tokens&lt;/code&gt;. Every outgoing RPC (regardless of service or
method invoked) changes &lt;code&gt;token_count&lt;/code&gt; as follows:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Every failed RPC will decrement the &lt;code&gt;token_count&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Every successful RPC will increment the &lt;code&gt;token_count&lt;/code&gt; by &lt;code&gt;token_ratio&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;With hedging, the first request is always sent out, but subsequent hedged
requests are sent only if &lt;code&gt;token_count&lt;/code&gt; is greater than the threshold (defined
as &lt;code&gt;max_tokens / 2&lt;/code&gt;). If &lt;code&gt;token_count&lt;/code&gt; is less than or equal to the threshold,
hedged requests do not block. Instead  they are canceled, and if there are no
other already-sent hedged RPCs the failure is returned to the client
application.&lt;/p&gt;
&lt;p&gt;The only requests that are counted as failures for the throttling policy are the
ones that fail with a status code that qualifies as a non-fatal status code, or
that receive a pushback response indicating not to retry. This avoids conflating
server failure with responses to malformed requests (such as the
&lt;code&gt;INVALID_ARGUMENT&lt;/code&gt; status code).&lt;/p&gt;
&lt;h4 id=&#34;server-pushback&#34;&gt;Server Pushback&lt;/h4&gt;
&lt;p&gt;Servers may explicitly pushback by setting metadata in their response to the
client. If the pushback says not to retry, no further hedged requests will be
sent. If the pushback says to retry after a given delay, the next hedged request
(if any) will be issued after the given delay has elapsed.&lt;/p&gt;
&lt;p&gt;Server pushback is specified using the metadata key, &lt;code&gt;grpc-retry-pushback-ms&lt;/code&gt;.
The value is an ASCII encoded signed 32-bit integer with no unnecessary leading
zeros that represents how many milliseconds to wait before sending the next
hedged request. If the value for pushback is negative or unparseble, then it
will be seen as the server asking the client not to retry at all.&lt;/p&gt;
&lt;h3 id=&#34;resources&#34;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://research.google/pubs/pub40801/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;The Tail At Scale&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/service_config.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Service Config&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A6-client-retries.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRPC Retry Design&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/hedging&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;Not yet available&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;Not yet supported&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Retry</title>
      <link>https://grpc.io/docs/guides/retry/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/retry/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;Retries are a key pattern for making services more reliable. By re-attempting failed operations, applications can overcome temporary issues like network or server glitches. This is essential for modern cloud applications to handle the inevitable transient faults that occur.&lt;/p&gt;
&lt;p&gt;For the best practice, applications should understand what failed operations are suitable for retry, define exponential backoff parameters for retry delay, determine the number of retry attempts, and also monitor retry metrics.&lt;/p&gt;
&lt;h3 id=&#34;how-grpc-client-retry-works&#34;&gt;How gRPC client retry works&lt;/h3&gt;
&lt;p&gt;gRPCâ€™s built-in retry logic saves the call&amp;rsquo;s history for potential retries and monitors RPC events. Even if there is no retry policy configured, gRPC still saves the call&amp;rsquo;s history in case it needs to perform transparent retry (discussed in a later section). Note that â€˜retryâ€™ means replacing a failed call with a new call and replaying the call&amp;rsquo;s history on that newly created call.&lt;/p&gt;
&lt;p&gt;If certain criteria are met â€“ the RPC closes with a failure status code matching the retry policy&amp;rsquo;s retryable status codes and remains within the retry attempt limit â€“ gRPC will create a new retry stream after an exponential backoff delay.&lt;/p&gt;
&lt;p&gt;gRPC also supports other features like retry throttling and server push back. See &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A6-client-retries.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for client side retry&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; for further details.&lt;/p&gt;
&lt;p&gt;Once the response header is received, the RPC is committed. No further retries will be attempted, and gRPC hands over the RPC to the application.&lt;/p&gt;
&lt;p&gt;The graph below shows architectural overview of gRPC retry internal.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
  Application -&amp;gt;&amp;gt; gRPC Client: Configure retry policy. &amp;lt;br&amp;gt; Send request to dns:///my-service
  gRPC Client -&amp;gt;&amp;gt; gRPC Client: Save message
  gRPC Client -&amp;gt;&amp;gt; Server: Create initial attempt
  Server --&amp;gt;&amp;gt; gRPC Client : RPC closed with error 
  gRPC Client -&amp;gt;&amp;gt; Server: Create retry attempt 1 
  Server --&amp;gt;&amp;gt; gRPC Client: Successful 
  gRPC Client -&amp;gt;&amp;gt; Application: No more retry. Proceed.
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;retry-configuration&#34;&gt;Retry configuration&lt;/h3&gt;
&lt;p&gt;Retries are enabled by default, but there is no default retry policy. Without a retry policy, gRPC cannot safely retry RPCs in most cases. Only RPCs that failed due to low-level races are retried, and only if gRPC is certain the RPCs have not been processed by a server. This is known as &amp;ldquo;transparent retry.&amp;rdquo; You can configure a retry policy to allow gRPC to retry RPCs in more circumstances and more aggressively. You can also disable retries entirely when creating a channel, which disables transparent retries and any configured retry policies.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Transparent Retry&lt;/h4&gt;

    &lt;p&gt;Failure can occur in different stages. Even without an explicit retry policy, gRPC may perform transparent retries. The extent of these retries depends on when the failure happens:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;gRPC may do unlimited transparent retry when RPC never leaves the client.&lt;/li&gt;
&lt;li&gt;gRPC performs a single transparent retry when RPC reaches the gRPC server library, but has never been seen by the server application logic. Be aware of this type of retry, as it adds load to the network.&lt;/li&gt;
&lt;/ul&gt;


&lt;/div&gt;

&lt;p&gt;You can optimize your application&amp;rsquo;s retry functionality by focusing on key steps and configurations that gRPC supports.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Max number of retry attempts&lt;/li&gt;
&lt;li&gt;Exponential backoff&lt;/li&gt;
&lt;li&gt;Set of retryable status codes&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Retry is configurable via &lt;a href=&#34;https://grpc.io/docs/guides/service-config&#34;&gt;gRPC Service Config&lt;/a&gt;, at a per-method granularity.
The configuration contains the following knobs:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;retryPolicy&amp;#34;: {
  &amp;#34;maxAttempts&amp;#34;: 4,
  &amp;#34;initialBackoff&amp;#34;: &amp;#34;0.1s&amp;#34;,
  &amp;#34;maxBackoff&amp;#34;: &amp;#34;1s&amp;#34;,
  &amp;#34;backoffMultiplier&amp;#34;: 2,
  &amp;#34;retryableStatusCodes&amp;#34;: [
    &amp;#34;UNAVAILABLE&amp;#34;
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Jitter of plus or minus 20% is applied to the backoff delay to avoid hammering servers at the same time from a large number of clients.  In the example configuration above, &lt;code&gt;initialBackoff&lt;/code&gt; is set to 100ms, so the actual backoff delay after the first attempt will be for a random time period within the range &lt;code&gt;[80ms, 120ms]&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;gRPC supports throttle limit that prevents server overload due to retries. Below is an examples of retry throttle configuration:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&amp;#34;retryThrottling&amp;#34;: {
  &amp;#34;maxTokens&amp;#34;: 10,
  &amp;#34;tokenRatio&amp;#34;: 0.1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For each server, the gRPC client tracks a &lt;code&gt;token_count&lt;/code&gt; (initially set to &lt;code&gt;maxTokens&lt;/code&gt;). Failed RPCs decrement the count by 1, successful RPCs increment it by  &lt;code&gt;tokenRatio&lt;/code&gt;.  If the &lt;code&gt;token_count&lt;/code&gt; falls below half of &lt;code&gt;maxTokens&lt;/code&gt;, retries are paused until the count recovers.&lt;/p&gt;
&lt;p&gt;Further, hedging is a complementary feature to retries and can be configured similarly. For more details, see the &lt;a href=&#34;https://grpc.io/docs/guides/request-hedging/&#34;&gt;hedging guide&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;retry-observability&#34;&gt;Retry Observability&lt;/h3&gt;
&lt;p&gt;gRPC supports exposing OpenCensus and OpenTelemetry metrics when retry functionality is enabled. Here&amp;rsquo;s an example of the OpenTelemetry retry attempt statistics available:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grpc.client.attempt.started&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.client.attempt.duration&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.client.attempt.sent_total_compressed_message_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.client.attempt.rcvd_total_compressed_message_size&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Metrics at per cal level:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grpc.client.call.duration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And server side metrics:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;grpc.server.call.started&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.server.call.sent_total_compressed_message_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.server.call.rcvd_total_compressed_message_size&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;grpc.server.call.duration&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Find in-depth metrics and tracing information, along with configuration instructions, in the &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for Otel metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A45-retry-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for retry status&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;language-guides-and-examples&#34;&gt;Language guides and examples&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;th&gt;Documentation&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;C++&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/retry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples/src/main/java/io/grpc/examples/retrying&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://grpc.github.io/grpc-java/javadoc/io/grpc/ManagedChannelBuilder.html#enableRetry%28%29&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java Documentation&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/retry&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python Example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;additional-resources&#34;&gt;Additional Resources&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A6-client-retries.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for client side retry&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A45-retry-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for retry status&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/guides/request-hedging/&#34;&gt;Hedging Guide&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/guides/service-config&#34;&gt;gRPC Service Config&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A66-otel-stats.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;gRFC for Otel metrics&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Service Config</title>
      <link>https://grpc.io/docs/guides/service-config/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/service-config/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;The service config specifies how gRPC clients should behave when interacting
with a gRPC server. Service owners can provide a service config with expected
behavior of all service clients. The settings in a service config always apply
to a specific target string (e.g. &amp;ldquo;api.myapp.com&amp;rdquo;), not globally.&lt;/p&gt;
&lt;h3 id=&#34;behavior-controlled-by-the-service-config&#34;&gt;Behavior controlled by the Service Config&lt;/h3&gt;
&lt;p&gt;The settings in the service config affect client side load balancing, call
behavior and health checking.&lt;/p&gt;
&lt;p&gt;This page outlines the options in the service config, but the full service
config data structure is documented with a &lt;a href=&#34;https://github.com/grpc/grpc-proto/blob/master/grpc/service_config/service_config.proto&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;protobuf definition&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h4 id=&#34;load-balancing&#34;&gt;Load Balancing&lt;/h4&gt;
&lt;p&gt;A service can be composed of multiple servers and the load balancing
configuration specifies how calls from clients should be distributed among
those servers. By default the &lt;code&gt;pick_first&lt;/code&gt; load balancing policy is utilized,
but another policy can be specified in the service config. E.g. specifying the
&lt;code&gt;round_robin&lt;/code&gt; policy will make the clients rotate through the servers instead
of repeatedly using the first server.&lt;/p&gt;
&lt;h4 id=&#34;call-behavior&#34;&gt;Call Behavior&lt;/h4&gt;
&lt;p&gt;RPCs can be configured in many ways:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;With &lt;a href=&#34;https://grpc.io/docs/guides/wait-for-ready/&#34;&gt;wait-for-ready&lt;/a&gt; enabled, if a client cannot connect to a backend, the
RPC will be delayed instead of immediately failing.&lt;/li&gt;
&lt;li&gt;A call &lt;a href=&#34;https://grpc.io/docs/guides/deadlines/&#34;&gt;timeout&lt;/a&gt; can be provided, indicating the maximum time the client
should wait before giving up on the RPC.&lt;/li&gt;
&lt;li&gt;One of:
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/guides/retry/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Retry&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; policy (max attempts, backoff settings, retryable status codes)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://grpc.io/docs/guides/request-hedging/&#34;&gt;Hedging&lt;/a&gt; policy (max attempts, delay, non-fatal status codes)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    &lt;p&gt;These call behavior settings can be limited to an individual service or a
method.&lt;/p&gt;
&lt;p&gt;Retry and hedging policies can be further adjusted by setting a &lt;em&gt;retry
throttling policy&lt;/em&gt; but it will apply across all services and methods.&lt;/p&gt;


&lt;/div&gt;

&lt;h4 id=&#34;health-checking&#34;&gt;Health Checking&lt;/h4&gt;
&lt;p&gt;A client can be configured to perform &lt;a href=&#34;https://grpc.io/docs/guides/health-checking/&#34;&gt;health checking&lt;/a&gt; by providing a health
checking name. The client will then use the standard gRPC health checking
service.&lt;/p&gt;
&lt;h3 id=&#34;acquiring-a-service-config&#34;&gt;Acquiring a Service Config&lt;/h3&gt;
&lt;p&gt;A service config can be provided to a client either via name resolution or
programatically by the client application.&lt;/p&gt;
&lt;h4 id=&#34;name-resolution&#34;&gt;Name Resolution&lt;/h4&gt;
&lt;p&gt;The gRPC &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/naming.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;name resolution mechanism&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; allows for pluggable name resolver
implementations. These implementations return the addresses associated with a
name as well as an associated service config. This is the mechanism
that service owners can use to distribute their service config out to a fleet
of gRPC clients.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;The xDS name resolver converts the xDS configuration it receives from the
control plane to a corresponding service config.&lt;/li&gt;
&lt;li&gt;The standard DNS name resolver in the Go implementation supports service
configs &lt;a href=&#34;https://github.com/grpc/proposal/blob/master/A2-service-configs-in-dns.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;stored as TXT records&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; on the name server.&lt;/li&gt;
&lt;/ul&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    Even though the service config structure is documented with a protobuf
definition the internal representation in the client is JSON. Name resolver
implementations are free to store the service config information in any way they
prefer as long as they provide it in JSON format at name resolution time.

&lt;/div&gt;

&lt;h4 id=&#34;programatically&#34;&gt;Programatically&lt;/h4&gt;
&lt;p&gt;The gRPC client API provides a way to specify a service config in JSON format.
This is used to provide a default service config that will be used in
situations where the name resolver does not provide a service config. It can
also be useful in some testing situations.&lt;/p&gt;
&lt;h3 id=&#34;example-service-config&#34;&gt;Example Service Config&lt;/h3&gt;
&lt;p&gt;The below example does the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Enables the &lt;code&gt;round_robin&lt;/code&gt; load balancing policy.&lt;/li&gt;
&lt;li&gt;Sets a default call timeout of 1s that applies to all methods in all
services.&lt;/li&gt;
&lt;li&gt;Overides that timeout to be 2s for the &lt;code&gt;bar&lt;/code&gt; method in the &lt;code&gt;foo&lt;/code&gt; service as
well as all the methods in the &lt;code&gt;baz&lt;/code&gt; service.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;loadBalancingConfig&amp;#34;&lt;/span&gt;: [ { &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;round_robin&amp;#34;&lt;/span&gt;: {} } ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;methodConfig&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: [{}],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;1s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: [
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        { &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt; },
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        { &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;service&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;baz&amp;#34;&lt;/span&gt; }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      ],
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;timeout&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;2s&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    }
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ]
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: Status Codes</title>
      <link>https://grpc.io/docs/guides/status-codes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/status-codes/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;All RPCs will result in a &lt;code&gt;status&lt;/code&gt; being returned to the client.  A &lt;code&gt;status&lt;/code&gt; object is composed of an integer
code and a string error description. The server-side (or the gRPC library for library level errors) chooses
the status it returns for a given RPC. Applications should only use values defined below.&lt;/p&gt;
&lt;p&gt;When an error situation occurs, the gRPC library may produce a corresponding &lt;code&gt;status&lt;/code&gt;. The library may do this
either on the client- or the server-side. Only a subset of the pre-defined status codes are generated by the gRPC
libraries. This allows applications to be sure that any other code it sees was actually
returned by the application (although it is also possible for the
server-side to return one of the codes generated by the gRPC libraries).&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://grpc.io/docs/guides/error&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Error handling&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt; user guide
for how to use status codes.&lt;/p&gt;
&lt;h3 id=&#34;full-list-of-status-codes&#34;&gt;Full list of Status codes&lt;/h3&gt;
&lt;p&gt;gRPC uses a set of well defined status codes as part of the RPC API.&lt;/p&gt;
&lt;p&gt;The following status codes are never generated by the library, only by user code:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;INVALID_ARGUMENT&lt;/li&gt;
&lt;li&gt;NOT_FOUND&lt;/li&gt;
&lt;li&gt;ALREADY_EXISTS&lt;/li&gt;
&lt;li&gt;FAILED_PRECONDITION&lt;/li&gt;
&lt;li&gt;ABORTED&lt;/li&gt;
&lt;li&gt;OUT_OF_RANGE&lt;/li&gt;
&lt;li&gt;DATA_LOSS&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;the-full-list-of-status-codes&#34;&gt;The full list of status codes&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Code&lt;/th&gt;
&lt;th&gt;Id&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;OK&lt;/td&gt;
&lt;td&gt;0&lt;/td&gt;
&lt;td&gt;Not an error; returned on success.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CANCELLED&lt;/td&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;The operation was cancelled, typically by the caller.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNKNOWN&lt;/td&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Unknown error. For example, this error may be returned when a &lt;code&gt;Status&lt;/code&gt; value received from another address space belongs to an error space that is not known in this address space. Also errors raised by APIs that do not return enough error information may be converted to this error.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INVALID_ARGUMENT&lt;/td&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;The client specified an invalid argument. Note that this differs from &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt;. &lt;code&gt;INVALID_ARGUMENT&lt;/code&gt; indicates arguments that are problematic regardless of the state of the system (e.g., a malformed file name).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DEADLINE_EXCEEDED&lt;/td&gt;
&lt;td&gt;4&lt;/td&gt;
&lt;td&gt;The deadline expired before the operation could complete. For operations that change the state of the system, this error may be returned even if the operation has completed successfully. For example, a successful response from a server could have been delayed long enough for the deadline to expire.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;NOT_FOUND&lt;/td&gt;
&lt;td&gt;5&lt;/td&gt;
&lt;td&gt;Some requested entity (e.g., file or directory) was not found. Note to server developers: if a request is denied for an entire class of users, such as gradual feature rollout or undocumented allowlist, &lt;code&gt;NOT_FOUND&lt;/code&gt; may be used. If a request is denied for some users within a class of users, such as user-based access control, &lt;code&gt;PERMISSION_DENIED&lt;/code&gt; must be used.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ALREADY_EXISTS&lt;/td&gt;
&lt;td&gt;6&lt;/td&gt;
&lt;td&gt;The entity that a client attempted to create (e.g., file or directory) already exists.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PERMISSION_DENIED&lt;/td&gt;
&lt;td&gt;7&lt;/td&gt;
&lt;td&gt;The caller does not have permission to execute the specified operation. &lt;code&gt;PERMISSION_DENIED&lt;/code&gt; must not be used for rejections caused by exhausting some resource (use &lt;code&gt;RESOURCE_EXHAUSTED&lt;/code&gt; instead for those errors). &lt;code&gt;PERMISSION_DENIED&lt;/code&gt; must not be used if the caller can not be identified (use &lt;code&gt;UNAUTHENTICATED&lt;/code&gt; instead for those errors). This error code does not imply the request is valid or the requested entity exists or satisfies other pre-conditions.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;RESOURCE_EXHAUSTED&lt;/td&gt;
&lt;td&gt;8&lt;/td&gt;
&lt;td&gt;Some resource has been exhausted, perhaps a per-user quota, or perhaps the entire file system is out of space.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FAILED_PRECONDITION&lt;/td&gt;
&lt;td&gt;9&lt;/td&gt;
&lt;td&gt;The operation was rejected because the system is not in a state required for the operation&amp;rsquo;s execution. For example, the directory to be deleted is non-empty, an rmdir operation is applied to a non-directory, etc. Service implementors can use the following guidelines to decide between &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt;, &lt;code&gt;ABORTED&lt;/code&gt;, and &lt;code&gt;UNAVAILABLE&lt;/code&gt;: (a) Use &lt;code&gt;UNAVAILABLE&lt;/code&gt; if the client can retry just the failing call. (b) Use &lt;code&gt;ABORTED&lt;/code&gt; if the client should retry at a higher level (e.g., when a client-specified test-and-set fails, indicating the client should restart a read-modify-write sequence). (c) Use &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt; if the client should not retry until the system state has been explicitly fixed. E.g., if an &amp;ldquo;rmdir&amp;rdquo; fails because the directory is non-empty, &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt; should be returned since the client should not retry unless the files are deleted from the directory.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ABORTED&lt;/td&gt;
&lt;td&gt;10&lt;/td&gt;
&lt;td&gt;The operation was aborted, typically due to a concurrency issue such as a sequencer check failure or transaction abort. See the guidelines above for deciding between &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt;, &lt;code&gt;ABORTED&lt;/code&gt;, and &lt;code&gt;UNAVAILABLE&lt;/code&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;OUT_OF_RANGE&lt;/td&gt;
&lt;td&gt;11&lt;/td&gt;
&lt;td&gt;The operation was attempted past the valid range. E.g., seeking or reading past end-of-file. Unlike &lt;code&gt;INVALID_ARGUMENT&lt;/code&gt;, this error indicates a problem that may be fixed if the system state changes. For example, a 32-bit file system will generate &lt;code&gt;INVALID_ARGUMENT&lt;/code&gt; if asked to read at an offset that is not in the range [0,2^32-1], but it will generate &lt;code&gt;OUT_OF_RANGE&lt;/code&gt; if asked to read from an offset past the current file size. There is a fair bit of overlap between &lt;code&gt;FAILED_PRECONDITION&lt;/code&gt; and &lt;code&gt;OUT_OF_RANGE&lt;/code&gt;. We recommend using &lt;code&gt;OUT_OF_RANGE&lt;/code&gt; (the more specific error) when it applies so that callers who are iterating through a space can easily look for an &lt;code&gt;OUT_OF_RANGE&lt;/code&gt; error to detect when they are done.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNIMPLEMENTED&lt;/td&gt;
&lt;td&gt;12&lt;/td&gt;
&lt;td&gt;The operation is not implemented or is not supported/enabled in this service.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;INTERNAL&lt;/td&gt;
&lt;td&gt;13&lt;/td&gt;
&lt;td&gt;Internal errors. This means that some invariants expected by the underlying system have been broken. This error code is reserved for serious errors.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNAVAILABLE&lt;/td&gt;
&lt;td&gt;14&lt;/td&gt;
&lt;td&gt;The service is currently unavailable. This is most likely a transient condition, which can be corrected by retrying with a backoff. Note that it is not always safe to retry non-idempotent operations.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;DATA_LOSS&lt;/td&gt;
&lt;td&gt;15&lt;/td&gt;
&lt;td&gt;Unrecoverable data loss or corruption.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;UNAUTHENTICATED&lt;/td&gt;
&lt;td&gt;16&lt;/td&gt;
&lt;td&gt;The request does not have valid authentication credentials for the operation.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Wait-for-Ready</title>
      <link>https://grpc.io/docs/guides/wait-for-ready/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://grpc.io/docs/guides/wait-for-ready/</guid>
      <description>
        
        
        &lt;h3 id=&#34;overview&#34;&gt;Overview&lt;/h3&gt;
&lt;p&gt;This is a feature which can be used on a stub which will cause the RPCs to wait
for the server to become available before sending the request.  This allows
for robust batch workflows since transient server problems won&amp;rsquo;t cause failures.
The deadline still applies, so the wait will be interrupted if the deadline is
passed.&lt;/p&gt;
&lt;p&gt;When an RPC is created when the channel has failed to connect to the server,
without Wait-for-Ready it will immediately return a failure; with Wait-for-Ready
it will simply be queued until the connection becomes ready.  The default is
&lt;strong&gt;without&lt;/strong&gt; Wait-for-Ready.&lt;/p&gt;
&lt;p&gt;For detailed semantics see &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/wait-for-ready.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;how-to-use-wait-for-ready&#34;&gt;How to use Wait-for-Ready&lt;/h3&gt;
&lt;p&gt;You can specify for a stub whether or not it should use Wait-for-Ready, which
will automatically be passed along when an RPC is created.&lt;/p&gt;


&lt;div class=&#34;alert alert-info&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;Note&lt;/h4&gt;

    The RPC can still fail for other reasons besides the server not being
ready, so error handling is still necessary.

&lt;/div&gt;

&lt;p&gt;The following shows the sequence of events that occur, when a client sends a
message to a server, based upon channel state and whether or not Wait-for-Ready
is set.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;sequenceDiagram
participant A as Application
participant RPC
participant CH as Channel
participant S as Server 
A-&amp;gt;&amp;gt;RPC: Create RPC using stub
RPC-&amp;gt;&amp;gt;CH: Initiate Communication
alt channel state: READY
  CH-&amp;gt;&amp;gt;S: Send message
else Channel state: IDLE or CONNECTING
  CH--&amp;gt;&amp;gt;CH: Wait for state change
else Channel state: TRANSIENT_FAILURE
  alt with Wait-for-Ready
    CH--&amp;gt;&amp;gt;CH: Wait for channel&amp;lt;br&amp;gt;becoming READY&amp;lt;br&amp;gt;(or a permanent failure)
    CH-&amp;gt;&amp;gt;S: Send message
  else without Wait-for-Ready
    CH-&amp;gt;&amp;gt;A: Failure
  end
else Channel state is a Permanent Failure
    CH-&amp;gt;&amp;gt;A: Failure
end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following is a state based view&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-mermaid&#34; data-lang=&#34;mermaid&#34;&gt;stateDiagram-v2
   state &amp;#34;Initiating Communication&amp;#34; as IC
   state &amp;#34;Channel State&amp;#34; as CS
   IC--&amp;gt;CS: Check Channel State
   state CS {
      state &amp;#34;Permanent Failure&amp;#34; as PF
      state &amp;#34;TRANSIENT_FAILURE&amp;#34; as TF
      IDLE --&amp;gt; CONNECTING
      CONNECTING --&amp;gt; READY
      READY--&amp;gt;[*]
      CONNECTING--&amp;gt;TF
      CONNECTING--&amp;gt;PF
      TF--&amp;gt;READY
      TF --&amp;gt;[*]: without\n wait-for-ready
      TF--&amp;gt;PF
      PF--&amp;gt;[*]
   }
  state &amp;#34;MSG sent&amp;#34; as MS
  state &amp;#34;RPC Failed&amp;#34; as RF
  CS--&amp;gt;WAIT:From IDLE /\nCONNECTING
  CS--&amp;gt;WAIT:From Transient\nFailure with\nWait-for-Ready
  WAIT--&amp;gt;CS:State Change 
  CS--&amp;gt;MS: From READY
  CS--&amp;gt;RF: From Permanent failure or\nTransient Failure without\nWait-for-Ready
  MS--&amp;gt;[*]
  RF--&amp;gt;[*]
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;alternatives&#34;&gt;Alternatives&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Loop (with exponential backoff) until the RPC stops returning transient failures.
&lt;ul&gt;
&lt;li&gt;This could be combined, for efficiency, with implementing an &lt;code&gt;onReady&lt;/code&gt; Handler
&lt;em&gt;(for languages that support this)&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Accept failures that might have been avoided by waiting because you want to
fail fast&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;language-support&#34;&gt;Language Support&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Language&lt;/th&gt;
&lt;th&gt;Example&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Java&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/examples/src/main/java/io/grpc/examples/waitforready/WaitForReadyClient.java&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Java example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Go&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc-go/tree/master/examples/features/wait_for_ready&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Go example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Python&lt;/td&gt;
&lt;td&gt;&lt;a href=&#34;https://github.com/grpc/grpc/tree/master/examples/python/wait_for_ready&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python example&lt;i class=&#34;fas fa-external-link-alt&#34;&gt;&lt;/i&gt;&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
  </channel>
</rss>
