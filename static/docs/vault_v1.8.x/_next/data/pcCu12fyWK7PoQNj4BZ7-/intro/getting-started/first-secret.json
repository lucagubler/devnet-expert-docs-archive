{"pageProps":{"currentPath":"getting-started/first-secret","frontMatter":{"layout":"intro","page_title":"Your First Secret - Getting Started","description":"With the Vault server running, let's read and write our first secret."},"githubFileUrl":"https://github.com/hashicorp/vault/blob/main/website/content/intro/getting-started/first-secret.mdx","mdxSource":{"compiledSource":"var m=Object.defineProperty;var l=Object.prototype.hasOwnProperty;var o=Object.getOwnPropertySymbols,p=Object.prototype.propertyIsEnumerable;var r=(a,s,t)=>s in a?m(a,s,{enumerable:!0,configurable:!0,writable:!0,value:t}):a[s]=t,e=(a,s)=>{for(var t in s||(s={}))l.call(s,t)&&r(a,t,s[t]);if(o)for(var t of o(s))p.call(s,t)&&r(a,t,s[t]);return a};var i=(a,s)=>{var t={};for(var n in a)l.call(a,n)&&s.indexOf(n)<0&&(t[n]=a[n]);if(a!=null&&o)for(var n of o(a))s.indexOf(n)<0&&p.call(a,n)&&(t[n]=a[n]);return t};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(t){var n=t,{components:a}=n,s=i(n,[\"components\"]);return mdx(MDXLayout,e(e(e({},layoutProps),s),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",e({},{className:\"g-type-display-2\"}),mdx(\"a\",e({parentName:\"h1\"},{className:\"__permalink-h\",href:\"#your-first-secret\",\"aria-label\":\"your first secret permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h1\"},{className:\"__target-h\",id:\"your-first-secret\",\"aria-hidden\":\"\"})),\"Your First Secret\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Now that the dev server is up and running, let's get straight to it and\nread and write our first secret.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`One of the core features of Vault is the ability to read and write\narbitrary secrets securely. On this page, we'll do this using the CLI,\nbut there is also a complete\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/api\"}),\"HTTP API\"),`\nthat can be used to programmatically do anything with Vault.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Secrets written to Vault are encrypted and then written to backend\nstorage. For our dev server, backend storage is in-memory, but in production\nthis would more likely be on disk or in `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.consul.io\"}),\"Consul\"),`.\nVault encrypts the value before it is ever handed to the storage driver.\nThe backend storage mechanism `,mdx(\"em\",{parentName:\"p\"},\"never\"),` sees the unencrypted value and doesn't\nhave the means necessary to decrypt it without Vault.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#writing-a-secret\",\"aria-label\":\"writing a secret permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"writing-a-secret\",\"aria-hidden\":\"\"})),\"Writing a Secret\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Let's start by writing a secret. This is done very simply with the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"vault kv\"),\" command, as shown below:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv put secret/hello \",mdx(\"span\",e({parentName:\"span\"},{className:\"token assign-left variable\"}),\"foo\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"world\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Success! Data written to: secret/hello\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This writes the pair \",mdx(\"inlineCode\",{parentName:\"p\"},\"foo=world\"),\" to the path \",mdx(\"inlineCode\",{parentName:\"p\"},\"secret/hello\"),`. We'll\ncover paths in more detail later, but for now it is important that the\npath is prefixed with `,mdx(\"inlineCode\",{parentName:\"p\"},\"secret/\"),`, otherwise this example won't work. The\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"secret/\"),\" prefix is where arbitrary secrets can be read and written.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"You can even write multiple pieces of data, if you want:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv put secret/hello \",mdx(\"span\",e({parentName:\"span\"},{className:\"token assign-left variable\"}),\"foo\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"world \",mdx(\"span\",e({parentName:\"span\"},{className:\"token assign-left variable\"}),\"excited\"),mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"yes\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Success! Data written to: secret/hello\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"inlineCode\",{parentName:\"p\"},\"vault kv put\"),` is a very powerful command. In addition to writing data\ndirectly from the command-line, it can read values and key pairs from\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"STDIN\"),` as well as files. For more information, see the\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/commands\"}),\"command documentation\"),\".\"),mdx(\"div\",e({},{className:\"alert alert-warning g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),\"\",mdx(\"strong\",{parentName:\"p\"},\"Warning:\"),\" The documentation uses the \",mdx(\"inlineCode\",{parentName:\"p\"},\"key=value\"),` based entry\nthroughout, but it is more secure to use files if possible. Sending\ndata via the CLI is often logged in shell history. For real secrets,\nplease use files. See the link above about reading in from `,mdx(\"inlineCode\",{parentName:\"p\"},\"STDIN\"),\" for more information.\")),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#getting-a-secret\",\"aria-label\":\"getting a secret permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"getting-a-secret\",\"aria-hidden\":\"\"})),\"Getting a Secret\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"As you might expect, secrets can be gotten with \",mdx(\"inlineCode\",{parentName:\"p\"},\"vault get\"),\":\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv get secret/hello\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Key                 Value\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"---                 -----\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"refresh_interval    768h\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"excited             yes\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"foo                world\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`As you can see, the values we wrote are given back to us. Vault gets\nthe data from storage and decrypts it.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The output format is purposefully whitespace separated to make it easy\nto pipe into a tool like `,mdx(\"inlineCode\",{parentName:\"p\"},\"awk\"),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This contains some extra information. Many secrets engines create leases for\nsecrets that allow time-limited access to other systems, and in those cases\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"lease_id\"),\" would contain a lease identifier and \",mdx(\"inlineCode\",{parentName:\"p\"},\"lease_duration\"),` would contain\nthe length of time for which the lease is valid, in seconds.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Optional JSON output is very useful for scripts. For example below we use the\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"jq\"),\" tool to extract the value of the \",mdx(\"inlineCode\",{parentName:\"p\"},\"excited\"),\" secret:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv get -format\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"json secret/hello \",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"|\"),\" jq -r .data.data.excited\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"yes\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"When supported, you can also get a field directly:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv get -field\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"excited secret/hello\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"yes\"),`\n`)),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#deleting-a-secret\",\"aria-label\":\"deleting a secret permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"deleting-a-secret\",\"aria-hidden\":\"\"})),\"Deleting a Secret\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Now that we've learned how to read and write a secret, let's go ahead\nand delete it. We can do this with `,mdx(\"inlineCode\",{parentName:\"p\"},\"vault delete\"),\":\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault kv delete secret/hello\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Success! Data deleted (if it existed) at: secret/hello\"),`\n`)),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#next\",\"aria-label\":\"next permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"next\",\"aria-hidden\":\"\"})),\"Next\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`In this section we learned how to use the powerful CRUD features of\nVault to store arbitrary secrets. On its own this is already a useful\nbut basic feature.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Next, we'll learn the basics about \",mdx(\"a\",e({parentName:\"p\"},{href:\"/intro/getting-started/secrets-engines\"}),\"secrets engines\"),\".\"))}MDXContent.isMDXComponent=!0;\n","scope":{}},"navData":[{"title":"Getting Started","routes":[{"title":"Overview","path":"getting-started","filePath":"content/intro/getting-started/index.mdx"},{"title":"Starting the Server","path":"getting-started/dev-server","filePath":"content/intro/getting-started/dev-server.mdx"},{"title":"Your First Secret","path":"getting-started/first-secret","filePath":"content/intro/getting-started/first-secret.mdx"},{"title":"Secrets Engines","path":"getting-started/secrets-engines","filePath":"content/intro/getting-started/secrets-engines.mdx"},{"title":"Dynamic Secrets","path":"getting-started/dynamic-secrets","filePath":"content/intro/getting-started/dynamic-secrets.mdx"},{"title":"Built-in Help","path":"getting-started/help","filePath":"content/intro/getting-started/help.mdx"},{"title":"Authentication","path":"getting-started/authentication","filePath":"content/intro/getting-started/authentication.mdx"},{"title":"Policies","path":"getting-started/policies","filePath":"content/intro/getting-started/policies.mdx"},{"title":"Deploy Vault","path":"getting-started/deploy","filePath":"content/intro/getting-started/deploy.mdx"},{"title":"HTTP API","path":"getting-started/apis","filePath":"content/intro/getting-started/apis.mdx"},{"title":"Next Steps","path":"getting-started/next-steps","filePath":"content/intro/getting-started/next-steps.mdx"}]}],"versions":[]},"__N_SSG":true}