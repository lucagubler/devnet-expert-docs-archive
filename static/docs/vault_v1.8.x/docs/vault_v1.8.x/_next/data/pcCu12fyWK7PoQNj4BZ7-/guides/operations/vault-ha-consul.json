{"pageProps":{"currentPath":"operations/vault-ha-consul","frontMatter":{"layout":"guides","page_title":"Vault HA with Consul - Guides","description":"This guide will walk you through a simple Vault Highly Available (HA) cluster\nimplementation. While this is not an exhaustive or prescriptive guide that\ncan be used as a drop-in production example, it covers the basics enough to\ninform your own production setup."},"githubFileUrl":"https://github.com/hashicorp/vault/blob/main/website/content/guides/operations/vault-ha-consul.mdx","mdxSource":{"compiledSource":"var p=Object.defineProperty;var r=Object.prototype.hasOwnProperty;var l=Object.getOwnPropertySymbols,i=Object.prototype.propertyIsEnumerable;var o=(a,t,n)=>t in a?p(a,t,{enumerable:!0,configurable:!0,writable:!0,value:n}):a[t]=n,e=(a,t)=>{for(var n in t||(t={}))r.call(t,n)&&o(a,n,t[n]);if(l)for(var n of l(t))i.call(t,n)&&o(a,n,t[n]);return a};var d=(a,t)=>{var n={};for(var s in a)r.call(a,s)&&t.indexOf(s)<0&&(n[s]=a[s]);if(a!=null&&l)for(var s of l(a))t.indexOf(s)<0&&i.call(a,s)&&(n[s]=a[s]);return n};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(n){var s=n,{components:a}=s,t=d(s,[\"components\"]);return mdx(MDXLayout,e(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",e({},{className:\"g-type-display-2\"}),mdx(\"a\",e({parentName:\"h1\"},{className:\"__permalink-h\",href:\"#vault-high-availability-ha\",\"aria-label\":\"vault high availability ha permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h1\"},{className:\"__target-h\",id:\"vault-high-availability-ha\",\"aria-hidden\":\"\"})),\"Vault High Availability (HA)\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Vault can run in a high availability (HA) mode to protect against outages by\nrunning multiple Vault servers. Vault is typically bound by the IO limits of the\nstorage backend rather than the compute requirements. Certain storage backends,\nsuch as Consul, provide additional coordination functions that enable Vault to\nrun in an HA configuration while others provide a more robust backup and\nrestoration process.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"When running in HA mode, Vault servers have two additional states: \",mdx(\"strong\",{parentName:\"p\"},mdx(\"em\",{parentName:\"strong\"},\"standby\")),`\nand `,mdx(\"strong\",{parentName:\"p\"},mdx(\"em\",{parentName:\"strong\"},\"active\")),`. Within a Vault cluster, only a single instance will be\n`,mdx(\"em\",{parentName:\"p\"},\"active\"),\" and handles all requests (reads and writes) and all \",mdx(\"em\",{parentName:\"p\"},\"standby\"),` nodes\nredirect requests to the `,mdx(\"em\",{parentName:\"p\"},\"active\"),\" node.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"img\",e({parentName:\"p\"},{src:\"/img/vault-ha-consul-3.png\",alt:\"Reference Architecture\"}))),mdx(\"blockquote\",null,mdx(\"p\",e({parentName:\"blockquote\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"NOTE:\"),\" As of version \",mdx(\"strong\",{parentName:\"p\"},\"0.11\"),`, those standby nodes can handle most\nread-only requests and behave as read-replica nodes. This `,mdx(\"strong\",{parentName:\"p\"},`Performance Standby\nNodes`),\" feature is included in \",mdx(\"em\",{parentName:\"p\"},\"Vault Enterprise Premium\"),`, and also available\nfor `,mdx(\"em\",{parentName:\"p\"},\"Vault Enterprise Pro\"),` with additional fee. This is particularly useful for\nprocessing high volume Encryption as a Service (`,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/secrets/transit\"}),`Transit secrets\nengine`),\") requests. Read \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/enterprise/performance-standby\"}),`Performance Standby\nNodes`),\" documentation and a \",mdx(\"a\",e({parentName:\"p\"},{href:\"/guides/operations/performance-nodes\"}),\"guide\"),\" for more details.\")),mdx(\"div\",e({},{className:\"alert alert-warning g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),`This guide will walk you through a simple Vault Highly Available (HA) cluster\nimplementation. While this is not an exhaustive or prescriptive guide that can\nbe used as a drop-in production example, it covers the `,mdx(\"strong\",{parentName:\"p\"},\"basics\"),` enough to\ninform your own production setup.`)),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#reference-materials\",\"aria-label\":\"reference materials permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"reference-materials\",\"aria-hidden\":\"\"})),\"Reference Materials\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/concepts/ha\"}),\"High Availability Mode\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/configuration/storage/consul\"}),\"Consul Storage Backend\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/configuration#high-availability-parameters\"}),\"High Availability Parameters\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"https://www.consul.io/docs/agent/options.html\"}),\"Consul Agent Configuration\"))),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#estimated-time-to-complete\",\"aria-label\":\"estimated time to complete permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"estimated-time-to-complete\",\"aria-hidden\":\"\"})),\"Estimated Time to Complete\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"25 minutes\"),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#prerequisites\",\"aria-label\":\"prerequisites permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"prerequisites\",\"aria-hidden\":\"\"})),\"Prerequisites\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This intermediate Vault operations guide assumes that you have some working\nknowledge of Vault and Consul.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#steps\",\"aria-label\":\"steps permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"steps\",\"aria-hidden\":\"\"})),\"Steps\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Our goal in following this guide is to arrive at a Vault HA setup\nconsisting of the following:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),\"2 Vault servers: 1 active and 1 standby\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),\"Cluster of 3 Consul servers\")),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#reference-diagram\",\"aria-label\":\"reference diagram permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"reference-diagram\",\"aria-hidden\":\"\"})),\"Reference Diagram\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This diagram lays out the simple architecture details for reference:\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"img\",e({parentName:\"p\"},{src:\"/img/vault-ha-consul.png\",alt:\"Reference Architecture\"}))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"You perform the following:\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"#step1\"}),\"Step 1: Setup a Consul Server Cluster\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"#step2\"}),\"Step 2: Start and Verify the Consul Cluster State\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"#step3\"}),\"Step 3: Setup Consul Client Agents on Vault Nodes\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"#step4\"}),\"Step 4: Configure the Vault Servers\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"#step5\"}),\"Step 5: Start Vault and Verify the State\"))),mdx(\"div\",e({},{className:\"alert alert-info g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),`For the purpose of this guide, we will use the open source software editions of\nVault and Consul; however, the setup is the same for Enterprise editions.`)),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#step1\",\"aria-label\":\"step 1 setup a consul server cluster permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h __compat\",id:\"step1\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"step-1-setup-a-consul-server-cluster\",\"aria-hidden\":\"\"})),\"Step 1: Setup a Consul Server Cluster\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Our Consul servers in this guide will be defined by IP address only, but also\nreferenced by a label:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"consul_s1: 10.1.42.101\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"consul_s2: 10.1.42.102\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"consul_s3: 10.1.42.103\")))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.consul.io/downloads.html\"}),\"Consul binary\"),` is presumed to be\nlocated in `,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"/usr/local/bin/consul\")),`, but if your case differs, you can adjust the\npath references accordingly.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"With that in mind, here is a basic Consul server configuration starting point:\"),mdx(\"pre\",e({},{className:\"language-plaintext\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-plaintext\"}),\"{\",`\n`,'  \"server\": true,',`\n`,'  \"node_name\": \"$NODE_NAME\",',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"data_dir\": \"$CONSUL_DATA_PATH\",',`\n`,'  \"bind_addr\": \"0.0.0.0\",',`\n`,'  \"client_addr\": \"0.0.0.0\",',`\n`,'  \"advertise_addr\": \"$ADVERTISE_ADDR\",',`\n`,'  \"bootstrap_expect\": 3,',`\n`,'  \"retry_join\": [\"$JOIN1\", \"$JOIN2\", \"$JOIN3\"],',`\n`,'  \"ui\": true,',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Note that some values contain variable placeholders while the rest have\nreasonable defaults. You should replace the following values in your own Consul\nserver configuration based on the example:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$NODE_NAME\"),` this is a unique label for the node; in our case, this will be\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"consul_s1\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"consul_s2\"),\", and \",mdx(\"inlineCode\",{parentName:\"li\"},\"consul_s3\"),\" respectively.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$CONSUL_DATA_PATH\"),`: absolute path to Consul data directory; ensure that\nthis directory is writable by the Consul process user.`),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$ADVERTISE_ADDR\"),`: set to address that you prefer the Consul\nservers advertise to the other servers in the cluster and should not be set to\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"0.0.0.0\"),`; for this guide, it should be set to the Consul server\\u2019s IP address in\neach instance of the configuration file, or `,mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.101\"),\",\",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.102\"),`, and\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.103\"),\" respectively.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN1\"),\",\\u2005\",mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN2\"),\", \",mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN3\"),\": This example uses the \",mdx(\"inlineCode\",{parentName:\"li\"},\"retry_join\"),`\nmethod of joining the server agents to form a cluster; as such, the values for\nthis guide would be `,mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.101\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.102\"),\", and \",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.103\"),\" respectively.\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Note that the web user interface is enabled (\",mdx(\"inlineCode\",{parentName:\"p\"},'\"ui\": true'),`), and Consul will be\nlogging at DEBUG level to the system log (`,mdx(\"inlineCode\",{parentName:\"p\"},'\"log_level\": \"DEBUG\"'),`). For the\npurpose of this guide, the `,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"acl_enforce_version_8\")),\" is set to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),` so that\nwe do not need to be concerned with ACLs in this guide. However, you would want\nto enable ACLs in a production environment and follow the `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.consul.io/docs/guides/acl.html#acl-agent-master-token\"}),\"Consul ACL Guide\"),` for\ndetails.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Create a configuration file for each Vault server and save it as\n`,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"/usr/local/etc/consul/client_agent.json\")),\".\"),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul_s1-json-example\",\"aria-label\":\"consul_s1 json example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul_s1-json-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"consul_s1.json\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": true,',`\n`,'  \"node_name\": \"consul_s1\",',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"data_dir\": \"/var/consul/data\",',`\n`,'  \"bind_addr\": \"0.0.0.0\",',`\n`,'  \"client_addr\": \"0.0.0.0\",',`\n`,'  \"advertise_addr\": \"10.1.42.101\",',`\n`,'  \"bootstrap_expect\": 3,',`\n`,'  \"retry_join\": [\"10.1.42.101\", \"10.1.42.102\", \"10.1.42.103\"],',`\n`,'  \"ui\": true,',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul_s2-json-example\",\"aria-label\":\"consul_s2 json example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul_s2-json-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"consul_s2.json\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": true,',`\n`,'  \"node_name\": \"consul_s2\",',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"data_dir\": \"/var/consul/data\",',`\n`,'  \"bind_addr\": \"0.0.0.0\",',`\n`,'  \"client_addr\": \"0.0.0.0\",',`\n`,'  \"advertise_addr\": \"10.1.42.102\",',`\n`,'  \"bootstrap_expect\": 3,',`\n`,'  \"retry_join\": [\"10.1.42.101\", \"10.1.42.102\", \"10.1.42.103\"],',`\n`,'  \"ui\": true,',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul_s3-json-example\",\"aria-label\":\"consul_s3 json example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul_s3-json-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"consul_s3.json\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": true,',`\n`,'  \"node_name\": \"consul_s3\",',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"data_dir\": \"/var/consul/data\",',`\n`,'  \"bind_addr\": \"0.0.0.0\",',`\n`,'  \"client_addr\": \"0.0.0.0\",',`\n`,'  \"advertise_addr\": \"10.1.42.103\",',`\n`,'  \"bootstrap_expect\": 3,',`\n`,'  \"retry_join\": [\"10.1.42.101\", \"10.1.42.102\", \"10.1.42.103\"],',`\n`,'  \"ui\": true,',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul-server-systemd-unit-file\",\"aria-label\":\"consul server systemd unit file permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul-server-systemd-unit-file\",\"aria-hidden\":\"\"})),\"Consul Server \",mdx(\"inlineCode\",{parentName:\"h4\"},\"systemd\"),\" Unit file\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You have Consul binaries and a reasonably basic configuration and now you just\nneed to start Consul on each server instance; `,mdx(\"inlineCode\",{parentName:\"p\"},\"systemd\"),` is popular in most\ncontemporary Linux distributions, so with that in mind, here is an example\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"systemd\"),\" unit file:\"),mdx(\"pre\",e({},{className:\"language-plaintext\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-plaintext\"}),\"### BEGIN INIT INFO\",`\n`,\"# Provides:          consul\",`\n`,\"# Required-Start:    $local_fs $remote_fs\",`\n`,\"# Required-Stop:     $local_fs $remote_fs\",`\n`,\"# Default-Start:     2 3 4 5\",`\n`,\"# Default-Stop:      0 1 6\",`\n`,\"# Short-Description: Consul agent\",`\n`,\"# Description:       Consul service discovery framework\",`\n`,\"### END INIT INFO\",`\n`,`\n`,\"[Unit]\",`\n`,\"Description=Consul server agent\",`\n`,\"Requires=network-online.target\",`\n`,\"After=network-online.target\",`\n`,`\n`,\"[Service]\",`\n`,\"User=consul\",`\n`,\"Group=consul\",`\n`,\"PIDFile=/var/run/consul/consul.pid\",`\n`,\"PermissionsStartOnly=true\",`\n`,\"ExecStartPre=-/bin/mkdir -p /var/run/consul\",`\n`,\"ExecStartPre=/bin/chown -R consul:consul /var/run/consul\",`\n`,\"ExecStart=/usr/local/bin/consul agent \\\\\",`\n`,\"    -config-file=/usr/local/etc/consul/client_agent.json \\\\\",`\n`,\"    -pid-file=/var/run/consul/consul.pid\",`\n`,\"ExecReload=/bin/kill -HUP $MAINPID\",`\n`,\"KillMode=process\",`\n`,\"KillSignal=SIGTERM\",`\n`,\"Restart=on-failure\",`\n`,\"RestartSec=42s\",`\n`,`\n`,\"[Install]\",`\n`,\"WantedBy=multi-user.target\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Note that you might be interested in changing the values of the following\ndepending on style, file system hierarchy standard adherence level, and so on:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-config-file\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-pid-file\")))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Once the unit file is defined and saved (e.g.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/systemd/system/consul.service\"),\"), be sure to perform a \",mdx(\"inlineCode\",{parentName:\"p\"},\"systemctl daemon-reload\"),`\nand then you can start your Consul service on each server.`),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#step2\",\"aria-label\":\"step 2 start and verify the consul cluster state permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h __compat\",id:\"step2\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"step-2-start-and-verify-the-consul-cluster-state\",\"aria-hidden\":\"\"})),\"Step 2: Start and Verify the Consul Cluster State\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Be sure that the ownership and permissions are correct on the directory you\nspecified for the value of `,mdx(\"inlineCode\",{parentName:\"p\"},\"data_dir\"),`, and then start the Consul service on each\nsystem and verify the status:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$ sudo systemctl start consul\",`\n`,\"$ sudo systemctl status consul\",`\n`,\"\\u25CF consul.service - Consul server agent\",`\n`,\"   Loaded: loaded (/etc/systemd/system/consul.service; enabled; vendor preset: enabled)\",`\n`,\"   Active: active (running) since Mon 2018-03-19 17:33:14 UTC; 24h ago\",`\n`,\" Main PID: 2068 (consul)\",`\n`,\"    Tasks: 13\",`\n`,\"   Memory: 13.6M\",`\n`,\"      CPU: 0m 52.784s\",`\n`,\"   CGroup: /system.slice/consul.service\",`\n`,\"           \\u2514\\u25002068 /usr/local/bin/consul agent -config-file=/usr/local/etc/consul/client_agent.json -pid-file=/var/run/consul/consul.pid\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"After starting all Consul server agents, let\\u2019s check the Consul cluster status:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$consul members\",`\n`,\"Node       Address           Status  Type    Build  Protocol  DC    Segment\",`\n`,\"consul_s1  10.1.42.101:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`,\"consul_s2  10.1.42.102:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`,\"consul_s3  10.1.42.103:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The cluster looks good and all 3 servers are shown; let\\u2019s make sure we have a\nleader before proceeding:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$consul operator raft list-peers\",`\n`,\"Node                   ID                                    Address           State     Voter  RaftProtocol\",`\n`,\"consul_s2              536b721f-645d-544a-c10d-85c2ca24e4e4  10.1.42.102:8300  follower  true   3\",`\n`,\"consul_s1              e10ba554-a4f9-6a8c-f662-81c8bb2a04f5  10.1.42.101:8300  follower  true   3\",`\n`,\"consul_s3              56370ec8-da25-e7dc-dfc6-bf5f27978a7a  10.1.42.103:8300  leader    true   3\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The above output shows that \",mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"consul_s3\")),` is the current cluster leader in\nthis example. Now, you are good to move on to the Vault server configuration.`),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#step3\",\"aria-label\":\"step 3 setup consul client agents on vault nodes permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h __compat\",id:\"step3\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"step-3-setup-consul-client-agents-on-vault-nodes\",\"aria-hidden\":\"\"})),\"Step 3: Setup Consul Client Agents on Vault Nodes\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The Vault server nodes require \",mdx(\"strong\",{parentName:\"p\"},\"both\"),\" the Consul and Vault binaries on each node. Consul will be configured as a \",mdx(\"strong\",{parentName:\"p\"},\"client\"),\" agent and Vault will be configured as a server.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),mdx(\"img\",e({parentName:\"p\"},{src:\"/img/vault-ha-consul-2.png\",alt:\"Reference Architecture\"}))),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul-client-agent-configuration\",\"aria-label\":\"consul client agent configuration permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul-client-agent-configuration\",\"aria-hidden\":\"\"})),\"Consul Client Agent Configuration\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Since Consul is used to provide a highly available storage backend, you need to\nconfigure local Consul client agents on the Vault servers which will communicate\nwith the Consul server cluster for registering health checks, service discovery, and cluster HA failover coordination (cluster leadership).`),mdx(\"div\",e({},{className:\"alert alert-warning g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),\"Note that \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/configuration/storage/consul#address\"}),`it is not recommended to connect the Vault servers directly to the\nConsul servers`),\".\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The Consul client agents will be using the same address as the Vault servers for\nnetwork communication to the Consul server cluster, but they will be binding the\n`,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"client_address\")),` only to the loopback interface such that Vault can connect to\nit over the loopback interface.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Here is the example configuration for the Consul client agent:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": false,',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"node_name\": \"$NODE_NAME\",',`\n`,'  \"data_dir\": \"$CONSUL_DATA_PATH\",',`\n`,'  \"bind_addr\": \"$BIND_ADDR\",',`\n`,'  \"client_addr\": \"127.0.0.1\",',`\n`,'  \"retry_join\": [\"$JOIN1\", \"$JOIN2\", \"$JOIN3\"],',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Similar to what you have done in \",mdx(\"a\",e({parentName:\"p\"},{href:\"#step1\"}),\"Step 1\"),`, replace the following values\nin your own Consul client agent configuration accordingly:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$NODE_NAME\"),` this is a unique label for the node; in\nour case, this will be `,mdx(\"inlineCode\",{parentName:\"li\"},\"consul_c1\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"consul_c2\"),\" respectively.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$CONSUL_DATA_PATH\"),`: absolute path to Consul data directory; ensure that this\ndirectory is writable by the Consul process user.`),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$BIND_ADDR\"),`: this should be set\nto address that you prefer the Consul servers advertise to the other servers in\nthe cluster and should not be set to `,mdx(\"inlineCode\",{parentName:\"li\"},\"0.0.0.0\"),`; for this guide, it should be set\nto the Vault server\\u2019s IP address in each instance of the configuration file, or\n`,mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.201\"),\" and \",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.202\"),\" respectively.\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN1\"),\",\\u2005\",mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN2\"),\", \",mdx(\"strong\",{parentName:\"li\"},\"\\\\$JOIN3\"),\": This example uses the \",mdx(\"inlineCode\",{parentName:\"li\"},\"retry_join\"),` method of\njoining the server agents to form a cluster; as such, the values for this guide\nwould be `,mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.101\"),\", \",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.102\"),\", and \",mdx(\"inlineCode\",{parentName:\"li\"},\"10.1.42.103\"),\" respectively.\")),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Create a configuration file for each Vault server and save it as\n`,mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"/usr/local/etc/consul/client_agent.json\")),\".\"),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul_c1-json-example\",\"aria-label\":\"consul_c1 json example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul_c1-json-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"consul_c1.json\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": false,',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"node_name\": \"consul_c1\",',`\n`,'  \"data_dir\": \"/var/consul/data\",',`\n`,'  \"bind_addr\": \"10.1.42.201\",',`\n`,'  \"client_addr\": \"127.0.0.1\",',`\n`,'  \"retry_join\": [\"10.1.42.101\", \"10.1.42.102\", \"10.1.42.103\"],',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul_c2-json-example\",\"aria-label\":\"consul_c2 json example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul_c2-json-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"consul_c2.json\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"{\",`\n`,'  \"server\": false,',`\n`,'  \"datacenter\": \"dc1\",',`\n`,'  \"node_name\": \"consul_c2\",',`\n`,'  \"data_dir\": \"/var/consul/data\",',`\n`,'  \"bind_addr\": \"10.1.42.202\",',`\n`,'  \"client_addr\": \"127.0.0.1\",',`\n`,'  \"retry_join\": [\"10.1.42.101\", \"10.1.42.102\", \"10.1.42.103\"],',`\n`,'  \"log_level\": \"DEBUG\",',`\n`,'  \"enable_syslog\": true,',`\n`,'  \"acl_enforce_version_8\": false',`\n`,\"}\",`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#consul-server-systemd-unit-file-1\",\"aria-label\":\"consul server systemd unit file permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"consul-server-systemd-unit-file-1\",\"aria-hidden\":\"\"})),\"Consul Server \",mdx(\"inlineCode\",{parentName:\"h4\"},\"systemd\"),\" Unit file\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You have Consul binaries and a reasonably basic client agent configuration and\nnow you just need to start Consul on each of the Vault server instances. Here\nis an example `,mdx(\"inlineCode\",{parentName:\"p\"},\"systemd\"),\" unit file:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"### BEGIN INIT INFO\",`\n`,\"# Provides:          consul\",`\n`,\"# Required-Start:    $local_fs $remote_fs\",`\n`,\"# Required-Stop:     $local_fs $remote_fs\",`\n`,\"# Default-Start:     2 3 4 5\",`\n`,\"# Default-Stop:      0 1 6\",`\n`,\"# Short-Description: Consul agent\",`\n`,\"# Description:       Consul service discovery framework\",`\n`,\"### END INIT INFO\",`\n`,`\n`,\"[Unit]\",`\n`,\"Description=Consul client agent\",`\n`,\"Requires=network-online.target\",`\n`,\"After=network-online.target\",`\n`,`\n`,\"[Service]\",`\n`,\"User=consul\",`\n`,\"Group=consul\",`\n`,\"PIDFile=/var/run/consul/consul.pid\",`\n`,\"PermissionsStartOnly=true\",`\n`,\"ExecStartPre=-/bin/mkdir -p /var/run/consul\",`\n`,\"ExecStartPre=/bin/chown -R consul:consul /var/run/consul\",`\n`,\"ExecStart=/usr/local/bin/consul agent \\\\\",`\n`,\"    -config-file=/usr/local/etc/consul/client_agent.json \\\\\",`\n`,\"    -pid-file=/var/run/consul/consul.pid\",`\n`,\"ExecReload=/bin/kill -HUP $MAINPID\",`\n`,\"KillMode=process\",`\n`,\"KillSignal=SIGTERM\",`\n`,\"Restart=on-failure\",`\n`,\"RestartSec=42s\",`\n`,`\n`,\"[Install]\",`\n`,\"WantedBy=multi-user.target\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Change the following values as necessary:\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-config-file\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-pid-file\")))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Once the unit file is defined and saved (e.g.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/systemd/system/consul.service\"),\"), be sure to perform a \",mdx(\"inlineCode\",{parentName:\"p\"},\"systemctl daemon-reload\"),\" and then you can start your Consul service on each Vault server.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Start the Consul and verify its cluster state to be sure that the ownership and\npermissions are correct on the directory you specified for the value of\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"data_dir\"),`, and then start the Consul service on each system and verify the\nstatus:`),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$ sudo systemctl start consul\",`\n`,\"$ sudo systemctl status consul\",`\n`,\"\\u25CF consul.service - Consul client agent\",`\n`,\"   Loaded: loaded (/etc/systemd/system/consul.service; enabled; vendor preset: enabled)\",`\n`,\"   Active: active (running) since Tue 2018-03-20 19:36:49 UTC; 6s ago\",`\n`,\" Main PID: 23758 (consul)\",`\n`,\"    Tasks: 11\",`\n`,\"   Memory: 9.8M\",`\n`,\"      CPU: 571ms\",`\n`,\"   CGroup: /system.slice/consul.service\",`\n`,\"           \\u2514\\u250023758 /usr/local/bin/consul agent -config-file=/usr/local/etc/consul/client_agent.json -pid-file=/var/run/consul/consul.pid\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"After starting all Consul client agents, check the Consul cluster status:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$consul members\",`\n`,\"Node        Address           Status  Type    Build  Protocol  DC    Segment\",`\n`,\"consul_s1   10.1.42.101:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`,\"consul_s2   10.1.42.102:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`,\"consul_s3   10.1.42.103:8301  alive   server  1.0.6  2         dc1   <all>\",`\n`,\"consul_c1   10.1.42.201:8301  alive   client  1.0.6  2         arus  <default>\",`\n`,\"consul_c2   10.1.42.202:8301  alive   client  1.0.6  2         arus  <default>\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`The above output shows 3 Consul server agents and 2 Consul client agents in the\ncluster. Now, you are ready to configure the Vault servers.`),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#step4\",\"aria-label\":\"step 4 configure the vault servers permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h __compat\",id:\"step4\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"step-4-configure-the-vault-servers\",\"aria-hidden\":\"\"})),\"Step 4: Configure the Vault Servers\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Now that we have a Consul cluster consisting of 3 servers and 2 client agents\nfor our Vault servers, let\\u2019s get the configuration for Vault and a startup\nscript together so that we can bootstrap the Vault HA setup.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Our Vault servers in this guide are defined by IP address only, but referenced\nby a label as well:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"vault_s1: 10.1.42.201\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"vault_s2: 10.1.42.202\")))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"In our configuration file, we'll set up the following:\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/configuration/listener/tcp\"}),mdx(\"strong\",{parentName:\"a\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"tcp\"))),\" listener\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/configuration/storage/consul\"}),mdx(\"strong\",{parentName:\"a\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"consul\"))),\" storage backend\"),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{href:\"/docs/configuration#high-availability-parameters\"}),\"High Availability parameters\"))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"This section assumes the Vault binary is located at \",mdx(\"strong\",{parentName:\"p\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"/usr/local/bin/vault\"))),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#vault-configuration\",\"aria-label\":\"vault configuration permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"vault-configuration\",\"aria-hidden\":\"\"})),\"Vault Configuration\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),'listener \"tcp\" {',`\n`,'  address          = \"0.0.0.0:8200\"',`\n`,'  cluster_address  = \"0.0.0.0:8201\"',`\n`,'  tls_disable      = \"true\"',`\n`,\"}\",`\n`,`\n`,'storage \"consul\" {',`\n`,'  address = \"127.0.0.1:8500\"',`\n`,'  path    = \"vault/\"',`\n`,\"}\",`\n`,`\n`,'api_addr =  \"$API_ADDR\"',`\n`,'cluster_addr = \"$CLUSTER_ADDR\"',`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"We're setting the following parameters for our \",mdx(\"inlineCode\",{parentName:\"p\"},\"tcp\"),\" listener:\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{id:\"address\",className:\"__target-lic\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"li\"},{href:\"#address\",\"aria-label\":\"address permalink\",className:\"__permalink-lic\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"address\")),' (string: \"127.0.0.1:8200\") \\u2013 Specifies the address to bind to for listening.'),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{id:\"cluster_address\",className:\"__target-lic\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"li\"},{href:\"#cluster_address\",\"aria-label\":\"cluster_address permalink\",className:\"__permalink-lic\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"cluster_address\")),' (string: \"127.0.0.1:8201\") \\u2013 Specifies the address to bind to for cluster server-to-server requests. This defaults to one port higher than the value of address. This does not usually need to be set, but can be useful in case Vault servers are isolated from each other in such a way that they need to hop through a TCP load balancer or some other scheme in order to talk.')),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`This configuration allows for listening on all interfaces (such that a Vault\ncommand against the loopback address would succeed, for example).`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"We're also explicitly setting Vault's \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/configuration#high-availability-parameters\"}),\"HA parameters\"),\" (\",mdx(\"inlineCode\",{parentName:\"p\"},\"api_addr\"),\" and \",mdx(\"inlineCode\",{parentName:\"p\"},\"cluster_addr\"),\"). Often, it's not necessary to configure these two parameters when using Consul as Vault's storage backend, as Consul will attempt to automatically discover and advertise the address of the active Vault node. However, certain cluster configurations might require them to be explicitly set (accessing Vault through a load balancer, for example).\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"For the sake of simplicity, we will assume that clients in our scenario connect directly to the Vault nodes (rather than through a load balancer). Review the \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/concepts/ha#client-redirection\"}),\"Client Redirection\"),\" documentation for more information on client access patterns and their implications.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Note that some values contain variable placeholders while the rest have\nreasonable defaults. You should replace the following values in your own Vault\nserver configuration based on the example:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"\\\\$API_ADDR\"),\": Specifies the address (full URL) to advertise to other Vault servers in the cluster for client redirection. This can also be provided via the environment variable \",mdx(\"inlineCode\",{parentName:\"p\"},\"VAULT_API_ADDR\"),\". In general this should be set to a full URL that points to the value of the listener address. In our scenario, it will be \",mdx(\"inlineCode\",{parentName:\"p\"},\"http://10.1.42.201:8200\"),`\nand `,mdx(\"inlineCode\",{parentName:\"p\"},\"http://10.1.42.202:8200\"),\" respectively.\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"p\"},\"\\\\$CLUSTER_ADDR\"),\": Specifies the address to advertise to other Vault servers in the cluster for request forwarding. This can also be provided via the environment variable \",mdx(\"inlineCode\",{parentName:\"p\"},\"VAULT_CLUSTER_ADDR\"),\". This is a full URL, like \",mdx(\"inlineCode\",{parentName:\"p\"},\"api_addr\"),\". In our scenario, it will be \",mdx(\"inlineCode\",{parentName:\"p\"},\"https://10.1.42.201:8201\"),` and\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"https://10.1.42.202:8201\"),\" respectively.\"))),mdx(\"blockquote\",null,mdx(\"p\",e({parentName:\"blockquote\"},{className:\"g-type-long-body\"}),`Note that the scheme here (https) is ignored; all cluster members will always\nuse TLS with a private key/certificate.`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#vault_s1-hcl-example\",\"aria-label\":\"vault_s1 hcl example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"vault_s1-hcl-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"vault_s1.hcl\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),'listener \"tcp\" {',`\n`,'  address          = \"0.0.0.0:8200\"',`\n`,'  cluster_address  = \"10.1.42.201:8201\"',`\n`,'  tls_disable      = \"true\"',`\n`,\"}\",`\n`,`\n`,'storage \"consul\" {',`\n`,'  address = \"127.0.0.1:8500\"',`\n`,'  path    = \"vault/\"',`\n`,\"}\",`\n`,`\n`,'api_addr = \"http://10.1.42.201:8200\"',`\n`,'cluster_addr = \"https://10.1.42.201:8201\"',`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#vault_s2-hcl-example\",\"aria-label\":\"vault_s2 hcl example permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"vault_s2-hcl-example\",\"aria-hidden\":\"\"})),mdx(\"inlineCode\",{parentName:\"h4\"},\"vault_s2.hcl\"),\" Example\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),'listener \"tcp\" {',`\n`,'  address          = \"0.0.0.0:8200\"',`\n`,'  cluster_address  = \"10.1.42.202:8201\"',`\n`,'  tls_disable      = \"true\"',`\n`,\"}\",`\n`,`\n`,'storage \"consul\" {',`\n`,'  address = \"127.0.0.1:8500\"',`\n`,'  path    = \"vault/\"',`\n`,\"}\",`\n`,`\n`,'api_addr = \"http://10.1.42.202:8200\"',`\n`,'cluster_addr = \"https://10.1.42.202:8201\"',`\n`)),mdx(\"h4\",e({},{className:\"g-type-display-5\"}),mdx(\"a\",e({parentName:\"h4\"},{className:\"__permalink-h\",href:\"#vault-server-systemd-unit-file\",\"aria-label\":\"vault server systemd unit file permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h4\"},{className:\"__target-h\",id:\"vault-server-systemd-unit-file\",\"aria-hidden\":\"\"})),\"Vault Server \",mdx(\"inlineCode\",{parentName:\"h4\"},\"systemd\"),\" Unit file\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You have Vault binaries and a reasonably basic configuration along with local\nclient agents configured. Now, you just need to start Vault on each server\ninstance. Here is an example `,mdx(\"inlineCode\",{parentName:\"p\"},\"systemd\"),\" unit file:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"### BEGIN INIT INFO\",`\n`,\"# Provides:          vault\",`\n`,\"# Required-Start:    $local_fs $remote_fs\",`\n`,\"# Required-Stop:     $local_fs $remote_fs\",`\n`,\"# Default-Start:     2 3 4 5\",`\n`,\"# Default-Stop:      0 1 6\",`\n`,\"# Short-Description: Vault server\",`\n`,\"# Description:       Vault secret management tool\",`\n`,\"### END INIT INFO\",`\n`,`\n`,\"[Unit]\",`\n`,\"Description=Vault secret management tool\",`\n`,\"Requires=network-online.target\",`\n`,\"After=network-online.target\",`\n`,`\n`,\"[Service]\",`\n`,\"User=vault\",`\n`,\"Group=vault\",`\n`,\"PIDFile=/var/run/vault/vault.pid\",`\n`,\"ExecStart=/usr/local/bin/vault server -config=/etc/vault/vault_server.hcl -log-level=debug\",`\n`,\"ExecReload=/bin/kill -HUP $MAINPID\",`\n`,\"KillMode=process\",`\n`,\"KillSignal=SIGTERM\",`\n`,\"Restart=on-failure\",`\n`,\"RestartSec=42s\",`\n`,\"LimitMEMLOCK=infinity\",`\n`,`\n`,\"[Install]\",`\n`,\"WantedBy=multi-user.target\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Note that you might be interested in changing the values of the following\ndepending on style, file system hierarchy standard adherence level, and so on:`),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-config\"))),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"strong\",{parentName:\"li\"},mdx(\"inlineCode\",{parentName:\"strong\"},\"-log-level\")))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Once the unit file is defined and saved as e.g.\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"/etc/systemd/system/vault.service\"),\", be sure to perform a \",mdx(\"inlineCode\",{parentName:\"p\"},\"systemctl daemon-reload\"),`\nand then you can start your Vault service on each server.`),mdx(\"h3\",e({},{className:\"g-type-display-4\"}),mdx(\"a\",e({parentName:\"h3\"},{className:\"__permalink-h\",href:\"#step5\",\"aria-label\":\"step 5 start vault and verify the state permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h __compat\",id:\"step5\",\"aria-hidden\":\"\"})),mdx(\"a\",e({parentName:\"h3\"},{className:\"__target-h\",id:\"step-5-start-vault-and-verify-the-state\",\"aria-hidden\":\"\"})),\"Step 5: Start Vault and Verify the State\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Start the Vault service on each system and verify the status:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$ sudo systemctl start vault\",`\n`,\"$ sudo systemctl status vault\",`\n`,\"\\u25CF vault.service - Vault secret management tool\",`\n`,\"   Loaded: loaded (/etc/systemd/system/vault.service; enabled; vendor preset: enabled)\",`\n`,\"   Active: active (running) since Tue 2018-03-20 20:42:10 UTC; 42s ago\",`\n`,\" Main PID: 2080 (vault)\",`\n`,\"    Tasks: 12\",`\n`,\"   Memory: 71.7M\",`\n`,\"      CPU: 50s\",`\n`,\"   CGroup: /system.slice/vault.service\",`\n`,\"           \\u2514\\u25002080 /usr/local/bin/vault server -config=/home/ubuntu/vault_nano/config/vault_server.hcl -log-level=debu\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Now you\\u2019ll need to move on to \",mdx(\"a\",e({parentName:\"p\"},{href:\"/intro/getting-started/deploy#initializing-the-vault\"}),`initializing and\nunsealing`),` each Vault\ninstance.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Once that is done, check Vault status on each of the servers.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"strong\",{parentName:\"p\"},\"active\"),\" Vault server:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"$ vault status\",`\n`,\"Key             Value\",`\n`,\"---             -----\",`\n`,\"Seal Type       shamir\",`\n`,\"Sealed          false\",`\n`,\"Total Shares    5\",`\n`,\"Threshold       3\",`\n`,\"Version         0.9.5\",`\n`,\"Cluster Name    vault\",`\n`,\"Cluster ID      0ee91bd1-55ec-c84f-3c1d-dcc7f4f644a8\",`\n`,\"HA Enabled      true\",`\n`,\"HA Cluster      https://10.1.42.201:8201\",`\n`,\"HA Mode         active\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"The \",mdx(\"strong\",{parentName:\"p\"},\"standby\"),\" Vault server:\"),mdx(\"pre\",null,mdx(\"code\",e({parentName:\"pre\"},{}),\"vault status\",`\n`,\"Key                     Value\",`\n`,\"---                     -----\",`\n`,\"Seal Type               shamir\",`\n`,\"Sealed                  false\",`\n`,\"Total Shares            5\",`\n`,\"Threshold               3\",`\n`,\"Version                 0.9.5\",`\n`,\"Cluster Name            vaultron\",`\n`,\"Cluster ID              0ee91bd1-55ec-c84f-3c1d-dcc7f4f644a8\",`\n`,\"HA Enabled              true\",`\n`,\"HA Cluster              https://10.1.42.201:8201\",`\n`,\"HA Mode                 standby\",`\n`,\"Active Node Address:    http://10.1.42.201:8200\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Vault servers are now operational in HA mode at this point, and you should be\nable to write a secret from either the active or the standby Vault instance and\nsee it succeed as a test of request forwarding. Also, you can shut down the\nactive instance (`,mdx(\"inlineCode\",{parentName:\"p\"},\"sudo systemctl stop vault\"),`) to simulate a system failure and\nsee the standby instance assumes the leadership.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#next-steps\",\"aria-label\":\"next steps permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"next-steps\",\"aria-hidden\":\"\"})),\"Next steps\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Read \",mdx(\"a\",e({parentName:\"p\"},{href:\"/guides/operations/production\"}),\"Production Hardening\"),` to learn best\npractices for a production hardening deployment of Vault.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"navData":[{"title":"Getting Started","path":"getting-started","filePath":"content/guides/getting-started.mdx"},{"title":"Vault Operations","routes":[{"title":"Overview","path":"operations","filePath":"content/guides/operations/index.mdx"},{"title":"Reference Architecture","path":"operations/reference-architecture","filePath":"content/guides/operations/reference-architecture.mdx"},{"title":"Vault HA with Consul","path":"operations/vault-ha-consul","filePath":"content/guides/operations/vault-ha-consul.mdx"},{"title":"Production Hardening","path":"operations/production","filePath":"content/guides/operations/production.mdx"},{"title":"Root Token Generation","path":"operations/generate-root","filePath":"content/guides/operations/generate-root.mdx"},{"title":"Rekeying & Rotating","path":"operations/rekeying-and-rotating","filePath":"content/guides/operations/rekeying-and-rotating.mdx"},{"title":"Building Plugin Backends","path":"operations/plugin-backends","filePath":"content/guides/operations/plugin-backends.mdx"},{"divider":true},{"title":"Replication Setup & Guidance","path":"operations/replication","filePath":"content/guides/operations/replication.mdx"},{"title":"Disaster Recovery Setup","path":"operations/disaster-recovery","filePath":"content/guides/operations/disaster-recovery.mdx"},{"title":"Mount Filter","path":"operations/mount-filter","filePath":"content/guides/operations/mount-filter.mdx"},{"title":"Multi-Tenant: Namespaces","path":"operations/multi-tenant","filePath":"content/guides/operations/multi-tenant.mdx"},{"title":"Vault Auto-unseal with AWS KMS","path":"operations/autounseal-aws-kms","filePath":"content/guides/operations/autounseal-aws-kms.mdx"},{"title":"Seal Wrap / FIPS 140-2","path":"operations/seal-wrap","filePath":"content/guides/operations/seal-wrap.mdx"},{"title":"Vault Cluster Monitoring","path":"operations/monitoring","filePath":"content/guides/operations/monitoring.mdx"},{"title":"Vault Deployment Guide","path":"operations/deployment-guide","filePath":"content/guides/operations/deployment-guide.mdx"},{"title":"Performance Standby Nodes","path":"operations/performance-nodes","filePath":"content/guides/operations/performance-nodes.mdx"}]},{"title":"Identity and Access Management","routes":[{"title":"Overview","path":"identity","filePath":"content/guides/identity/index.mdx"},{"title":"Secure Introduction of Vault Clients","path":"identity/secure-intro","filePath":"content/guides/identity/secure-intro.mdx"},{"title":"Policies","path":"identity/policies","filePath":"content/guides/identity/policies.mdx"},{"title":"ACL Policy Path Templating","path":"identity/policy-templating","filePath":"content/guides/identity/policy-templating.mdx"},{"title":"AppRole Pull Authentication","path":"identity/authentication","filePath":"content/guides/identity/authentication.mdx"},{"title":"AppRole with Terraform and Chef","path":"identity/approle-trusted-entities","filePath":"content/guides/identity/approle-trusted-entities.mdx"},{"title":"Tokens and Leases","path":"identity/lease","filePath":"content/guides/identity/lease.mdx"},{"title":"Identity - Entities & Groups","path":"identity/identity","filePath":"content/guides/identity/identity.mdx"},{"divider":true},{"title":"Sentinel Policies","path":"identity/sentinel","filePath":"content/guides/identity/sentinel.mdx"},{"title":"Control Groups","path":"identity/control-groups","filePath":"content/guides/identity/control-groups.mdx"}]},{"title":"Secrets Management","routes":[{"title":"Overview","path":"secret-mgmt","filePath":"content/guides/secret-mgmt/index.mdx"},{"title":"Static Secrets","path":"secret-mgmt/static-secrets","filePath":"content/guides/secret-mgmt/static-secrets.mdx"},{"title":"Versioned KV Secret Engine","path":"secret-mgmt/versioned-kv","filePath":"content/guides/secret-mgmt/versioned-kv.mdx"},{"title":"Secret as a Service","path":"secret-mgmt/dynamic-secrets","filePath":"content/guides/secret-mgmt/dynamic-secrets.mdx"},{"title":"DB Root Credential Rotation","path":"secret-mgmt/db-root-rotation","filePath":"content/guides/secret-mgmt/db-root-rotation.mdx"},{"title":"Cubbyhole Response Wrapping","path":"secret-mgmt/cubbyhole","filePath":"content/guides/secret-mgmt/cubbyhole.mdx"},{"title":"One-Time SSH Password","path":"secret-mgmt/ssh-otp","filePath":"content/guides/secret-mgmt/ssh-otp.mdx"},{"title":"Build Your Own CA","path":"secret-mgmt/pki-engine","filePath":"content/guides/secret-mgmt/pki-engine.mdx"},{"title":"Direct Application Integration","path":"secret-mgmt/app-integration","filePath":"content/guides/secret-mgmt/app-integration.mdx"}]},{"title":"Encryption as a Service","routes":[{"title":"Overview","path":"encryption","filePath":"content/guides/encryption/index.mdx"},{"title":"Encryption as a Service","path":"encryption/transit","filePath":"content/guides/encryption/transit.mdx"},{"title":"Java Application Demo","path":"encryption/spring-demo","filePath":"content/guides/encryption/spring-demo.mdx"},{"title":"Transit Secrets Re-wrapping","path":"encryption/transit-rewrap","filePath":"content/guides/encryption/transit-rewrap.mdx"}]}],"versions":[]},"__N_SSG":true}