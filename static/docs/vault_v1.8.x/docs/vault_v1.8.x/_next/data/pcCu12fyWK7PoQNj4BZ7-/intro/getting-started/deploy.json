{"pageProps":{"currentPath":"getting-started/deploy","frontMatter":{"layout":"intro","page_title":"Deploy Vault - Getting Started","description":"Learn how to deploy Vault into production, how to initialize it, configure it, etc."},"githubFileUrl":"https://github.com/hashicorp/vault/blob/main/website/content/intro/getting-started/deploy.mdx","mdxSource":{"compiledSource":"var m=Object.defineProperty;var p=Object.prototype.hasOwnProperty;var o=Object.getOwnPropertySymbols,l=Object.prototype.propertyIsEnumerable;var r=(a,t,s)=>t in a?m(a,t,{enumerable:!0,configurable:!0,writable:!0,value:s}):a[t]=s,e=(a,t)=>{for(var s in t||(t={}))p.call(t,s)&&r(a,s,t[s]);if(o)for(var s of o(t))l.call(t,s)&&r(a,s,t[s]);return a};var i=(a,t)=>{var s={};for(var n in a)p.call(a,n)&&t.indexOf(n)<0&&(s[n]=a[n]);if(a!=null&&o)for(var n of o(a))t.indexOf(n)<0&&l.call(a,n)&&(s[n]=a[n]);return s};const layoutProps={},MDXLayout=\"wrapper\";function MDXContent(s){var n=s,{components:a}=n,t=i(n,[\"components\"]);return mdx(MDXLayout,e(e(e({},layoutProps),t),{components:a,mdxType:\"MDXLayout\"}),mdx(\"h1\",e({},{className:\"g-type-display-2\"}),mdx(\"a\",e({parentName:\"h1\"},{className:\"__permalink-h\",href:\"#deploy-vault\",\"aria-label\":\"deploy vault permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h1\"},{className:\"__target-h\",id:\"deploy-vault\",\"aria-hidden\":\"\"})),\"Deploy Vault\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Up to this point, we have been working with the \"dev\" server, which\nautomatically authenticated us, setup in-memory storage, etc. Now that you know\nthe basics of Vault, it is important to learn how to deploy Vault into a real\nenvironment.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`On this page, we'll cover how to configure Vault, start Vault, the seal/unseal\nprocess, and scaling Vault.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#configuring-vault\",\"aria-label\":\"configuring vault permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"configuring-vault\",\"aria-hidden\":\"\"})),\"Configuring Vault\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Vault is configured using \",mdx(\"a\",e({parentName:\"p\"},{href:\"https://github.com/hashicorp/hcl\"}),\"HCL\"),` files. The configuration file for Vault is\nrelatively simple:`),mdx(\"pre\",e({},{className:\"language-hcl\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-hcl\"}),\"storage \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"consul\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"address\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"127.0.0.1:8500\"'),`\n`,\"  \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"path\"),\"    \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"vault/\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`,`\n`,\"listener \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"tcp\"'),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"{\"),`\n`,\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"address\"),\"     \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token string\"}),'\"127.0.0.1:8200\"'),`\n`,\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token property\"}),\"tls_disable\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"=\"),\" \",mdx(\"span\",e({parentName:\"code\"},{className:\"token number\"}),\"1\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token punctuation\"}),\"}\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Within the configuration file, there are two primary configurations:\"),mdx(\"ul\",null,mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{id:\"storage\",className:\"__target-lic\",\"aria-hidden\":\"\"})),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"#storage\",\"aria-label\":\"storage permalink\",className:\"__permalink-lic\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"storage\")),` - This is the physical backend that Vault uses for storage. Up to\nthis point the dev server has used \"inmem\" (in memory), but the example above\nuses `,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.consul.io\"}),\"Consul\"),\", a much more production-ready backend.\")),mdx(\"li\",e({parentName:\"ul\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"li\"},{id:\"listener\",className:\"__target-lic\",\"aria-hidden\":\"\"})),mdx(\"p\",e({parentName:\"li\"},{className:\"g-type-long-body\"}),mdx(\"a\",e({parentName:\"p\"},{href:\"#listener\",\"aria-label\":\"listener permalink\",className:\"__permalink-lic\"}),mdx(\"inlineCode\",{parentName:\"a\"},\"listener\")),` - One or more listeners determine how Vault listens for API\nrequests. The example above listens on localhost port 8200 without TLS. In\nyour environment set `,mdx(\"inlineCode\",{parentName:\"p\"},\"VAULT_ADDR=http://127.0.0.1:8200\"),` so the Vault client\nwill connect without TLS.`))),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"For now, copy and paste the configuration above to a file called \",mdx(\"inlineCode\",{parentName:\"p\"},\"config.hcl\"),`.\nIt will configure Vault to expect an instance of Consul running locally.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Starting a local Consul instance takes only a few minutes. Just follow the\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://www.consul.io/intro/getting-started/install\"}),\"Consul Getting Started Guide\"),`\nup to the point where you have installed Consul and started it with this command:`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"consul agent -dev\")),`\n`)),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#starting-the-server\",\"aria-label\":\"starting the server permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"starting-the-server\",\"aria-hidden\":\"\"})),\"Starting the Server\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`With the configuration in place, starting the server is simple, as shown below.\nModify the `,mdx(\"inlineCode\",{parentName:\"p\"},\"-config\"),` flag to point to the proper path where you saved the\nconfiguration above.`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault server -config\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"config.hcl\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"==> Vault server configuration:\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"         Log Level: info\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"           Storage: consul\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),'        Listener 1: tcp (addr: \"127.0.0.1:8200\", tls: \"disabled\")'),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"==> Vault server started! Log data will stream in below:\"),`\n`)),mdx(\"div\",e({},{className:\"alert alert-info g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),`If you get a warning message about mlock not being supported, that is okay.\nHowever, you should run Vault on a system that supports mlock for maximum\nsecurity.`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Vault outputs some information about its configuration, and then blocks.\nThis process should be run using a resource manager such as systemd or\nupstart.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You'll notice that you can't execute any commands. We don't have any\nauth information! When you first setup a Vault server, you have to start\nby `,mdx(\"em\",{parentName:\"p\"},\"initializing\"),\" it.\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"On Linux, Vault may fail to start with the following error:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault server -config\",mdx(\"span\",e({parentName:\"span\"},{className:\"token operator\"}),\"=\"),\"example.hcl\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Error initializing core: Failed to lock memory: cannot allocate memory\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"This usually means that the mlock syscall is not available.\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Vault uses mlock to prevent memory from being swapped to\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"disk. This requires root privileges as well as a machine\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"that supports mlock. Please enable mlock on your system or\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"disable Vault from using it. To disable Vault from using it,\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"set the `disable_mlock` configuration option in your configuration\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"file.\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`For guidance on dealing with this issue, see the discussion of\n`,mdx(\"inlineCode\",{parentName:\"p\"},\"disable_mlock\"),\" in \",mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/configuration\"}),\"Server Configuration\"),\".\"),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#initializing-the-vault\",\"aria-label\":\"initializing the vault permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"initializing-the-vault\",\"aria-hidden\":\"\"})),\"Initializing the Vault\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Initialization is the process of configuring the Vault. This only happens once\nwhen the server is started against a new backend that has never been used with\nVault before. When running in HA mode, this happens once `,mdx(\"em\",{parentName:\"p\"},\"per cluster\"),\", not \",mdx(\"em\",{parentName:\"p\"},`per\nserver`),\".\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`During initialization, the encryption keys are generated, unseal keys are\ncreated, and the initial root token is setup. To initialize Vault use `,mdx(\"inlineCode\",{parentName:\"p\"},\"vault operator init\"),\". This is an \",mdx(\"em\",{parentName:\"p\"},\"unauthenticated\"),` request, but it only works on brand new\nVaults with no data:`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault operator init\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key 1: E4GnjX+VP9G50uWQNcwpCflzGAMKGR38BbQywgq4I6L8\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key 2: PYMxcCOswEYMNz7N6UW53Up6nu6y+SjAPwTJOTtkju3d\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key 3: yuJ5cSxC7tSBR5mMVJ/WJ9bfhhfGb+uwWw9FQR0JKILh\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key 4: 0vdvEFHM9PHEGMctJrl2ylHqoKQK8DLkfMU6ntmDz6jv\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key 5: cI8yglWJX+jPf/yQG7Sg6SPWzy0WyrBPvaFTOAYkPJTx\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Initial Root Token: 62421926-81b9-b202-86f8-8850176c0cf3\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Vault initialized with 5 key shares and a key threshold of 3. Please securely\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"distribute the key shares printed above. When the Vault is re-sealed,\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"restarted, or stopped, you must supply at least 3 of these keys to unseal it\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"before it can start servicing requests.\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Vault does not store the generated master key. Without at least 3 keys to\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"reconstruct the master key, Vault will remain permanently sealed!\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"It is possible to generate new unseal keys, provided you have a quorum of\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),'existing unseal keys shares. See \"vault operator rekey\" for more information.'),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Initialization outputs two incredibly important pieces of information:\nthe `,mdx(\"em\",{parentName:\"p\"},\"unseal keys\"),\" and the \",mdx(\"em\",{parentName:\"p\"},\"initial root token\"),`. This is the\n`,mdx(\"strong\",{parentName:\"p\"},\"only time ever\"),` that all of this data is known by Vault, and also the\nonly time that the unseal keys should ever be so close together.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`For the purpose of this getting started guide, save all of these keys\nsomewhere, and continue. In a real deployment scenario, you would never\nsave these keys together. Instead, you would likely use Vault's PGP and\nKeybase.io support to encrypt each of these keys with the users' PGP keys.\nThis prevents one single person from having all the unseal keys. Please\nsee the documentation on `,mdx(\"a\",e({parentName:\"p\"},{href:\"/docs/concepts/pgp-gpg-keybase\"}),\"using PGP, GPG, and Keybase\"),`\nfor more information.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#seal-unseal\",\"aria-label\":\"seal unseal permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"seal-unseal\",\"aria-hidden\":\"\"})),\"Seal/Unseal\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Every initialized Vault server starts in the \",mdx(\"em\",{parentName:\"p\"},\"sealed\"),` state. From\nthe configuration, Vault can access the physical storage, but it can't\nread any of it because it doesn't know how to decrypt it. The process\nof teaching Vault how to decrypt the data is known as `,mdx(\"em\",{parentName:\"p\"},\"unsealing\"),` the\nVault.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Unsealing has to happen every time Vault starts. It can be done via\nthe API and via the command line. To unseal the Vault, you\nmust have the `,mdx(\"em\",{parentName:\"p\"},\"threshold\"),` number of unseal keys. In the output above,\nnotice that the \"key threshold\" is 3. This means that to unseal\nthe Vault, you need 3 of the 5 keys that were generated.`),mdx(\"div\",e({},{className:\"alert alert-info g-type-body\",role:\"alert\"}),mdx(\"p\",e({parentName:\"div\"},{className:\"g-type-long-body\"}),\"\",mdx(\"strong\",{parentName:\"p\"},\"Note:\"),` Vault does not store any of the unseal key shards. Vault\nuses an algorithm known as\n`,mdx(\"a\",e({parentName:\"p\"},{href:\"https://en.wikipedia.org/wiki/Shamir%27s_Secret_Sharing\"}),\"Shamir's Secret Sharing\"),`\nto split the master key into shards. Only with the threshold number of keys\ncan it be reconstructed and your data finally accessed.`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Begin unsealing the Vault:\"),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault operator unseal\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key (will be hidden):\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Key                Value\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"---                -----\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Sealed             true\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Total Shares       5\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Progress    1/3\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Nonce       786e7190-d1e2-84d2-520c-022efee5b71e\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Version            (version unknown)\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"HA Enabled         true\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"HA Mode            sealed\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`After pasting in a valid key and confirming, you'll see that the Vault is still\nsealed, but progress is made. Vault knows it has 1 key out of 3. Due to the\nnature of the algorithm, Vault doesn't know if it has the `,mdx(\"em\",{parentName:\"p\"},\"correct\"),` key until\nthe threshold is reached.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Also notice that the unseal process is stateful. You can go to another computer,\nuse `,mdx(\"inlineCode\",{parentName:\"p\"},\"vault operator unseal\"),`, and as long as it's pointing to the same server,\nthat other computer can continue the unseal process. This is incredibly\nimportant to the design of the unseal process: multiple people with multiple\nkeys are required to unseal the Vault. The Vault can be unsealed from multiple\ncomputers and the keys should never be together. A single malicious operator\ndoes not have enough keys to be malicious.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Continue with \",mdx(\"inlineCode\",{parentName:\"p\"},\"vault operator unseal\"),` to complete unsealing the Vault. To unseal\nthe vault you must use three `,mdx(\"em\",{parentName:\"p\"},\"different\"),` keys, the same key repeated will not\nwork. As you use keys, as long as they are correct, you should soon see output\nlike this:`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault operator unseal\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key (will be hidden):\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"#\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"..\"),\".\")),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault operator unseal\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Unseal Key (will be hidden):\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"#\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token punctuation\"}),\"..\"),\".\")),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"When the value for \",mdx(\"inlineCode\",{parentName:\"p\"},\"Sealed\"),\" changes to \",mdx(\"inlineCode\",{parentName:\"p\"},\"false\"),\", the Vault is unsealed:\"),mdx(\"pre\",e({},{className:\"language-text\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-text\"}),\"Key             Value\",`\n`,\"---             -----\",`\n`,\"Sealed          false <--\",`\n`,\"Total Shares    5\",`\n`,\"Version         (version unknown)\",`\n`,\"Cluster Name    vault-cluster-8a8b2c36\",`\n`,\"Cluster ID      34e94a2e-2d8f-c7cc-271d-96fd438ccc6d\",`\n`,\"HA Enabled      true\",`\n`,\"HA Mode         standby\",`\n`,\"HA Cluster      n/a\",`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Feel free to play around with entering invalid keys, keys in different\norders, etc. in order to understand the unseal process.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`Finally, authenticate as the initial root token (it was included in the output\nwith the unseal keys):`),mdx(\"pre\",e({},{className:\"language-shell-session\"}),mdx(\"code\",e({parentName:\"pre\"},{className:\"language-shell-session\"}),mdx(\"span\",e({parentName:\"code\"},{className:\"token command\"}),mdx(\"span\",e({parentName:\"span\"},{className:\"token shell-symbol important\"}),\"$\"),\" \",mdx(\"span\",e({parentName:\"span\"},{className:\"token bash language-bash\"}),\"vault login 14d1316e-78f6-910b-a4cc-9ba6697ec814\")),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Success! You are now authenticated. The token information displayed below\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),'is already stored in the token helper. You do NOT need to run \"vault login\"'),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"again. Future Vault requests will automatically use this token.\"),`\n`,`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"Key                Value\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"---                -----\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"token              14d1316e-78f6-910b-a4cc-9ba6697ec814\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"token_accessor     a8bbcc57-9be6-6584-a7a6-46290962fd33\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"token_duration     \\u221E\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"token_renewable    false\"),`\n`,mdx(\"span\",e({parentName:\"code\"},{className:\"token output\"}),\"token_policies     [root]\"),`\n`)),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"As a root user, you can reseal the Vault with \",mdx(\"inlineCode\",{parentName:\"p\"},\"vault operator seal\"),`. A single\noperator is allowed to do this. This lets a single operator lock down the\nVault in an emergency without consulting other operators.`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`When the Vault is sealed again, it clears all of its state (including the\nencryption key) from memory. The Vault is secure and locked down from access.`),mdx(\"h2\",e({},{className:\"g-type-display-3\"}),mdx(\"a\",e({parentName:\"h2\"},{className:\"__permalink-h\",href:\"#next\",\"aria-label\":\"next permalink\"}),\"\\xBB\"),mdx(\"a\",e({parentName:\"h2\"},{className:\"__target-h\",id:\"next\",\"aria-hidden\":\"\"})),\"Next\"),mdx(\"p\",e({},{className:\"g-type-long-body\"}),`You now know how to configure, initialize, and unseal/seal Vault. This is the\nbasic knowledge necessary to deploy Vault into a real environment. Once the\nVault is unsealed, you access it as you have throughout this getting started\nguide (which worked with an unsealed Vault).`),mdx(\"p\",e({},{className:\"g-type-long-body\"}),\"Next, we have a \",mdx(\"a\",e({parentName:\"p\"},{href:\"/intro/getting-started/apis\"}),\"short tutorial\"),` on using the\nHTTP APIs to authenticate and access secrets.`))}MDXContent.isMDXComponent=!0;\n","scope":{}},"navData":[{"title":"Getting Started","routes":[{"title":"Overview","path":"getting-started","filePath":"content/intro/getting-started/index.mdx"},{"title":"Starting the Server","path":"getting-started/dev-server","filePath":"content/intro/getting-started/dev-server.mdx"},{"title":"Your First Secret","path":"getting-started/first-secret","filePath":"content/intro/getting-started/first-secret.mdx"},{"title":"Secrets Engines","path":"getting-started/secrets-engines","filePath":"content/intro/getting-started/secrets-engines.mdx"},{"title":"Dynamic Secrets","path":"getting-started/dynamic-secrets","filePath":"content/intro/getting-started/dynamic-secrets.mdx"},{"title":"Built-in Help","path":"getting-started/help","filePath":"content/intro/getting-started/help.mdx"},{"title":"Authentication","path":"getting-started/authentication","filePath":"content/intro/getting-started/authentication.mdx"},{"title":"Policies","path":"getting-started/policies","filePath":"content/intro/getting-started/policies.mdx"},{"title":"Deploy Vault","path":"getting-started/deploy","filePath":"content/intro/getting-started/deploy.mdx"},{"title":"HTTP API","path":"getting-started/apis","filePath":"content/intro/getting-started/apis.mdx"},{"title":"Next Steps","path":"getting-started/next-steps","filePath":"content/intro/getting-started/next-steps.mdx"}]}],"versions":[]},"__N_SSG":true}